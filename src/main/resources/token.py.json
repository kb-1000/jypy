[[62, "utf-8", [0, 0], [0, 0], ""], [3, "\"\"\"Token constants.\"\"\"", [1, 0], [1, 22], "\"\"\"Token constants.\"\"\"\n"], [4, "\n", [1, 22], [1, 23], "\"\"\"Token constants.\"\"\"\n"], [60, "# Auto-generated by Tools/scripts/generate_token.py", [2, 0], [2, 51], "# Auto-generated by Tools/scripts/generate_token.py\n"], [61, "\n", [2, 51], [2, 52], "# Auto-generated by Tools/scripts/generate_token.py\n"], [61, "\n", [3, 0], [3, 1], "\n"], [1, "__all__", [4, 0], [4, 7], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [54, "=", [4, 8], [4, 9], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [54, "[", [4, 10], [4, 11], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [3, "'tok_name'", [4, 11], [4, 21], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [54, ",", [4, 21], [4, 22], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [3, "'ISTERMINAL'", [4, 23], [4, 35], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [54, ",", [4, 35], [4, 36], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [3, "'ISNONTERMINAL'", [4, 37], [4, 52], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [54, ",", [4, 52], [4, 53], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [3, "'ISEOF'", [4, 54], [4, 61], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [54, "]", [4, 61], [4, 62], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [4, "\n", [4, 62], [4, 63], "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n"], [61, "\n", [5, 0], [5, 1], "\n"], [1, "ENDMARKER", [6, 0], [6, 9], "ENDMARKER = 0\n"], [54, "=", [6, 10], [6, 11], "ENDMARKER = 0\n"], [2, "0", [6, 12], [6, 13], "ENDMARKER = 0\n"], [4, "\n", [6, 13], [6, 14], "ENDMARKER = 0\n"], [1, "NAME", [7, 0], [7, 4], "NAME = 1\n"], [54, "=", [7, 5], [7, 6], "NAME = 1\n"], [2, "1", [7, 7], [7, 8], "NAME = 1\n"], [4, "\n", [7, 8], [7, 9], "NAME = 1\n"], [1, "NUMBER", [8, 0], [8, 6], "NUMBER = 2\n"], [54, "=", [8, 7], [8, 8], "NUMBER = 2\n"], [2, "2", [8, 9], [8, 10], "NUMBER = 2\n"], [4, "\n", [8, 10], [8, 11], "NUMBER = 2\n"], [1, "STRING", [9, 0], [9, 6], "STRING = 3\n"], [54, "=", [9, 7], [9, 8], "STRING = 3\n"], [2, "3", [9, 9], [9, 10], "STRING = 3\n"], [4, "\n", [9, 10], [9, 11], "STRING = 3\n"], [1, "NEWLINE", [10, 0], [10, 7], "NEWLINE = 4\n"], [54, "=", [10, 8], [10, 9], "NEWLINE = 4\n"], [2, "4", [10, 10], [10, 11], "NEWLINE = 4\n"], [4, "\n", [10, 11], [10, 12], "NEWLINE = 4\n"], [1, "INDENT", [11, 0], [11, 6], "INDENT = 5\n"], [54, "=", [11, 7], [11, 8], "INDENT = 5\n"], [2, "5", [11, 9], [11, 10], "INDENT = 5\n"], [4, "\n", [11, 10], [11, 11], "INDENT = 5\n"], [1, "DEDENT", [12, 0], [12, 6], "DEDENT = 6\n"], [54, "=", [12, 7], [12, 8], "DEDENT = 6\n"], [2, "6", [12, 9], [12, 10], "DEDENT = 6\n"], [4, "\n", [12, 10], [12, 11], "DEDENT = 6\n"], [1, "LPAR", [13, 0], [13, 4], "LPAR = 7\n"], [54, "=", [13, 5], [13, 6], "LPAR = 7\n"], [2, "7", [13, 7], [13, 8], "LPAR = 7\n"], [4, "\n", [13, 8], [13, 9], "LPAR = 7\n"], [1, "RPAR", [14, 0], [14, 4], "RPAR = 8\n"], [54, "=", [14, 5], [14, 6], "RPAR = 8\n"], [2, "8", [14, 7], [14, 8], "RPAR = 8\n"], [4, "\n", [14, 8], [14, 9], "RPAR = 8\n"], [1, "LSQB", [15, 0], [15, 4], "LSQB = 9\n"], [54, "=", [15, 5], [15, 6], "LSQB = 9\n"], [2, "9", [15, 7], [15, 8], "LSQB = 9\n"], [4, "\n", [15, 8], [15, 9], "LSQB = 9\n"], [1, "RSQB", [16, 0], [16, 4], "RSQB = 10\n"], [54, "=", [16, 5], [16, 6], "RSQB = 10\n"], [2, "10", [16, 7], [16, 9], "RSQB = 10\n"], [4, "\n", [16, 9], [16, 10], "RSQB = 10\n"], [1, "COLON", [17, 0], [17, 5], "COLON = 11\n"], [54, "=", [17, 6], [17, 7], "COLON = 11\n"], [2, "11", [17, 8], [17, 10], "COLON = 11\n"], [4, "\n", [17, 10], [17, 11], "COLON = 11\n"], [1, "COMMA", [18, 0], [18, 5], "COMMA = 12\n"], [54, "=", [18, 6], [18, 7], "COMMA = 12\n"], [2, "12", [18, 8], [18, 10], "COMMA = 12\n"], [4, "\n", [18, 10], [18, 11], "COMMA = 12\n"], [1, "SEMI", [19, 0], [19, 4], "SEMI = 13\n"], [54, "=", [19, 5], [19, 6], "SEMI = 13\n"], [2, "13", [19, 7], [19, 9], "SEMI = 13\n"], [4, "\n", [19, 9], [19, 10], "SEMI = 13\n"], [1, "PLUS", [20, 0], [20, 4], "PLUS = 14\n"], [54, "=", [20, 5], [20, 6], "PLUS = 14\n"], [2, "14", [20, 7], [20, 9], "PLUS = 14\n"], [4, "\n", [20, 9], [20, 10], "PLUS = 14\n"], [1, "MINUS", [21, 0], [21, 5], "MINUS = 15\n"], [54, "=", [21, 6], [21, 7], "MINUS = 15\n"], [2, "15", [21, 8], [21, 10], "MINUS = 15\n"], [4, "\n", [21, 10], [21, 11], "MINUS = 15\n"], [1, "STAR", [22, 0], [22, 4], "STAR = 16\n"], [54, "=", [22, 5], [22, 6], "STAR = 16\n"], [2, "16", [22, 7], [22, 9], "STAR = 16\n"], [4, "\n", [22, 9], [22, 10], "STAR = 16\n"], [1, "SLASH", [23, 0], [23, 5], "SLASH = 17\n"], [54, "=", [23, 6], [23, 7], "SLASH = 17\n"], [2, "17", [23, 8], [23, 10], "SLASH = 17\n"], [4, "\n", [23, 10], [23, 11], "SLASH = 17\n"], [1, "VBAR", [24, 0], [24, 4], "VBAR = 18\n"], [54, "=", [24, 5], [24, 6], "VBAR = 18\n"], [2, "18", [24, 7], [24, 9], "VBAR = 18\n"], [4, "\n", [24, 9], [24, 10], "VBAR = 18\n"], [1, "AMPER", [25, 0], [25, 5], "AMPER = 19\n"], [54, "=", [25, 6], [25, 7], "AMPER = 19\n"], [2, "19", [25, 8], [25, 10], "AMPER = 19\n"], [4, "\n", [25, 10], [25, 11], "AMPER = 19\n"], [1, "LESS", [26, 0], [26, 4], "LESS = 20\n"], [54, "=", [26, 5], [26, 6], "LESS = 20\n"], [2, "20", [26, 7], [26, 9], "LESS = 20\n"], [4, "\n", [26, 9], [26, 10], "LESS = 20\n"], [1, "GREATER", [27, 0], [27, 7], "GREATER = 21\n"], [54, "=", [27, 8], [27, 9], "GREATER = 21\n"], [2, "21", [27, 10], [27, 12], "GREATER = 21\n"], [4, "\n", [27, 12], [27, 13], "GREATER = 21\n"], [1, "EQUAL", [28, 0], [28, 5], "EQUAL = 22\n"], [54, "=", [28, 6], [28, 7], "EQUAL = 22\n"], [2, "22", [28, 8], [28, 10], "EQUAL = 22\n"], [4, "\n", [28, 10], [28, 11], "EQUAL = 22\n"], [1, "DOT", [29, 0], [29, 3], "DOT = 23\n"], [54, "=", [29, 4], [29, 5], "DOT = 23\n"], [2, "23", [29, 6], [29, 8], "DOT = 23\n"], [4, "\n", [29, 8], [29, 9], "DOT = 23\n"], [1, "PERCENT", [30, 0], [30, 7], "PERCENT = 24\n"], [54, "=", [30, 8], [30, 9], "PERCENT = 24\n"], [2, "24", [30, 10], [30, 12], "PERCENT = 24\n"], [4, "\n", [30, 12], [30, 13], "PERCENT = 24\n"], [1, "LBRACE", [31, 0], [31, 6], "LBRACE = 25\n"], [54, "=", [31, 7], [31, 8], "LBRACE = 25\n"], [2, "25", [31, 9], [31, 11], "LBRACE = 25\n"], [4, "\n", [31, 11], [31, 12], "LBRACE = 25\n"], [1, "RBRACE", [32, 0], [32, 6], "RBRACE = 26\n"], [54, "=", [32, 7], [32, 8], "RBRACE = 26\n"], [2, "26", [32, 9], [32, 11], "RBRACE = 26\n"], [4, "\n", [32, 11], [32, 12], "RBRACE = 26\n"], [1, "EQEQUAL", [33, 0], [33, 7], "EQEQUAL = 27\n"], [54, "=", [33, 8], [33, 9], "EQEQUAL = 27\n"], [2, "27", [33, 10], [33, 12], "EQEQUAL = 27\n"], [4, "\n", [33, 12], [33, 13], "EQEQUAL = 27\n"], [1, "NOTEQUAL", [34, 0], [34, 8], "NOTEQUAL = 28\n"], [54, "=", [34, 9], [34, 10], "NOTEQUAL = 28\n"], [2, "28", [34, 11], [34, 13], "NOTEQUAL = 28\n"], [4, "\n", [34, 13], [34, 14], "NOTEQUAL = 28\n"], [1, "LESSEQUAL", [35, 0], [35, 9], "LESSEQUAL = 29\n"], [54, "=", [35, 10], [35, 11], "LESSEQUAL = 29\n"], [2, "29", [35, 12], [35, 14], "LESSEQUAL = 29\n"], [4, "\n", [35, 14], [35, 15], "LESSEQUAL = 29\n"], [1, "GREATEREQUAL", [36, 0], [36, 12], "GREATEREQUAL = 30\n"], [54, "=", [36, 13], [36, 14], "GREATEREQUAL = 30\n"], [2, "30", [36, 15], [36, 17], "GREATEREQUAL = 30\n"], [4, "\n", [36, 17], [36, 18], "GREATEREQUAL = 30\n"], [1, "TILDE", [37, 0], [37, 5], "TILDE = 31\n"], [54, "=", [37, 6], [37, 7], "TILDE = 31\n"], [2, "31", [37, 8], [37, 10], "TILDE = 31\n"], [4, "\n", [37, 10], [37, 11], "TILDE = 31\n"], [1, "CIRCUMFLEX", [38, 0], [38, 10], "CIRCUMFLEX = 32\n"], [54, "=", [38, 11], [38, 12], "CIRCUMFLEX = 32\n"], [2, "32", [38, 13], [38, 15], "CIRCUMFLEX = 32\n"], [4, "\n", [38, 15], [38, 16], "CIRCUMFLEX = 32\n"], [1, "LEFTSHIFT", [39, 0], [39, 9], "LEFTSHIFT = 33\n"], [54, "=", [39, 10], [39, 11], "LEFTSHIFT = 33\n"], [2, "33", [39, 12], [39, 14], "LEFTSHIFT = 33\n"], [4, "\n", [39, 14], [39, 15], "LEFTSHIFT = 33\n"], [1, "RIGHTSHIFT", [40, 0], [40, 10], "RIGHTSHIFT = 34\n"], [54, "=", [40, 11], [40, 12], "RIGHTSHIFT = 34\n"], [2, "34", [40, 13], [40, 15], "RIGHTSHIFT = 34\n"], [4, "\n", [40, 15], [40, 16], "RIGHTSHIFT = 34\n"], [1, "DOUBLESTAR", [41, 0], [41, 10], "DOUBLESTAR = 35\n"], [54, "=", [41, 11], [41, 12], "DOUBLESTAR = 35\n"], [2, "35", [41, 13], [41, 15], "DOUBLESTAR = 35\n"], [4, "\n", [41, 15], [41, 16], "DOUBLESTAR = 35\n"], [1, "PLUSEQUAL", [42, 0], [42, 9], "PLUSEQUAL = 36\n"], [54, "=", [42, 10], [42, 11], "PLUSEQUAL = 36\n"], [2, "36", [42, 12], [42, 14], "PLUSEQUAL = 36\n"], [4, "\n", [42, 14], [42, 15], "PLUSEQUAL = 36\n"], [1, "MINEQUAL", [43, 0], [43, 8], "MINEQUAL = 37\n"], [54, "=", [43, 9], [43, 10], "MINEQUAL = 37\n"], [2, "37", [43, 11], [43, 13], "MINEQUAL = 37\n"], [4, "\n", [43, 13], [43, 14], "MINEQUAL = 37\n"], [1, "STAREQUAL", [44, 0], [44, 9], "STAREQUAL = 38\n"], [54, "=", [44, 10], [44, 11], "STAREQUAL = 38\n"], [2, "38", [44, 12], [44, 14], "STAREQUAL = 38\n"], [4, "\n", [44, 14], [44, 15], "STAREQUAL = 38\n"], [1, "SLASHEQUAL", [45, 0], [45, 10], "SLASHEQUAL = 39\n"], [54, "=", [45, 11], [45, 12], "SLASHEQUAL = 39\n"], [2, "39", [45, 13], [45, 15], "SLASHEQUAL = 39\n"], [4, "\n", [45, 15], [45, 16], "SLASHEQUAL = 39\n"], [1, "PERCENTEQUAL", [46, 0], [46, 12], "PERCENTEQUAL = 40\n"], [54, "=", [46, 13], [46, 14], "PERCENTEQUAL = 40\n"], [2, "40", [46, 15], [46, 17], "PERCENTEQUAL = 40\n"], [4, "\n", [46, 17], [46, 18], "PERCENTEQUAL = 40\n"], [1, "AMPEREQUAL", [47, 0], [47, 10], "AMPEREQUAL = 41\n"], [54, "=", [47, 11], [47, 12], "AMPEREQUAL = 41\n"], [2, "41", [47, 13], [47, 15], "AMPEREQUAL = 41\n"], [4, "\n", [47, 15], [47, 16], "AMPEREQUAL = 41\n"], [1, "VBAREQUAL", [48, 0], [48, 9], "VBAREQUAL = 42\n"], [54, "=", [48, 10], [48, 11], "VBAREQUAL = 42\n"], [2, "42", [48, 12], [48, 14], "VBAREQUAL = 42\n"], [4, "\n", [48, 14], [48, 15], "VBAREQUAL = 42\n"], [1, "CIRCUMFLEXEQUAL", [49, 0], [49, 15], "CIRCUMFLEXEQUAL = 43\n"], [54, "=", [49, 16], [49, 17], "CIRCUMFLEXEQUAL = 43\n"], [2, "43", [49, 18], [49, 20], "CIRCUMFLEXEQUAL = 43\n"], [4, "\n", [49, 20], [49, 21], "CIRCUMFLEXEQUAL = 43\n"], [1, "LEFTSHIFTEQUAL", [50, 0], [50, 14], "LEFTSHIFTEQUAL = 44\n"], [54, "=", [50, 15], [50, 16], "LEFTSHIFTEQUAL = 44\n"], [2, "44", [50, 17], [50, 19], "LEFTSHIFTEQUAL = 44\n"], [4, "\n", [50, 19], [50, 20], "LEFTSHIFTEQUAL = 44\n"], [1, "RIGHTSHIFTEQUAL", [51, 0], [51, 15], "RIGHTSHIFTEQUAL = 45\n"], [54, "=", [51, 16], [51, 17], "RIGHTSHIFTEQUAL = 45\n"], [2, "45", [51, 18], [51, 20], "RIGHTSHIFTEQUAL = 45\n"], [4, "\n", [51, 20], [51, 21], "RIGHTSHIFTEQUAL = 45\n"], [1, "DOUBLESTAREQUAL", [52, 0], [52, 15], "DOUBLESTAREQUAL = 46\n"], [54, "=", [52, 16], [52, 17], "DOUBLESTAREQUAL = 46\n"], [2, "46", [52, 18], [52, 20], "DOUBLESTAREQUAL = 46\n"], [4, "\n", [52, 20], [52, 21], "DOUBLESTAREQUAL = 46\n"], [1, "DOUBLESLASH", [53, 0], [53, 11], "DOUBLESLASH = 47\n"], [54, "=", [53, 12], [53, 13], "DOUBLESLASH = 47\n"], [2, "47", [53, 14], [53, 16], "DOUBLESLASH = 47\n"], [4, "\n", [53, 16], [53, 17], "DOUBLESLASH = 47\n"], [1, "DOUBLESLASHEQUAL", [54, 0], [54, 16], "DOUBLESLASHEQUAL = 48\n"], [54, "=", [54, 17], [54, 18], "DOUBLESLASHEQUAL = 48\n"], [2, "48", [54, 19], [54, 21], "DOUBLESLASHEQUAL = 48\n"], [4, "\n", [54, 21], [54, 22], "DOUBLESLASHEQUAL = 48\n"], [1, "AT", [55, 0], [55, 2], "AT = 49\n"], [54, "=", [55, 3], [55, 4], "AT = 49\n"], [2, "49", [55, 5], [55, 7], "AT = 49\n"], [4, "\n", [55, 7], [55, 8], "AT = 49\n"], [1, "ATEQUAL", [56, 0], [56, 7], "ATEQUAL = 50\n"], [54, "=", [56, 8], [56, 9], "ATEQUAL = 50\n"], [2, "50", [56, 10], [56, 12], "ATEQUAL = 50\n"], [4, "\n", [56, 12], [56, 13], "ATEQUAL = 50\n"], [1, "RARROW", [57, 0], [57, 6], "RARROW = 51\n"], [54, "=", [57, 7], [57, 8], "RARROW = 51\n"], [2, "51", [57, 9], [57, 11], "RARROW = 51\n"], [4, "\n", [57, 11], [57, 12], "RARROW = 51\n"], [1, "ELLIPSIS", [58, 0], [58, 8], "ELLIPSIS = 52\n"], [54, "=", [58, 9], [58, 10], "ELLIPSIS = 52\n"], [2, "52", [58, 11], [58, 13], "ELLIPSIS = 52\n"], [4, "\n", [58, 13], [58, 14], "ELLIPSIS = 52\n"], [1, "COLONEQUAL", [59, 0], [59, 10], "COLONEQUAL = 53\n"], [54, "=", [59, 11], [59, 12], "COLONEQUAL = 53\n"], [2, "53", [59, 13], [59, 15], "COLONEQUAL = 53\n"], [4, "\n", [59, 15], [59, 16], "COLONEQUAL = 53\n"], [1, "OP", [60, 0], [60, 2], "OP = 54\n"], [54, "=", [60, 3], [60, 4], "OP = 54\n"], [2, "54", [60, 5], [60, 7], "OP = 54\n"], [4, "\n", [60, 7], [60, 8], "OP = 54\n"], [1, "AWAIT", [61, 0], [61, 5], "AWAIT = 55\n"], [54, "=", [61, 6], [61, 7], "AWAIT = 55\n"], [2, "55", [61, 8], [61, 10], "AWAIT = 55\n"], [4, "\n", [61, 10], [61, 11], "AWAIT = 55\n"], [1, "ASYNC", [62, 0], [62, 5], "ASYNC = 56\n"], [54, "=", [62, 6], [62, 7], "ASYNC = 56\n"], [2, "56", [62, 8], [62, 10], "ASYNC = 56\n"], [4, "\n", [62, 10], [62, 11], "ASYNC = 56\n"], [1, "TYPE_IGNORE", [63, 0], [63, 11], "TYPE_IGNORE = 57\n"], [54, "=", [63, 12], [63, 13], "TYPE_IGNORE = 57\n"], [2, "57", [63, 14], [63, 16], "TYPE_IGNORE = 57\n"], [4, "\n", [63, 16], [63, 17], "TYPE_IGNORE = 57\n"], [1, "TYPE_COMMENT", [64, 0], [64, 12], "TYPE_COMMENT = 58\n"], [54, "=", [64, 13], [64, 14], "TYPE_COMMENT = 58\n"], [2, "58", [64, 15], [64, 17], "TYPE_COMMENT = 58\n"], [4, "\n", [64, 17], [64, 18], "TYPE_COMMENT = 58\n"], [60, "# These aren't used by the C tokenizer but are needed for tokenize.py", [65, 0], [65, 69], "# These aren't used by the C tokenizer but are needed for tokenize.py\n"], [61, "\n", [65, 69], [65, 70], "# These aren't used by the C tokenizer but are needed for tokenize.py\n"], [1, "ERRORTOKEN", [66, 0], [66, 10], "ERRORTOKEN = 59\n"], [54, "=", [66, 11], [66, 12], "ERRORTOKEN = 59\n"], [2, "59", [66, 13], [66, 15], "ERRORTOKEN = 59\n"], [4, "\n", [66, 15], [66, 16], "ERRORTOKEN = 59\n"], [1, "COMMENT", [67, 0], [67, 7], "COMMENT = 60\n"], [54, "=", [67, 8], [67, 9], "COMMENT = 60\n"], [2, "60", [67, 10], [67, 12], "COMMENT = 60\n"], [4, "\n", [67, 12], [67, 13], "COMMENT = 60\n"], [1, "NL", [68, 0], [68, 2], "NL = 61\n"], [54, "=", [68, 3], [68, 4], "NL = 61\n"], [2, "61", [68, 5], [68, 7], "NL = 61\n"], [4, "\n", [68, 7], [68, 8], "NL = 61\n"], [1, "ENCODING", [69, 0], [69, 8], "ENCODING = 62\n"], [54, "=", [69, 9], [69, 10], "ENCODING = 62\n"], [2, "62", [69, 11], [69, 13], "ENCODING = 62\n"], [4, "\n", [69, 13], [69, 14], "ENCODING = 62\n"], [1, "N_TOKENS", [70, 0], [70, 8], "N_TOKENS = 63\n"], [54, "=", [70, 9], [70, 10], "N_TOKENS = 63\n"], [2, "63", [70, 11], [70, 13], "N_TOKENS = 63\n"], [4, "\n", [70, 13], [70, 14], "N_TOKENS = 63\n"], [60, "# Special definitions for cooperation with parser", [71, 0], [71, 49], "# Special definitions for cooperation with parser\n"], [61, "\n", [71, 49], [71, 50], "# Special definitions for cooperation with parser\n"], [1, "NT_OFFSET", [72, 0], [72, 9], "NT_OFFSET = 256\n"], [54, "=", [72, 10], [72, 11], "NT_OFFSET = 256\n"], [2, "256", [72, 12], [72, 15], "NT_OFFSET = 256\n"], [4, "\n", [72, 15], [72, 16], "NT_OFFSET = 256\n"], [61, "\n", [73, 0], [73, 1], "\n"], [1, "tok_name", [74, 0], [74, 8], "tok_name = {value: name\n"], [54, "=", [74, 9], [74, 10], "tok_name = {value: name\n"], [54, "{", [74, 11], [74, 12], "tok_name = {value: name\n"], [1, "value", [74, 12], [74, 17], "tok_name = {value: name\n"], [54, ":", [74, 17], [74, 18], "tok_name = {value: name\n"], [1, "name", [74, 19], [74, 23], "tok_name = {value: name\n"], [61, "\n", [74, 23], [74, 24], "tok_name = {value: name\n"], [1, "for", [75, 12], [75, 15], "            for name, value in globals().items()\n"], [1, "name", [75, 16], [75, 20], "            for name, value in globals().items()\n"], [54, ",", [75, 20], [75, 21], "            for name, value in globals().items()\n"], [1, "value", [75, 22], [75, 27], "            for name, value in globals().items()\n"], [1, "in", [75, 28], [75, 30], "            for name, value in globals().items()\n"], [1, "globals", [75, 31], [75, 38], "            for name, value in globals().items()\n"], [54, "(", [75, 38], [75, 39], "            for name, value in globals().items()\n"], [54, ")", [75, 39], [75, 40], "            for name, value in globals().items()\n"], [54, ".", [75, 40], [75, 41], "            for name, value in globals().items()\n"], [1, "items", [75, 41], [75, 46], "            for name, value in globals().items()\n"], [54, "(", [75, 46], [75, 47], "            for name, value in globals().items()\n"], [54, ")", [75, 47], [75, 48], "            for name, value in globals().items()\n"], [61, "\n", [75, 48], [75, 49], "            for name, value in globals().items()\n"], [1, "if", [76, 12], [76, 14], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "isinstance", [76, 15], [76, 25], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, "(", [76, 25], [76, 26], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "value", [76, 26], [76, 31], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, ",", [76, 31], [76, 32], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "int", [76, 33], [76, 36], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, ")", [76, 36], [76, 37], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "and", [76, 38], [76, 41], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "not", [76, 42], [76, 45], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "name", [76, 46], [76, 50], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, ".", [76, 50], [76, 51], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "startswith", [76, 51], [76, 61], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, "(", [76, 61], [76, 62], "            if isinstance(value, int) and not name.startswith('_')}\n"], [3, "'_'", [76, 62], [76, 65], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, ")", [76, 65], [76, 66], "            if isinstance(value, int) and not name.startswith('_')}\n"], [54, "}", [76, 66], [76, 67], "            if isinstance(value, int) and not name.startswith('_')}\n"], [4, "\n", [76, 67], [76, 68], "            if isinstance(value, int) and not name.startswith('_')}\n"], [1, "__all__", [77, 0], [77, 7], "__all__.extend(tok_name.values())\n"], [54, ".", [77, 7], [77, 8], "__all__.extend(tok_name.values())\n"], [1, "extend", [77, 8], [77, 14], "__all__.extend(tok_name.values())\n"], [54, "(", [77, 14], [77, 15], "__all__.extend(tok_name.values())\n"], [1, "tok_name", [77, 15], [77, 23], "__all__.extend(tok_name.values())\n"], [54, ".", [77, 23], [77, 24], "__all__.extend(tok_name.values())\n"], [1, "values", [77, 24], [77, 30], "__all__.extend(tok_name.values())\n"], [54, "(", [77, 30], [77, 31], "__all__.extend(tok_name.values())\n"], [54, ")", [77, 31], [77, 32], "__all__.extend(tok_name.values())\n"], [54, ")", [77, 32], [77, 33], "__all__.extend(tok_name.values())\n"], [4, "\n", [77, 33], [77, 34], "__all__.extend(tok_name.values())\n"], [61, "\n", [78, 0], [78, 1], "\n"], [1, "EXACT_TOKEN_TYPES", [79, 0], [79, 17], "EXACT_TOKEN_TYPES = {\n"], [54, "=", [79, 18], [79, 19], "EXACT_TOKEN_TYPES = {\n"], [54, "{", [79, 20], [79, 21], "EXACT_TOKEN_TYPES = {\n"], [61, "\n", [79, 21], [79, 22], "EXACT_TOKEN_TYPES = {\n"], [3, "'!='", [80, 4], [80, 8], "    '!=': NOTEQUAL,\n"], [54, ":", [80, 8], [80, 9], "    '!=': NOTEQUAL,\n"], [1, "NOTEQUAL", [80, 10], [80, 18], "    '!=': NOTEQUAL,\n"], [54, ",", [80, 18], [80, 19], "    '!=': NOTEQUAL,\n"], [61, "\n", [80, 19], [80, 20], "    '!=': NOTEQUAL,\n"], [3, "'%'", [81, 4], [81, 7], "    '%': PERCENT,\n"], [54, ":", [81, 7], [81, 8], "    '%': PERCENT,\n"], [1, "PERCENT", [81, 9], [81, 16], "    '%': PERCENT,\n"], [54, ",", [81, 16], [81, 17], "    '%': PERCENT,\n"], [61, "\n", [81, 17], [81, 18], "    '%': PERCENT,\n"], [3, "'%='", [82, 4], [82, 8], "    '%=': PERCENTEQUAL,\n"], [54, ":", [82, 8], [82, 9], "    '%=': PERCENTEQUAL,\n"], [1, "PERCENTEQUAL", [82, 10], [82, 22], "    '%=': PERCENTEQUAL,\n"], [54, ",", [82, 22], [82, 23], "    '%=': PERCENTEQUAL,\n"], [61, "\n", [82, 23], [82, 24], "    '%=': PERCENTEQUAL,\n"], [3, "'&'", [83, 4], [83, 7], "    '&': AMPER,\n"], [54, ":", [83, 7], [83, 8], "    '&': AMPER,\n"], [1, "AMPER", [83, 9], [83, 14], "    '&': AMPER,\n"], [54, ",", [83, 14], [83, 15], "    '&': AMPER,\n"], [61, "\n", [83, 15], [83, 16], "    '&': AMPER,\n"], [3, "'&='", [84, 4], [84, 8], "    '&=': AMPEREQUAL,\n"], [54, ":", [84, 8], [84, 9], "    '&=': AMPEREQUAL,\n"], [1, "AMPEREQUAL", [84, 10], [84, 20], "    '&=': AMPEREQUAL,\n"], [54, ",", [84, 20], [84, 21], "    '&=': AMPEREQUAL,\n"], [61, "\n", [84, 21], [84, 22], "    '&=': AMPEREQUAL,\n"], [3, "'('", [85, 4], [85, 7], "    '(': LPAR,\n"], [54, ":", [85, 7], [85, 8], "    '(': LPAR,\n"], [1, "LPAR", [85, 9], [85, 13], "    '(': LPAR,\n"], [54, ",", [85, 13], [85, 14], "    '(': LPAR,\n"], [61, "\n", [85, 14], [85, 15], "    '(': LPAR,\n"], [3, "')'", [86, 4], [86, 7], "    ')': RPAR,\n"], [54, ":", [86, 7], [86, 8], "    ')': RPAR,\n"], [1, "RPAR", [86, 9], [86, 13], "    ')': RPAR,\n"], [54, ",", [86, 13], [86, 14], "    ')': RPAR,\n"], [61, "\n", [86, 14], [86, 15], "    ')': RPAR,\n"], [3, "'*'", [87, 4], [87, 7], "    '*': STAR,\n"], [54, ":", [87, 7], [87, 8], "    '*': STAR,\n"], [1, "STAR", [87, 9], [87, 13], "    '*': STAR,\n"], [54, ",", [87, 13], [87, 14], "    '*': STAR,\n"], [61, "\n", [87, 14], [87, 15], "    '*': STAR,\n"], [3, "'**'", [88, 4], [88, 8], "    '**': DOUBLESTAR,\n"], [54, ":", [88, 8], [88, 9], "    '**': DOUBLESTAR,\n"], [1, "DOUBLESTAR", [88, 10], [88, 20], "    '**': DOUBLESTAR,\n"], [54, ",", [88, 20], [88, 21], "    '**': DOUBLESTAR,\n"], [61, "\n", [88, 21], [88, 22], "    '**': DOUBLESTAR,\n"], [3, "'**='", [89, 4], [89, 9], "    '**=': DOUBLESTAREQUAL,\n"], [54, ":", [89, 9], [89, 10], "    '**=': DOUBLESTAREQUAL,\n"], [1, "DOUBLESTAREQUAL", [89, 11], [89, 26], "    '**=': DOUBLESTAREQUAL,\n"], [54, ",", [89, 26], [89, 27], "    '**=': DOUBLESTAREQUAL,\n"], [61, "\n", [89, 27], [89, 28], "    '**=': DOUBLESTAREQUAL,\n"], [3, "'*='", [90, 4], [90, 8], "    '*=': STAREQUAL,\n"], [54, ":", [90, 8], [90, 9], "    '*=': STAREQUAL,\n"], [1, "STAREQUAL", [90, 10], [90, 19], "    '*=': STAREQUAL,\n"], [54, ",", [90, 19], [90, 20], "    '*=': STAREQUAL,\n"], [61, "\n", [90, 20], [90, 21], "    '*=': STAREQUAL,\n"], [3, "'+'", [91, 4], [91, 7], "    '+': PLUS,\n"], [54, ":", [91, 7], [91, 8], "    '+': PLUS,\n"], [1, "PLUS", [91, 9], [91, 13], "    '+': PLUS,\n"], [54, ",", [91, 13], [91, 14], "    '+': PLUS,\n"], [61, "\n", [91, 14], [91, 15], "    '+': PLUS,\n"], [3, "'+='", [92, 4], [92, 8], "    '+=': PLUSEQUAL,\n"], [54, ":", [92, 8], [92, 9], "    '+=': PLUSEQUAL,\n"], [1, "PLUSEQUAL", [92, 10], [92, 19], "    '+=': PLUSEQUAL,\n"], [54, ",", [92, 19], [92, 20], "    '+=': PLUSEQUAL,\n"], [61, "\n", [92, 20], [92, 21], "    '+=': PLUSEQUAL,\n"], [3, "','", [93, 4], [93, 7], "    ',': COMMA,\n"], [54, ":", [93, 7], [93, 8], "    ',': COMMA,\n"], [1, "COMMA", [93, 9], [93, 14], "    ',': COMMA,\n"], [54, ",", [93, 14], [93, 15], "    ',': COMMA,\n"], [61, "\n", [93, 15], [93, 16], "    ',': COMMA,\n"], [3, "'-'", [94, 4], [94, 7], "    '-': MINUS,\n"], [54, ":", [94, 7], [94, 8], "    '-': MINUS,\n"], [1, "MINUS", [94, 9], [94, 14], "    '-': MINUS,\n"], [54, ",", [94, 14], [94, 15], "    '-': MINUS,\n"], [61, "\n", [94, 15], [94, 16], "    '-': MINUS,\n"], [3, "'-='", [95, 4], [95, 8], "    '-=': MINEQUAL,\n"], [54, ":", [95, 8], [95, 9], "    '-=': MINEQUAL,\n"], [1, "MINEQUAL", [95, 10], [95, 18], "    '-=': MINEQUAL,\n"], [54, ",", [95, 18], [95, 19], "    '-=': MINEQUAL,\n"], [61, "\n", [95, 19], [95, 20], "    '-=': MINEQUAL,\n"], [3, "'->'", [96, 4], [96, 8], "    '->': RARROW,\n"], [54, ":", [96, 8], [96, 9], "    '->': RARROW,\n"], [1, "RARROW", [96, 10], [96, 16], "    '->': RARROW,\n"], [54, ",", [96, 16], [96, 17], "    '->': RARROW,\n"], [61, "\n", [96, 17], [96, 18], "    '->': RARROW,\n"], [3, "'.'", [97, 4], [97, 7], "    '.': DOT,\n"], [54, ":", [97, 7], [97, 8], "    '.': DOT,\n"], [1, "DOT", [97, 9], [97, 12], "    '.': DOT,\n"], [54, ",", [97, 12], [97, 13], "    '.': DOT,\n"], [61, "\n", [97, 13], [97, 14], "    '.': DOT,\n"], [3, "'...'", [98, 4], [98, 9], "    '...': ELLIPSIS,\n"], [54, ":", [98, 9], [98, 10], "    '...': ELLIPSIS,\n"], [1, "ELLIPSIS", [98, 11], [98, 19], "    '...': ELLIPSIS,\n"], [54, ",", [98, 19], [98, 20], "    '...': ELLIPSIS,\n"], [61, "\n", [98, 20], [98, 21], "    '...': ELLIPSIS,\n"], [3, "'/'", [99, 4], [99, 7], "    '/': SLASH,\n"], [54, ":", [99, 7], [99, 8], "    '/': SLASH,\n"], [1, "SLASH", [99, 9], [99, 14], "    '/': SLASH,\n"], [54, ",", [99, 14], [99, 15], "    '/': SLASH,\n"], [61, "\n", [99, 15], [99, 16], "    '/': SLASH,\n"], [3, "'//'", [100, 4], [100, 8], "    '//': DOUBLESLASH,\n"], [54, ":", [100, 8], [100, 9], "    '//': DOUBLESLASH,\n"], [1, "DOUBLESLASH", [100, 10], [100, 21], "    '//': DOUBLESLASH,\n"], [54, ",", [100, 21], [100, 22], "    '//': DOUBLESLASH,\n"], [61, "\n", [100, 22], [100, 23], "    '//': DOUBLESLASH,\n"], [3, "'//='", [101, 4], [101, 9], "    '//=': DOUBLESLASHEQUAL,\n"], [54, ":", [101, 9], [101, 10], "    '//=': DOUBLESLASHEQUAL,\n"], [1, "DOUBLESLASHEQUAL", [101, 11], [101, 27], "    '//=': DOUBLESLASHEQUAL,\n"], [54, ",", [101, 27], [101, 28], "    '//=': DOUBLESLASHEQUAL,\n"], [61, "\n", [101, 28], [101, 29], "    '//=': DOUBLESLASHEQUAL,\n"], [3, "'/='", [102, 4], [102, 8], "    '/=': SLASHEQUAL,\n"], [54, ":", [102, 8], [102, 9], "    '/=': SLASHEQUAL,\n"], [1, "SLASHEQUAL", [102, 10], [102, 20], "    '/=': SLASHEQUAL,\n"], [54, ",", [102, 20], [102, 21], "    '/=': SLASHEQUAL,\n"], [61, "\n", [102, 21], [102, 22], "    '/=': SLASHEQUAL,\n"], [3, "':'", [103, 4], [103, 7], "    ':': COLON,\n"], [54, ":", [103, 7], [103, 8], "    ':': COLON,\n"], [1, "COLON", [103, 9], [103, 14], "    ':': COLON,\n"], [54, ",", [103, 14], [103, 15], "    ':': COLON,\n"], [61, "\n", [103, 15], [103, 16], "    ':': COLON,\n"], [3, "':='", [104, 4], [104, 8], "    ':=': COLONEQUAL,\n"], [54, ":", [104, 8], [104, 9], "    ':=': COLONEQUAL,\n"], [1, "COLONEQUAL", [104, 10], [104, 20], "    ':=': COLONEQUAL,\n"], [54, ",", [104, 20], [104, 21], "    ':=': COLONEQUAL,\n"], [61, "\n", [104, 21], [104, 22], "    ':=': COLONEQUAL,\n"], [3, "';'", [105, 4], [105, 7], "    ';': SEMI,\n"], [54, ":", [105, 7], [105, 8], "    ';': SEMI,\n"], [1, "SEMI", [105, 9], [105, 13], "    ';': SEMI,\n"], [54, ",", [105, 13], [105, 14], "    ';': SEMI,\n"], [61, "\n", [105, 14], [105, 15], "    ';': SEMI,\n"], [3, "'<'", [106, 4], [106, 7], "    '<': LESS,\n"], [54, ":", [106, 7], [106, 8], "    '<': LESS,\n"], [1, "LESS", [106, 9], [106, 13], "    '<': LESS,\n"], [54, ",", [106, 13], [106, 14], "    '<': LESS,\n"], [61, "\n", [106, 14], [106, 15], "    '<': LESS,\n"], [3, "'<<'", [107, 4], [107, 8], "    '<<': LEFTSHIFT,\n"], [54, ":", [107, 8], [107, 9], "    '<<': LEFTSHIFT,\n"], [1, "LEFTSHIFT", [107, 10], [107, 19], "    '<<': LEFTSHIFT,\n"], [54, ",", [107, 19], [107, 20], "    '<<': LEFTSHIFT,\n"], [61, "\n", [107, 20], [107, 21], "    '<<': LEFTSHIFT,\n"], [3, "'<<='", [108, 4], [108, 9], "    '<<=': LEFTSHIFTEQUAL,\n"], [54, ":", [108, 9], [108, 10], "    '<<=': LEFTSHIFTEQUAL,\n"], [1, "LEFTSHIFTEQUAL", [108, 11], [108, 25], "    '<<=': LEFTSHIFTEQUAL,\n"], [54, ",", [108, 25], [108, 26], "    '<<=': LEFTSHIFTEQUAL,\n"], [61, "\n", [108, 26], [108, 27], "    '<<=': LEFTSHIFTEQUAL,\n"], [3, "'<='", [109, 4], [109, 8], "    '<=': LESSEQUAL,\n"], [54, ":", [109, 8], [109, 9], "    '<=': LESSEQUAL,\n"], [1, "LESSEQUAL", [109, 10], [109, 19], "    '<=': LESSEQUAL,\n"], [54, ",", [109, 19], [109, 20], "    '<=': LESSEQUAL,\n"], [61, "\n", [109, 20], [109, 21], "    '<=': LESSEQUAL,\n"], [3, "'='", [110, 4], [110, 7], "    '=': EQUAL,\n"], [54, ":", [110, 7], [110, 8], "    '=': EQUAL,\n"], [1, "EQUAL", [110, 9], [110, 14], "    '=': EQUAL,\n"], [54, ",", [110, 14], [110, 15], "    '=': EQUAL,\n"], [61, "\n", [110, 15], [110, 16], "    '=': EQUAL,\n"], [3, "'=='", [111, 4], [111, 8], "    '==': EQEQUAL,\n"], [54, ":", [111, 8], [111, 9], "    '==': EQEQUAL,\n"], [1, "EQEQUAL", [111, 10], [111, 17], "    '==': EQEQUAL,\n"], [54, ",", [111, 17], [111, 18], "    '==': EQEQUAL,\n"], [61, "\n", [111, 18], [111, 19], "    '==': EQEQUAL,\n"], [3, "'>'", [112, 4], [112, 7], "    '>': GREATER,\n"], [54, ":", [112, 7], [112, 8], "    '>': GREATER,\n"], [1, "GREATER", [112, 9], [112, 16], "    '>': GREATER,\n"], [54, ",", [112, 16], [112, 17], "    '>': GREATER,\n"], [61, "\n", [112, 17], [112, 18], "    '>': GREATER,\n"], [3, "'>='", [113, 4], [113, 8], "    '>=': GREATEREQUAL,\n"], [54, ":", [113, 8], [113, 9], "    '>=': GREATEREQUAL,\n"], [1, "GREATEREQUAL", [113, 10], [113, 22], "    '>=': GREATEREQUAL,\n"], [54, ",", [113, 22], [113, 23], "    '>=': GREATEREQUAL,\n"], [61, "\n", [113, 23], [113, 24], "    '>=': GREATEREQUAL,\n"], [3, "'>>'", [114, 4], [114, 8], "    '>>': RIGHTSHIFT,\n"], [54, ":", [114, 8], [114, 9], "    '>>': RIGHTSHIFT,\n"], [1, "RIGHTSHIFT", [114, 10], [114, 20], "    '>>': RIGHTSHIFT,\n"], [54, ",", [114, 20], [114, 21], "    '>>': RIGHTSHIFT,\n"], [61, "\n", [114, 21], [114, 22], "    '>>': RIGHTSHIFT,\n"], [3, "'>>='", [115, 4], [115, 9], "    '>>=': RIGHTSHIFTEQUAL,\n"], [54, ":", [115, 9], [115, 10], "    '>>=': RIGHTSHIFTEQUAL,\n"], [1, "RIGHTSHIFTEQUAL", [115, 11], [115, 26], "    '>>=': RIGHTSHIFTEQUAL,\n"], [54, ",", [115, 26], [115, 27], "    '>>=': RIGHTSHIFTEQUAL,\n"], [61, "\n", [115, 27], [115, 28], "    '>>=': RIGHTSHIFTEQUAL,\n"], [3, "'@'", [116, 4], [116, 7], "    '@': AT,\n"], [54, ":", [116, 7], [116, 8], "    '@': AT,\n"], [1, "AT", [116, 9], [116, 11], "    '@': AT,\n"], [54, ",", [116, 11], [116, 12], "    '@': AT,\n"], [61, "\n", [116, 12], [116, 13], "    '@': AT,\n"], [3, "'@='", [117, 4], [117, 8], "    '@=': ATEQUAL,\n"], [54, ":", [117, 8], [117, 9], "    '@=': ATEQUAL,\n"], [1, "ATEQUAL", [117, 10], [117, 17], "    '@=': ATEQUAL,\n"], [54, ",", [117, 17], [117, 18], "    '@=': ATEQUAL,\n"], [61, "\n", [117, 18], [117, 19], "    '@=': ATEQUAL,\n"], [3, "'['", [118, 4], [118, 7], "    '[': LSQB,\n"], [54, ":", [118, 7], [118, 8], "    '[': LSQB,\n"], [1, "LSQB", [118, 9], [118, 13], "    '[': LSQB,\n"], [54, ",", [118, 13], [118, 14], "    '[': LSQB,\n"], [61, "\n", [118, 14], [118, 15], "    '[': LSQB,\n"], [3, "']'", [119, 4], [119, 7], "    ']': RSQB,\n"], [54, ":", [119, 7], [119, 8], "    ']': RSQB,\n"], [1, "RSQB", [119, 9], [119, 13], "    ']': RSQB,\n"], [54, ",", [119, 13], [119, 14], "    ']': RSQB,\n"], [61, "\n", [119, 14], [119, 15], "    ']': RSQB,\n"], [3, "'^'", [120, 4], [120, 7], "    '^': CIRCUMFLEX,\n"], [54, ":", [120, 7], [120, 8], "    '^': CIRCUMFLEX,\n"], [1, "CIRCUMFLEX", [120, 9], [120, 19], "    '^': CIRCUMFLEX,\n"], [54, ",", [120, 19], [120, 20], "    '^': CIRCUMFLEX,\n"], [61, "\n", [120, 20], [120, 21], "    '^': CIRCUMFLEX,\n"], [3, "'^='", [121, 4], [121, 8], "    '^=': CIRCUMFLEXEQUAL,\n"], [54, ":", [121, 8], [121, 9], "    '^=': CIRCUMFLEXEQUAL,\n"], [1, "CIRCUMFLEXEQUAL", [121, 10], [121, 25], "    '^=': CIRCUMFLEXEQUAL,\n"], [54, ",", [121, 25], [121, 26], "    '^=': CIRCUMFLEXEQUAL,\n"], [61, "\n", [121, 26], [121, 27], "    '^=': CIRCUMFLEXEQUAL,\n"], [3, "'{'", [122, 4], [122, 7], "    '{': LBRACE,\n"], [54, ":", [122, 7], [122, 8], "    '{': LBRACE,\n"], [1, "LBRACE", [122, 9], [122, 15], "    '{': LBRACE,\n"], [54, ",", [122, 15], [122, 16], "    '{': LBRACE,\n"], [61, "\n", [122, 16], [122, 17], "    '{': LBRACE,\n"], [3, "'|'", [123, 4], [123, 7], "    '|': VBAR,\n"], [54, ":", [123, 7], [123, 8], "    '|': VBAR,\n"], [1, "VBAR", [123, 9], [123, 13], "    '|': VBAR,\n"], [54, ",", [123, 13], [123, 14], "    '|': VBAR,\n"], [61, "\n", [123, 14], [123, 15], "    '|': VBAR,\n"], [3, "'|='", [124, 4], [124, 8], "    '|=': VBAREQUAL,\n"], [54, ":", [124, 8], [124, 9], "    '|=': VBAREQUAL,\n"], [1, "VBAREQUAL", [124, 10], [124, 19], "    '|=': VBAREQUAL,\n"], [54, ",", [124, 19], [124, 20], "    '|=': VBAREQUAL,\n"], [61, "\n", [124, 20], [124, 21], "    '|=': VBAREQUAL,\n"], [3, "'}'", [125, 4], [125, 7], "    '}': RBRACE,\n"], [54, ":", [125, 7], [125, 8], "    '}': RBRACE,\n"], [1, "RBRACE", [125, 9], [125, 15], "    '}': RBRACE,\n"], [54, ",", [125, 15], [125, 16], "    '}': RBRACE,\n"], [61, "\n", [125, 16], [125, 17], "    '}': RBRACE,\n"], [3, "'~'", [126, 4], [126, 7], "    '~': TILDE,\n"], [54, ":", [126, 7], [126, 8], "    '~': TILDE,\n"], [1, "TILDE", [126, 9], [126, 14], "    '~': TILDE,\n"], [54, ",", [126, 14], [126, 15], "    '~': TILDE,\n"], [61, "\n", [126, 15], [126, 16], "    '~': TILDE,\n"], [54, "}", [127, 0], [127, 1], "}\n"], [4, "\n", [127, 1], [127, 2], "}\n"], [61, "\n", [128, 0], [128, 1], "\n"], [1, "def", [129, 0], [129, 3], "def ISTERMINAL(x):\n"], [1, "ISTERMINAL", [129, 4], [129, 14], "def ISTERMINAL(x):\n"], [54, "(", [129, 14], [129, 15], "def ISTERMINAL(x):\n"], [1, "x", [129, 15], [129, 16], "def ISTERMINAL(x):\n"], [54, ")", [129, 16], [129, 17], "def ISTERMINAL(x):\n"], [54, ":", [129, 17], [129, 18], "def ISTERMINAL(x):\n"], [4, "\n", [129, 18], [129, 19], "def ISTERMINAL(x):\n"], [5, "    ", [130, 0], [130, 4], "    return x < NT_OFFSET\n"], [1, "return", [130, 4], [130, 10], "    return x < NT_OFFSET\n"], [1, "x", [130, 11], [130, 12], "    return x < NT_OFFSET\n"], [54, "<", [130, 13], [130, 14], "    return x < NT_OFFSET\n"], [1, "NT_OFFSET", [130, 15], [130, 24], "    return x < NT_OFFSET\n"], [4, "\n", [130, 24], [130, 25], "    return x < NT_OFFSET\n"], [61, "\n", [131, 0], [131, 1], "\n"], [6, "", [132, 0], [132, 0], "def ISNONTERMINAL(x):\n"], [1, "def", [132, 0], [132, 3], "def ISNONTERMINAL(x):\n"], [1, "ISNONTERMINAL", [132, 4], [132, 17], "def ISNONTERMINAL(x):\n"], [54, "(", [132, 17], [132, 18], "def ISNONTERMINAL(x):\n"], [1, "x", [132, 18], [132, 19], "def ISNONTERMINAL(x):\n"], [54, ")", [132, 19], [132, 20], "def ISNONTERMINAL(x):\n"], [54, ":", [132, 20], [132, 21], "def ISNONTERMINAL(x):\n"], [4, "\n", [132, 21], [132, 22], "def ISNONTERMINAL(x):\n"], [5, "    ", [133, 0], [133, 4], "    return x >= NT_OFFSET\n"], [1, "return", [133, 4], [133, 10], "    return x >= NT_OFFSET\n"], [1, "x", [133, 11], [133, 12], "    return x >= NT_OFFSET\n"], [54, ">=", [133, 13], [133, 15], "    return x >= NT_OFFSET\n"], [1, "NT_OFFSET", [133, 16], [133, 25], "    return x >= NT_OFFSET\n"], [4, "\n", [133, 25], [133, 26], "    return x >= NT_OFFSET\n"], [61, "\n", [134, 0], [134, 1], "\n"], [6, "", [135, 0], [135, 0], "def ISEOF(x):\n"], [1, "def", [135, 0], [135, 3], "def ISEOF(x):\n"], [1, "ISEOF", [135, 4], [135, 9], "def ISEOF(x):\n"], [54, "(", [135, 9], [135, 10], "def ISEOF(x):\n"], [1, "x", [135, 10], [135, 11], "def ISEOF(x):\n"], [54, ")", [135, 11], [135, 12], "def ISEOF(x):\n"], [54, ":", [135, 12], [135, 13], "def ISEOF(x):\n"], [4, "\n", [135, 13], [135, 14], "def ISEOF(x):\n"], [5, "    ", [136, 0], [136, 4], "    return x == ENDMARKER\n"], [1, "return", [136, 4], [136, 10], "    return x == ENDMARKER\n"], [1, "x", [136, 11], [136, 12], "    return x == ENDMARKER\n"], [54, "==", [136, 13], [136, 15], "    return x == ENDMARKER\n"], [1, "ENDMARKER", [136, 16], [136, 25], "    return x == ENDMARKER\n"], [4, "\n", [136, 25], [136, 26], "    return x == ENDMARKER\n"], [6, "", [137, 0], [137, 0], ""], [0, "", [137, 0], [137, 0], ""]]