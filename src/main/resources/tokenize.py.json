[[3, "\"\"\"Tokenization help for Python programs.\n\ntokenize(readline) is a generator that breaks a stream of bytes into\nPython tokens.  It decodes the bytes according to PEP-0263 for\ndetermining source file encoding.\n\nIt accepts a readline-like method which is called repeatedly to get the\nnext line of input (or b\"\" for EOF).  It generates 5-tuples with these\nmembers:\n\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\n\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators.  Additionally, all token lists start with an ENCODING token\nwhich tells you which encoding was used to decode the bytes stream.\n\"\"\"", [1, 0], [21, 3], "\"\"\"Tokenization help for Python programs.\n\ntokenize(readline) is a generator that breaks a stream of bytes into\nPython tokens.  It decodes the bytes according to PEP-0263 for\ndetermining source file encoding.\n\nIt accepts a readline-like method which is called repeatedly to get the\nnext line of input (or b\"\" for EOF).  It generates 5-tuples with these\nmembers:\n\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\n\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators.  Additionally, all token lists start with an ENCODING token\nwhich tells you which encoding was used to decode the bytes stream.\n\"\"\"\n"], [4, "\n", [21, 3], [21, 4], "\"\"\"\n"], [1, "__author__", [23, 0], [23, 10], "__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n"], [22, "=", [23, 11], [23, 12], "__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n"], [3, "'Ka-Ping Yee <ping@lfw.org>'", [23, 13], [23, 41], "__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n"], [4, "\n", [23, 41], [23, 42], "__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n"], [1, "__credits__", [24, 0], [24, 11], "__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n"], [22, "=", [24, 12], [24, 13], "__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n"], [7, "(", [24, 14], [24, 15], "__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n"], [3, "'GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '", [24, 15], [24, 67], "__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n"], [3, "'Skip Montanaro, Raymond Hettinger, Trent Nelson, '", [25, 15], [25, 66], "               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n"], [3, "'Michael Foord'", [26, 15], [26, 30], "               'Michael Foord')\n"], [8, ")", [26, 30], [26, 31], "               'Michael Foord')\n"], [4, "\n", [26, 31], [26, 32], "               'Michael Foord')\n"], [1, "from", [27, 0], [27, 4], "from builtins import open as _builtin_open\n"], [1, "builtins", [27, 5], [27, 13], "from builtins import open as _builtin_open\n"], [1, "import", [27, 14], [27, 20], "from builtins import open as _builtin_open\n"], [1, "open", [27, 21], [27, 25], "from builtins import open as _builtin_open\n"], [1, "as", [27, 26], [27, 28], "from builtins import open as _builtin_open\n"], [1, "_builtin_open", [27, 29], [27, 42], "from builtins import open as _builtin_open\n"], [4, "\n", [27, 42], [27, 43], "from builtins import open as _builtin_open\n"], [1, "from", [28, 0], [28, 4], "from codecs import lookup, BOM_UTF8\n"], [1, "codecs", [28, 5], [28, 11], "from codecs import lookup, BOM_UTF8\n"], [1, "import", [28, 12], [28, 18], "from codecs import lookup, BOM_UTF8\n"], [1, "lookup", [28, 19], [28, 25], "from codecs import lookup, BOM_UTF8\n"], [12, ",", [28, 25], [28, 26], "from codecs import lookup, BOM_UTF8\n"], [1, "BOM_UTF8", [28, 27], [28, 35], "from codecs import lookup, BOM_UTF8\n"], [4, "\n", [28, 35], [28, 36], "from codecs import lookup, BOM_UTF8\n"], [1, "import", [29, 0], [29, 6], "import collections\n"], [1, "collections", [29, 7], [29, 18], "import collections\n"], [4, "\n", [29, 18], [29, 19], "import collections\n"], [1, "from", [30, 0], [30, 4], "from io import TextIOWrapper\n"], [1, "io", [30, 5], [30, 7], "from io import TextIOWrapper\n"], [1, "import", [30, 8], [30, 14], "from io import TextIOWrapper\n"], [1, "TextIOWrapper", [30, 15], [30, 28], "from io import TextIOWrapper\n"], [4, "\n", [30, 28], [30, 29], "from io import TextIOWrapper\n"], [1, "import", [31, 0], [31, 6], "import itertools as _itertools\n"], [1, "itertools", [31, 7], [31, 16], "import itertools as _itertools\n"], [1, "as", [31, 17], [31, 19], "import itertools as _itertools\n"], [1, "_itertools", [31, 20], [31, 30], "import itertools as _itertools\n"], [4, "\n", [31, 30], [31, 31], "import itertools as _itertools\n"], [1, "import", [32, 0], [32, 6], "import re\n"], [1, "re", [32, 7], [32, 9], "import re\n"], [4, "\n", [32, 9], [32, 10], "import re\n"], [1, "import", [33, 0], [33, 6], "import sys\n"], [1, "sys", [33, 7], [33, 10], "import sys\n"], [4, "\n", [33, 10], [33, 11], "import sys\n"], [1, "from", [34, 0], [34, 4], "from token import *\n"], [1, "token", [34, 5], [34, 10], "from token import *\n"], [1, "import", [34, 11], [34, 17], "from token import *\n"], [16, "*", [34, 18], [34, 19], "from token import *\n"], [4, "\n", [34, 19], [34, 20], "from token import *\n"], [1, "from", [35, 0], [35, 4], "from token import EXACT_TOKEN_TYPES\n"], [1, "token", [35, 5], [35, 10], "from token import EXACT_TOKEN_TYPES\n"], [1, "import", [35, 11], [35, 17], "from token import EXACT_TOKEN_TYPES\n"], [1, "EXACT_TOKEN_TYPES", [35, 18], [35, 35], "from token import EXACT_TOKEN_TYPES\n"], [4, "\n", [35, 35], [35, 36], "from token import EXACT_TOKEN_TYPES\n"], [1, "cookie_re", [37, 0], [37, 9], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [22, "=", [37, 10], [37, 11], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [1, "re", [37, 12], [37, 14], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [23, ".", [37, 14], [37, 15], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [1, "compile", [37, 15], [37, 22], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [7, "(", [37, 22], [37, 23], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [3, "r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)'", [37, 23], [37, 64], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [12, ",", [37, 64], [37, 65], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [1, "re", [37, 66], [37, 68], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [23, ".", [37, 68], [37, 69], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [1, "ASCII", [37, 69], [37, 74], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [8, ")", [37, 74], [37, 75], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [4, "\n", [37, 75], [37, 76], "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\n"], [1, "blank_re", [38, 0], [38, 8], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [22, "=", [38, 9], [38, 10], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [1, "re", [38, 11], [38, 13], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [23, ".", [38, 13], [38, 14], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [1, "compile", [38, 14], [38, 21], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [7, "(", [38, 21], [38, 22], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [3, "br'^[ \\t\\f]*(?:[#\\r\\n]|$)'", [38, 22], [38, 48], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [12, ",", [38, 48], [38, 49], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [1, "re", [38, 50], [38, 52], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [23, ".", [38, 52], [38, 53], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [1, "ASCII", [38, 53], [38, 58], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [8, ")", [38, 58], [38, 59], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [4, "\n", [38, 59], [38, 60], "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\n"], [1, "import", [40, 0], [40, 6], "import token\n"], [1, "token", [40, 7], [40, 12], "import token\n"], [4, "\n", [40, 12], [40, 13], "import token\n"], [1, "__all__", [41, 0], [41, 7], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [22, "=", [41, 8], [41, 9], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [1, "token", [41, 10], [41, 15], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [23, ".", [41, 15], [41, 16], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [1, "__all__", [41, 16], [41, 23], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [14, "+", [41, 24], [41, 25], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [9, "[", [41, 26], [41, 27], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [3, "\"tokenize\"", [41, 27], [41, 37], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [12, ",", [41, 37], [41, 38], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [3, "\"generate_tokens\"", [41, 39], [41, 56], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [12, ",", [41, 56], [41, 57], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [3, "\"detect_encoding\"", [41, 58], [41, 75], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [12, ",", [41, 75], [41, 76], "__all__ = token.__all__ + [\"tokenize\", \"generate_tokens\", \"detect_encoding\",\n"], [3, "\"untokenize\"", [42, 27], [42, 39], "                           \"untokenize\", \"TokenInfo\"]\n"], [12, ",", [42, 39], [42, 40], "                           \"untokenize\", \"TokenInfo\"]\n"], [3, "\"TokenInfo\"", [42, 41], [42, 52], "                           \"untokenize\", \"TokenInfo\"]\n"], [10, "]", [42, 52], [42, 53], "                           \"untokenize\", \"TokenInfo\"]\n"], [4, "\n", [42, 53], [42, 54], "                           \"untokenize\", \"TokenInfo\"]\n"], [1, "del", [43, 0], [43, 3], "del token\n"], [1, "token", [43, 4], [43, 9], "del token\n"], [4, "\n", [43, 9], [43, 10], "del token\n"], [1, "class", [45, 0], [45, 5], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [1, "TokenInfo", [45, 6], [45, 15], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [7, "(", [45, 15], [45, 16], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [1, "collections", [45, 16], [45, 27], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [23, ".", [45, 27], [45, 28], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [1, "namedtuple", [45, 28], [45, 38], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [7, "(", [45, 38], [45, 39], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [3, "'TokenInfo'", [45, 39], [45, 50], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [12, ",", [45, 50], [45, 51], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [3, "'type string start end line'", [45, 52], [45, 80], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [8, ")", [45, 80], [45, 81], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [8, ")", [45, 81], [45, 82], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [11, ":", [45, 82], [45, 83], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [4, "\n", [45, 83], [45, 84], "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n"], [5, "    ", [46, 0], [46, 4], "    def __repr__(self):\n"], [1, "def", [46, 4], [46, 7], "    def __repr__(self):\n"], [1, "__repr__", [46, 8], [46, 16], "    def __repr__(self):\n"], [7, "(", [46, 16], [46, 17], "    def __repr__(self):\n"], [1, "self", [46, 17], [46, 21], "    def __repr__(self):\n"], [8, ")", [46, 21], [46, 22], "    def __repr__(self):\n"], [11, ":", [46, 22], [46, 23], "    def __repr__(self):\n"], [4, "\n", [46, 23], [46, 24], "    def __repr__(self):\n"], [5, "        ", [47, 0], [47, 8], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "annotated_type", [47, 8], [47, 22], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [22, "=", [47, 23], [47, 24], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [3, "'%d (%s)'", [47, 25], [47, 34], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [24, "%", [47, 35], [47, 36], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [7, "(", [47, 37], [47, 38], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "self", [47, 38], [47, 42], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [23, ".", [47, 42], [47, 43], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "type", [47, 43], [47, 47], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [12, ",", [47, 47], [47, 48], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "tok_name", [47, 49], [47, 57], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [9, "[", [47, 57], [47, 58], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "self", [47, 58], [47, 62], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [23, ".", [47, 62], [47, 63], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "type", [47, 63], [47, 67], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [10, "]", [47, 67], [47, 68], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [8, ")", [47, 68], [47, 69], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [4, "\n", [47, 69], [47, 70], "        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n"], [1, "return", [48, 8], [48, 14], "        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n"], [7, "(", [48, 15], [48, 16], "        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n"], [3, "'TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)'", [48, 16], [48, 74], "        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n"], [24, "%", [48, 75], [48, 76], "        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n"], [1, "self", [49, 16], [49, 20], "                self._replace(type=annotated_type))\n"], [23, ".", [49, 20], [49, 21], "                self._replace(type=annotated_type))\n"], [1, "_replace", [49, 21], [49, 29], "                self._replace(type=annotated_type))\n"], [7, "(", [49, 29], [49, 30], "                self._replace(type=annotated_type))\n"], [1, "type", [49, 30], [49, 34], "                self._replace(type=annotated_type))\n"], [22, "=", [49, 34], [49, 35], "                self._replace(type=annotated_type))\n"], [1, "annotated_type", [49, 35], [49, 49], "                self._replace(type=annotated_type))\n"], [8, ")", [49, 49], [49, 50], "                self._replace(type=annotated_type))\n"], [8, ")", [49, 50], [49, 51], "                self._replace(type=annotated_type))\n"], [4, "\n", [49, 51], [49, 52], "                self._replace(type=annotated_type))\n"], [6, "", [51, 4], [51, 4], "    @property\n"], [49, "@", [51, 4], [51, 5], "    @property\n"], [1, "property", [51, 5], [51, 13], "    @property\n"], [4, "\n", [51, 13], [51, 14], "    @property\n"], [1, "def", [52, 4], [52, 7], "    def exact_type(self):\n"], [1, "exact_type", [52, 8], [52, 18], "    def exact_type(self):\n"], [7, "(", [52, 18], [52, 19], "    def exact_type(self):\n"], [1, "self", [52, 19], [52, 23], "    def exact_type(self):\n"], [8, ")", [52, 23], [52, 24], "    def exact_type(self):\n"], [11, ":", [52, 24], [52, 25], "    def exact_type(self):\n"], [4, "\n", [52, 25], [52, 26], "    def exact_type(self):\n"], [5, "        ", [53, 0], [53, 8], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "if", [53, 8], [53, 10], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "self", [53, 11], [53, 15], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [23, ".", [53, 15], [53, 16], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "type", [53, 16], [53, 20], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [27, "==", [53, 21], [53, 23], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "OP", [53, 24], [53, 26], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "and", [53, 27], [53, 30], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "self", [53, 31], [53, 35], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [23, ".", [53, 35], [53, 36], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "string", [53, 36], [53, 42], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "in", [53, 43], [53, 45], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [1, "EXACT_TOKEN_TYPES", [53, 46], [53, 63], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [11, ":", [53, 63], [53, 64], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [4, "\n", [53, 64], [53, 65], "        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n"], [5, "            ", [54, 0], [54, 12], "            return EXACT_TOKEN_TYPES[self.string]\n"], [1, "return", [54, 12], [54, 18], "            return EXACT_TOKEN_TYPES[self.string]\n"], [1, "EXACT_TOKEN_TYPES", [54, 19], [54, 36], "            return EXACT_TOKEN_TYPES[self.string]\n"], [9, "[", [54, 36], [54, 37], "            return EXACT_TOKEN_TYPES[self.string]\n"], [1, "self", [54, 37], [54, 41], "            return EXACT_TOKEN_TYPES[self.string]\n"], [23, ".", [54, 41], [54, 42], "            return EXACT_TOKEN_TYPES[self.string]\n"], [1, "string", [54, 42], [54, 48], "            return EXACT_TOKEN_TYPES[self.string]\n"], [10, "]", [54, 48], [54, 49], "            return EXACT_TOKEN_TYPES[self.string]\n"], [4, "\n", [54, 49], [54, 50], "            return EXACT_TOKEN_TYPES[self.string]\n"], [6, "", [55, 8], [55, 8], "        else:\n"], [1, "else", [55, 8], [55, 12], "        else:\n"], [11, ":", [55, 12], [55, 13], "        else:\n"], [4, "\n", [55, 13], [55, 14], "        else:\n"], [5, "            ", [56, 0], [56, 12], "            return self.type\n"], [1, "return", [56, 12], [56, 18], "            return self.type\n"], [1, "self", [56, 19], [56, 23], "            return self.type\n"], [23, ".", [56, 23], [56, 24], "            return self.type\n"], [1, "type", [56, 24], [56, 28], "            return self.type\n"], [4, "\n", [56, 28], [56, 29], "            return self.type\n"], [6, "", [58, 0], [58, 0], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [6, "", [58, 0], [58, 0], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [6, "", [58, 0], [58, 0], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "def", [58, 0], [58, 3], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "group", [58, 4], [58, 9], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [7, "(", [58, 9], [58, 10], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [16, "*", [58, 10], [58, 11], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "choices", [58, 11], [58, 18], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [8, ")", [58, 18], [58, 19], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [11, ":", [58, 19], [58, 20], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "return", [58, 21], [58, 27], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [3, "'('", [58, 28], [58, 31], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [14, "+", [58, 32], [58, 33], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [3, "'|'", [58, 34], [58, 37], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [23, ".", [58, 37], [58, 38], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "join", [58, 38], [58, 42], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [7, "(", [58, 42], [58, 43], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "choices", [58, 43], [58, 50], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [8, ")", [58, 50], [58, 51], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [14, "+", [58, 52], [58, 53], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [3, "')'", [58, 54], [58, 57], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [4, "\n", [58, 57], [58, 58], "def group(*choices): return '(' + '|'.join(choices) + ')'\n"], [1, "def", [59, 0], [59, 3], "def any(*choices): return group(*choices) + '*'\n"], [1, "any", [59, 4], [59, 7], "def any(*choices): return group(*choices) + '*'\n"], [7, "(", [59, 7], [59, 8], "def any(*choices): return group(*choices) + '*'\n"], [16, "*", [59, 8], [59, 9], "def any(*choices): return group(*choices) + '*'\n"], [1, "choices", [59, 9], [59, 16], "def any(*choices): return group(*choices) + '*'\n"], [8, ")", [59, 16], [59, 17], "def any(*choices): return group(*choices) + '*'\n"], [11, ":", [59, 17], [59, 18], "def any(*choices): return group(*choices) + '*'\n"], [1, "return", [59, 19], [59, 25], "def any(*choices): return group(*choices) + '*'\n"], [1, "group", [59, 26], [59, 31], "def any(*choices): return group(*choices) + '*'\n"], [7, "(", [59, 31], [59, 32], "def any(*choices): return group(*choices) + '*'\n"], [16, "*", [59, 32], [59, 33], "def any(*choices): return group(*choices) + '*'\n"], [1, "choices", [59, 33], [59, 40], "def any(*choices): return group(*choices) + '*'\n"], [8, ")", [59, 40], [59, 41], "def any(*choices): return group(*choices) + '*'\n"], [14, "+", [59, 42], [59, 43], "def any(*choices): return group(*choices) + '*'\n"], [3, "'*'", [59, 44], [59, 47], "def any(*choices): return group(*choices) + '*'\n"], [4, "\n", [59, 47], [59, 48], "def any(*choices): return group(*choices) + '*'\n"], [1, "def", [60, 0], [60, 3], "def maybe(*choices): return group(*choices) + '?'\n"], [1, "maybe", [60, 4], [60, 9], "def maybe(*choices): return group(*choices) + '?'\n"], [7, "(", [60, 9], [60, 10], "def maybe(*choices): return group(*choices) + '?'\n"], [16, "*", [60, 10], [60, 11], "def maybe(*choices): return group(*choices) + '?'\n"], [1, "choices", [60, 11], [60, 18], "def maybe(*choices): return group(*choices) + '?'\n"], [8, ")", [60, 18], [60, 19], "def maybe(*choices): return group(*choices) + '?'\n"], [11, ":", [60, 19], [60, 20], "def maybe(*choices): return group(*choices) + '?'\n"], [1, "return", [60, 21], [60, 27], "def maybe(*choices): return group(*choices) + '?'\n"], [1, "group", [60, 28], [60, 33], "def maybe(*choices): return group(*choices) + '?'\n"], [7, "(", [60, 33], [60, 34], "def maybe(*choices): return group(*choices) + '?'\n"], [16, "*", [60, 34], [60, 35], "def maybe(*choices): return group(*choices) + '?'\n"], [1, "choices", [60, 35], [60, 42], "def maybe(*choices): return group(*choices) + '?'\n"], [8, ")", [60, 42], [60, 43], "def maybe(*choices): return group(*choices) + '?'\n"], [14, "+", [60, 44], [60, 45], "def maybe(*choices): return group(*choices) + '?'\n"], [3, "'?'", [60, 46], [60, 49], "def maybe(*choices): return group(*choices) + '?'\n"], [4, "\n", [60, 49], [60, 50], "def maybe(*choices): return group(*choices) + '?'\n"], [1, "Whitespace", [64, 0], [64, 10], "Whitespace = r'[ \\f\\t]*'\n"], [22, "=", [64, 11], [64, 12], "Whitespace = r'[ \\f\\t]*'\n"], [3, "r'[ \\f\\t]*'", [64, 13], [64, 24], "Whitespace = r'[ \\f\\t]*'\n"], [4, "\n", [64, 24], [64, 25], "Whitespace = r'[ \\f\\t]*'\n"], [1, "Comment", [65, 0], [65, 7], "Comment = r'#[^\\r\\n]*'\n"], [22, "=", [65, 8], [65, 9], "Comment = r'#[^\\r\\n]*'\n"], [3, "r'#[^\\r\\n]*'", [65, 10], [65, 22], "Comment = r'#[^\\r\\n]*'\n"], [4, "\n", [65, 22], [65, 23], "Comment = r'#[^\\r\\n]*'\n"], [1, "Ignore", [66, 0], [66, 6], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [22, "=", [66, 7], [66, 8], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [1, "Whitespace", [66, 9], [66, 19], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [14, "+", [66, 20], [66, 21], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [1, "any", [66, 22], [66, 25], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [7, "(", [66, 25], [66, 26], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [3, "r'\\\\\\r?\\n'", [66, 26], [66, 36], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [14, "+", [66, 37], [66, 38], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [1, "Whitespace", [66, 39], [66, 49], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [8, ")", [66, 49], [66, 50], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [14, "+", [66, 51], [66, 52], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [1, "maybe", [66, 53], [66, 58], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [7, "(", [66, 58], [66, 59], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [1, "Comment", [66, 59], [66, 66], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [8, ")", [66, 66], [66, 67], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [4, "\n", [66, 67], [66, 68], "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\n"], [1, "Name", [67, 0], [67, 4], "Name = r'\\w+'\n"], [22, "=", [67, 5], [67, 6], "Name = r'\\w+'\n"], [3, "r'\\w+'", [67, 7], [67, 13], "Name = r'\\w+'\n"], [4, "\n", [67, 13], [67, 14], "Name = r'\\w+'\n"], [1, "Hexnumber", [69, 0], [69, 9], "Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n"], [22, "=", [69, 10], [69, 11], "Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n"], [3, "r'0[xX](?:_?[0-9a-fA-F])+'", [69, 12], [69, 38], "Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n"], [4, "\n", [69, 38], [69, 39], "Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\n"], [1, "Binnumber", [70, 0], [70, 9], "Binnumber = r'0[bB](?:_?[01])+'\n"], [22, "=", [70, 10], [70, 11], "Binnumber = r'0[bB](?:_?[01])+'\n"], [3, "r'0[bB](?:_?[01])+'", [70, 12], [70, 31], "Binnumber = r'0[bB](?:_?[01])+'\n"], [4, "\n", [70, 31], [70, 32], "Binnumber = r'0[bB](?:_?[01])+'\n"], [1, "Octnumber", [71, 0], [71, 9], "Octnumber = r'0[oO](?:_?[0-7])+'\n"], [22, "=", [71, 10], [71, 11], "Octnumber = r'0[oO](?:_?[0-7])+'\n"], [3, "r'0[oO](?:_?[0-7])+'", [71, 12], [71, 32], "Octnumber = r'0[oO](?:_?[0-7])+'\n"], [4, "\n", [71, 32], [71, 33], "Octnumber = r'0[oO](?:_?[0-7])+'\n"], [1, "Decnumber", [72, 0], [72, 9], "Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n"], [22, "=", [72, 10], [72, 11], "Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n"], [3, "r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'", [72, 12], [72, 46], "Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n"], [4, "\n", [72, 46], [72, 47], "Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\n"], [1, "Intnumber", [73, 0], [73, 9], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [22, "=", [73, 10], [73, 11], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [1, "group", [73, 12], [73, 17], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [7, "(", [73, 17], [73, 18], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [1, "Hexnumber", [73, 18], [73, 27], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [12, ",", [73, 27], [73, 28], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [1, "Binnumber", [73, 29], [73, 38], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [12, ",", [73, 38], [73, 39], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [1, "Octnumber", [73, 40], [73, 49], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [12, ",", [73, 49], [73, 50], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [1, "Decnumber", [73, 51], [73, 60], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [8, ")", [73, 60], [73, 61], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [4, "\n", [73, 61], [73, 62], "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\n"], [1, "Exponent", [74, 0], [74, 8], "Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n"], [22, "=", [74, 9], [74, 10], "Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n"], [3, "r'[eE][-+]?[0-9](?:_?[0-9])*'", [74, 11], [74, 40], "Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n"], [4, "\n", [74, 40], [74, 41], "Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\n"], [1, "Pointfloat", [75, 0], [75, 10], "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n"], [22, "=", [75, 11], [75, 12], "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n"], [1, "group", [75, 13], [75, 18], "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n"], [7, "(", [75, 18], [75, 19], "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n"], [3, "r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?'", [75, 19], [75, 63], "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n"], [12, ",", [75, 63], [75, 64], "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n"], [3, "r'\\.[0-9](?:_?[0-9])*'", [76, 19], [76, 41], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [8, ")", [76, 41], [76, 42], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [14, "+", [76, 43], [76, 44], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [1, "maybe", [76, 45], [76, 50], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [7, "(", [76, 50], [76, 51], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [1, "Exponent", [76, 51], [76, 59], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [8, ")", [76, 59], [76, 60], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [4, "\n", [76, 60], [76, 61], "                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\n"], [1, "Expfloat", [77, 0], [77, 8], "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n"], [22, "=", [77, 9], [77, 10], "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n"], [3, "r'[0-9](?:_?[0-9])*'", [77, 11], [77, 31], "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n"], [14, "+", [77, 32], [77, 33], "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n"], [1, "Exponent", [77, 34], [77, 42], "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n"], [4, "\n", [77, 42], [77, 43], "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\n"], [1, "Floatnumber", [78, 0], [78, 11], "Floatnumber = group(Pointfloat, Expfloat)\n"], [22, "=", [78, 12], [78, 13], "Floatnumber = group(Pointfloat, Expfloat)\n"], [1, "group", [78, 14], [78, 19], "Floatnumber = group(Pointfloat, Expfloat)\n"], [7, "(", [78, 19], [78, 20], "Floatnumber = group(Pointfloat, Expfloat)\n"], [1, "Pointfloat", [78, 20], [78, 30], "Floatnumber = group(Pointfloat, Expfloat)\n"], [12, ",", [78, 30], [78, 31], "Floatnumber = group(Pointfloat, Expfloat)\n"], [1, "Expfloat", [78, 32], [78, 40], "Floatnumber = group(Pointfloat, Expfloat)\n"], [8, ")", [78, 40], [78, 41], "Floatnumber = group(Pointfloat, Expfloat)\n"], [4, "\n", [78, 41], [78, 42], "Floatnumber = group(Pointfloat, Expfloat)\n"], [1, "Imagnumber", [79, 0], [79, 10], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [22, "=", [79, 11], [79, 12], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [1, "group", [79, 13], [79, 18], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [7, "(", [79, 18], [79, 19], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [3, "r'[0-9](?:_?[0-9])*[jJ]'", [79, 19], [79, 43], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [12, ",", [79, 43], [79, 44], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [1, "Floatnumber", [79, 45], [79, 56], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [14, "+", [79, 57], [79, 58], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [3, "r'[jJ]'", [79, 59], [79, 66], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [8, ")", [79, 66], [79, 67], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [4, "\n", [79, 67], [79, 68], "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\n"], [1, "Number", [80, 0], [80, 6], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [22, "=", [80, 7], [80, 8], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [1, "group", [80, 9], [80, 14], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [7, "(", [80, 14], [80, 15], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [1, "Imagnumber", [80, 15], [80, 25], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [12, ",", [80, 25], [80, 26], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [1, "Floatnumber", [80, 27], [80, 38], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [12, ",", [80, 38], [80, 39], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [1, "Intnumber", [80, 40], [80, 49], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [8, ")", [80, 49], [80, 50], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [4, "\n", [80, 50], [80, 51], "Number = group(Imagnumber, Floatnumber, Intnumber)\n"], [1, "def", [83, 0], [83, 3], "def _all_string_prefixes():\n"], [1, "_all_string_prefixes", [83, 4], [83, 24], "def _all_string_prefixes():\n"], [7, "(", [83, 24], [83, 25], "def _all_string_prefixes():\n"], [8, ")", [83, 25], [83, 26], "def _all_string_prefixes():\n"], [11, ":", [83, 26], [83, 27], "def _all_string_prefixes():\n"], [4, "\n", [83, 27], [83, 28], "def _all_string_prefixes():\n"], [5, "    ", [87, 0], [87, 4], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [1, "_valid_string_prefixes", [87, 4], [87, 26], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [22, "=", [87, 27], [87, 28], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [9, "[", [87, 29], [87, 30], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [3, "'b'", [87, 30], [87, 33], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [12, ",", [87, 33], [87, 34], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [3, "'r'", [87, 35], [87, 38], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [12, ",", [87, 38], [87, 39], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [3, "'u'", [87, 40], [87, 43], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [12, ",", [87, 43], [87, 44], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [3, "'f'", [87, 45], [87, 48], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [12, ",", [87, 48], [87, 49], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [3, "'br'", [87, 50], [87, 54], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [12, ",", [87, 54], [87, 55], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [3, "'fr'", [87, 56], [87, 60], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [10, "]", [87, 60], [87, 61], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [4, "\n", [87, 61], [87, 62], "    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n"], [1, "result", [89, 4], [89, 10], "    result = {''}\n"], [22, "=", [89, 11], [89, 12], "    result = {''}\n"], [25, "{", [89, 13], [89, 14], "    result = {''}\n"], [3, "''", [89, 14], [89, 16], "    result = {''}\n"], [26, "}", [89, 16], [89, 17], "    result = {''}\n"], [4, "\n", [89, 17], [89, 18], "    result = {''}\n"], [1, "for", [90, 4], [90, 7], "    for prefix in _valid_string_prefixes:\n"], [1, "prefix", [90, 8], [90, 14], "    for prefix in _valid_string_prefixes:\n"], [1, "in", [90, 15], [90, 17], "    for prefix in _valid_string_prefixes:\n"], [1, "_valid_string_prefixes", [90, 18], [90, 40], "    for prefix in _valid_string_prefixes:\n"], [11, ":", [90, 40], [90, 41], "    for prefix in _valid_string_prefixes:\n"], [4, "\n", [90, 41], [90, 42], "    for prefix in _valid_string_prefixes:\n"], [5, "        ", [91, 0], [91, 8], "        for t in _itertools.permutations(prefix):\n"], [1, "for", [91, 8], [91, 11], "        for t in _itertools.permutations(prefix):\n"], [1, "t", [91, 12], [91, 13], "        for t in _itertools.permutations(prefix):\n"], [1, "in", [91, 14], [91, 16], "        for t in _itertools.permutations(prefix):\n"], [1, "_itertools", [91, 17], [91, 27], "        for t in _itertools.permutations(prefix):\n"], [23, ".", [91, 27], [91, 28], "        for t in _itertools.permutations(prefix):\n"], [1, "permutations", [91, 28], [91, 40], "        for t in _itertools.permutations(prefix):\n"], [7, "(", [91, 40], [91, 41], "        for t in _itertools.permutations(prefix):\n"], [1, "prefix", [91, 41], [91, 47], "        for t in _itertools.permutations(prefix):\n"], [8, ")", [91, 47], [91, 48], "        for t in _itertools.permutations(prefix):\n"], [11, ":", [91, 48], [91, 49], "        for t in _itertools.permutations(prefix):\n"], [4, "\n", [91, 49], [91, 50], "        for t in _itertools.permutations(prefix):\n"], [5, "            ", [94, 0], [94, 12], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "for", [94, 12], [94, 15], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "u", [94, 16], [94, 17], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "in", [94, 18], [94, 20], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "_itertools", [94, 21], [94, 31], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [23, ".", [94, 31], [94, 32], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "product", [94, 32], [94, 39], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [7, "(", [94, 39], [94, 40], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [16, "*", [94, 40], [94, 41], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [9, "[", [94, 41], [94, 42], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [7, "(", [94, 42], [94, 43], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "c", [94, 43], [94, 44], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [12, ",", [94, 44], [94, 45], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "c", [94, 46], [94, 47], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [23, ".", [94, 47], [94, 48], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "upper", [94, 48], [94, 53], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [7, "(", [94, 53], [94, 54], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [8, ")", [94, 54], [94, 55], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [8, ")", [94, 55], [94, 56], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "for", [94, 57], [94, 60], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "c", [94, 61], [94, 62], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "in", [94, 63], [94, 65], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [1, "t", [94, 66], [94, 67], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [10, "]", [94, 67], [94, 68], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [8, ")", [94, 68], [94, 69], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [11, ":", [94, 69], [94, 70], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [4, "\n", [94, 70], [94, 71], "            for u in _itertools.product(*[(c, c.upper()) for c in t]):\n"], [5, "                ", [95, 0], [95, 16], "                result.add(''.join(u))\n"], [1, "result", [95, 16], [95, 22], "                result.add(''.join(u))\n"], [23, ".", [95, 22], [95, 23], "                result.add(''.join(u))\n"], [1, "add", [95, 23], [95, 26], "                result.add(''.join(u))\n"], [7, "(", [95, 26], [95, 27], "                result.add(''.join(u))\n"], [3, "''", [95, 27], [95, 29], "                result.add(''.join(u))\n"], [23, ".", [95, 29], [95, 30], "                result.add(''.join(u))\n"], [1, "join", [95, 30], [95, 34], "                result.add(''.join(u))\n"], [7, "(", [95, 34], [95, 35], "                result.add(''.join(u))\n"], [1, "u", [95, 35], [95, 36], "                result.add(''.join(u))\n"], [8, ")", [95, 36], [95, 37], "                result.add(''.join(u))\n"], [8, ")", [95, 37], [95, 38], "                result.add(''.join(u))\n"], [4, "\n", [95, 38], [95, 39], "                result.add(''.join(u))\n"], [6, "", [96, 4], [96, 4], "    return result\n"], [6, "", [96, 4], [96, 4], "    return result\n"], [6, "", [96, 4], [96, 4], "    return result\n"], [1, "return", [96, 4], [96, 10], "    return result\n"], [1, "result", [96, 11], [96, 17], "    return result\n"], [4, "\n", [96, 17], [96, 18], "    return result\n"], [6, "", [98, 0], [98, 0], "def _compile(expr):\n"], [1, "def", [98, 0], [98, 3], "def _compile(expr):\n"], [1, "_compile", [98, 4], [98, 12], "def _compile(expr):\n"], [7, "(", [98, 12], [98, 13], "def _compile(expr):\n"], [1, "expr", [98, 13], [98, 17], "def _compile(expr):\n"], [8, ")", [98, 17], [98, 18], "def _compile(expr):\n"], [11, ":", [98, 18], [98, 19], "def _compile(expr):\n"], [4, "\n", [98, 19], [98, 20], "def _compile(expr):\n"], [5, "    ", [99, 0], [99, 4], "    return re.compile(expr, re.UNICODE)\n"], [1, "return", [99, 4], [99, 10], "    return re.compile(expr, re.UNICODE)\n"], [1, "re", [99, 11], [99, 13], "    return re.compile(expr, re.UNICODE)\n"], [23, ".", [99, 13], [99, 14], "    return re.compile(expr, re.UNICODE)\n"], [1, "compile", [99, 14], [99, 21], "    return re.compile(expr, re.UNICODE)\n"], [7, "(", [99, 21], [99, 22], "    return re.compile(expr, re.UNICODE)\n"], [1, "expr", [99, 22], [99, 26], "    return re.compile(expr, re.UNICODE)\n"], [12, ",", [99, 26], [99, 27], "    return re.compile(expr, re.UNICODE)\n"], [1, "re", [99, 28], [99, 30], "    return re.compile(expr, re.UNICODE)\n"], [23, ".", [99, 30], [99, 31], "    return re.compile(expr, re.UNICODE)\n"], [1, "UNICODE", [99, 31], [99, 38], "    return re.compile(expr, re.UNICODE)\n"], [8, ")", [99, 38], [99, 39], "    return re.compile(expr, re.UNICODE)\n"], [4, "\n", [99, 39], [99, 40], "    return re.compile(expr, re.UNICODE)\n"], [6, "", [103, 0], [103, 0], "StringPrefix = group(*_all_string_prefixes())\n"], [1, "StringPrefix", [103, 0], [103, 12], "StringPrefix = group(*_all_string_prefixes())\n"], [22, "=", [103, 13], [103, 14], "StringPrefix = group(*_all_string_prefixes())\n"], [1, "group", [103, 15], [103, 20], "StringPrefix = group(*_all_string_prefixes())\n"], [7, "(", [103, 20], [103, 21], "StringPrefix = group(*_all_string_prefixes())\n"], [16, "*", [103, 21], [103, 22], "StringPrefix = group(*_all_string_prefixes())\n"], [1, "_all_string_prefixes", [103, 22], [103, 42], "StringPrefix = group(*_all_string_prefixes())\n"], [7, "(", [103, 42], [103, 43], "StringPrefix = group(*_all_string_prefixes())\n"], [8, ")", [103, 43], [103, 44], "StringPrefix = group(*_all_string_prefixes())\n"], [8, ")", [103, 44], [103, 45], "StringPrefix = group(*_all_string_prefixes())\n"], [4, "\n", [103, 45], [103, 46], "StringPrefix = group(*_all_string_prefixes())\n"], [1, "Single", [106, 0], [106, 6], "Single = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n"], [22, "=", [106, 7], [106, 8], "Single = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n"], [3, "r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"", [106, 9], [106, 35], "Single = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n"], [4, "\n", [106, 35], [106, 36], "Single = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n"], [1, "Double", [108, 0], [108, 6], "Double = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n"], [22, "=", [108, 7], [108, 8], "Double = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n"], [3, "r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'", [108, 9], [108, 35], "Double = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n"], [4, "\n", [108, 35], [108, 36], "Double = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n"], [1, "Single3", [110, 0], [110, 7], "Single3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n"], [22, "=", [110, 8], [110, 9], "Single3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n"], [3, "r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"", [110, 10], [110, 50], "Single3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n"], [4, "\n", [110, 50], [110, 51], "Single3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n"], [1, "Double3", [112, 0], [112, 7], "Double3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\n"], [22, "=", [112, 8], [112, 9], "Double3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\n"], [3, "r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'", [112, 10], [112, 50], "Double3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\n"], [4, "\n", [112, 50], [112, 51], "Double3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\n"], [1, "Triple", [113, 0], [113, 6], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [22, "=", [113, 7], [113, 8], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [1, "group", [113, 9], [113, 14], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [7, "(", [113, 14], [113, 15], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [1, "StringPrefix", [113, 15], [113, 27], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [14, "+", [113, 28], [113, 29], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [3, "\"'''\"", [113, 30], [113, 35], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [12, ",", [113, 35], [113, 36], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [1, "StringPrefix", [113, 37], [113, 49], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [14, "+", [113, 50], [113, 51], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [3, "'\"\"\"'", [113, 52], [113, 57], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [8, ")", [113, 57], [113, 58], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [4, "\n", [113, 58], [113, 59], "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n"], [1, "String", [115, 0], [115, 6], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [22, "=", [115, 7], [115, 8], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [1, "group", [115, 9], [115, 14], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [7, "(", [115, 14], [115, 15], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [1, "StringPrefix", [115, 15], [115, 27], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [14, "+", [115, 28], [115, 29], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [3, "r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\"", [115, 30], [115, 61], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [12, ",", [115, 61], [115, 62], "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n"], [1, "StringPrefix", [116, 15], [116, 27], "               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n"], [14, "+", [116, 28], [116, 29], "               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n"], [3, "r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"'", [116, 30], [116, 61], "               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n"], [8, ")", [116, 61], [116, 62], "               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n"], [4, "\n", [116, 62], [116, 63], "               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n"], [1, "Special", [121, 0], [121, 7], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [22, "=", [121, 8], [121, 9], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "group", [121, 10], [121, 15], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [7, "(", [121, 15], [121, 16], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [16, "*", [121, 16], [121, 17], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "map", [121, 17], [121, 20], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [7, "(", [121, 20], [121, 21], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "re", [121, 21], [121, 23], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [23, ".", [121, 23], [121, 24], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "escape", [121, 24], [121, 30], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [12, ",", [121, 30], [121, 31], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "sorted", [121, 32], [121, 38], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [7, "(", [121, 38], [121, 39], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "EXACT_TOKEN_TYPES", [121, 39], [121, 56], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [12, ",", [121, 56], [121, 57], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "reverse", [121, 58], [121, 65], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [22, "=", [121, 65], [121, 66], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "True", [121, 66], [121, 70], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [8, ")", [121, 70], [121, 71], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [8, ")", [121, 71], [121, 72], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [8, ")", [121, 72], [121, 73], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [4, "\n", [121, 73], [121, 74], "Special = group(*map(re.escape, sorted(EXACT_TOKEN_TYPES, reverse=True)))\n"], [1, "Funny", [122, 0], [122, 5], "Funny = group(r'\\r?\\n', Special)\n"], [22, "=", [122, 6], [122, 7], "Funny = group(r'\\r?\\n', Special)\n"], [1, "group", [122, 8], [122, 13], "Funny = group(r'\\r?\\n', Special)\n"], [7, "(", [122, 13], [122, 14], "Funny = group(r'\\r?\\n', Special)\n"], [3, "r'\\r?\\n'", [122, 14], [122, 22], "Funny = group(r'\\r?\\n', Special)\n"], [12, ",", [122, 22], [122, 23], "Funny = group(r'\\r?\\n', Special)\n"], [1, "Special", [122, 24], [122, 31], "Funny = group(r'\\r?\\n', Special)\n"], [8, ")", [122, 31], [122, 32], "Funny = group(r'\\r?\\n', Special)\n"], [4, "\n", [122, 32], [122, 33], "Funny = group(r'\\r?\\n', Special)\n"], [1, "PlainToken", [124, 0], [124, 10], "PlainToken = group(Number, Funny, String, Name)\n"], [22, "=", [124, 11], [124, 12], "PlainToken = group(Number, Funny, String, Name)\n"], [1, "group", [124, 13], [124, 18], "PlainToken = group(Number, Funny, String, Name)\n"], [7, "(", [124, 18], [124, 19], "PlainToken = group(Number, Funny, String, Name)\n"], [1, "Number", [124, 19], [124, 25], "PlainToken = group(Number, Funny, String, Name)\n"], [12, ",", [124, 25], [124, 26], "PlainToken = group(Number, Funny, String, Name)\n"], [1, "Funny", [124, 27], [124, 32], "PlainToken = group(Number, Funny, String, Name)\n"], [12, ",", [124, 32], [124, 33], "PlainToken = group(Number, Funny, String, Name)\n"], [1, "String", [124, 34], [124, 40], "PlainToken = group(Number, Funny, String, Name)\n"], [12, ",", [124, 40], [124, 41], "PlainToken = group(Number, Funny, String, Name)\n"], [1, "Name", [124, 42], [124, 46], "PlainToken = group(Number, Funny, String, Name)\n"], [8, ")", [124, 46], [124, 47], "PlainToken = group(Number, Funny, String, Name)\n"], [4, "\n", [124, 47], [124, 48], "PlainToken = group(Number, Funny, String, Name)\n"], [1, "Token", [125, 0], [125, 5], "Token = Ignore + PlainToken\n"], [22, "=", [125, 6], [125, 7], "Token = Ignore + PlainToken\n"], [1, "Ignore", [125, 8], [125, 14], "Token = Ignore + PlainToken\n"], [14, "+", [125, 15], [125, 16], "Token = Ignore + PlainToken\n"], [1, "PlainToken", [125, 17], [125, 27], "Token = Ignore + PlainToken\n"], [4, "\n", [125, 27], [125, 28], "Token = Ignore + PlainToken\n"], [1, "ContStr", [128, 0], [128, 7], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [22, "=", [128, 8], [128, 9], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [1, "group", [128, 10], [128, 15], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [7, "(", [128, 15], [128, 16], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [1, "StringPrefix", [128, 16], [128, 28], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [14, "+", [128, 29], [128, 30], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [3, "r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\"", [128, 31], [128, 61], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [14, "+", [128, 62], [128, 63], "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n"], [1, "group", [129, 16], [129, 21], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [7, "(", [129, 21], [129, 22], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [3, "\"'\"", [129, 22], [129, 25], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [12, ",", [129, 25], [129, 26], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [3, "r'\\\\\\r?\\n'", [129, 27], [129, 37], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [8, ")", [129, 37], [129, 38], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [12, ",", [129, 38], [129, 39], "                group(\"'\", r'\\\\\\r?\\n'),\n"], [1, "StringPrefix", [130, 16], [130, 28], "                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n"], [14, "+", [130, 29], [130, 30], "                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n"], [3, "r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*'", [130, 31], [130, 61], "                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n"], [14, "+", [130, 62], [130, 63], "                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n"], [1, "group", [131, 16], [131, 21], "                group('\"', r'\\\\\\r?\\n'))\n"], [7, "(", [131, 21], [131, 22], "                group('\"', r'\\\\\\r?\\n'))\n"], [3, "'\"'", [131, 22], [131, 25], "                group('\"', r'\\\\\\r?\\n'))\n"], [12, ",", [131, 25], [131, 26], "                group('\"', r'\\\\\\r?\\n'))\n"], [3, "r'\\\\\\r?\\n'", [131, 27], [131, 37], "                group('\"', r'\\\\\\r?\\n'))\n"], [8, ")", [131, 37], [131, 38], "                group('\"', r'\\\\\\r?\\n'))\n"], [8, ")", [131, 38], [131, 39], "                group('\"', r'\\\\\\r?\\n'))\n"], [4, "\n", [131, 39], [131, 40], "                group('\"', r'\\\\\\r?\\n'))\n"], [1, "PseudoExtras", [132, 0], [132, 12], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [22, "=", [132, 13], [132, 14], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [1, "group", [132, 15], [132, 20], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [7, "(", [132, 20], [132, 21], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [3, "r'\\\\\\r?\\n|\\Z'", [132, 21], [132, 34], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [12, ",", [132, 34], [132, 35], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [1, "Comment", [132, 36], [132, 43], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [12, ",", [132, 43], [132, 44], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [1, "Triple", [132, 45], [132, 51], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [8, ")", [132, 51], [132, 52], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [4, "\n", [132, 52], [132, 53], "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\n"], [1, "PseudoToken", [133, 0], [133, 11], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [22, "=", [133, 12], [133, 13], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "Whitespace", [133, 14], [133, 24], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [14, "+", [133, 25], [133, 26], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "group", [133, 27], [133, 32], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [7, "(", [133, 32], [133, 33], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "PseudoExtras", [133, 33], [133, 45], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [12, ",", [133, 45], [133, 46], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "Number", [133, 47], [133, 53], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [12, ",", [133, 53], [133, 54], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "Funny", [133, 55], [133, 60], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [12, ",", [133, 60], [133, 61], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "ContStr", [133, 62], [133, 69], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [12, ",", [133, 69], [133, 70], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "Name", [133, 71], [133, 75], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [8, ")", [133, 75], [133, 76], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [4, "\n", [133, 76], [133, 77], "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n"], [1, "endpats", [138, 0], [138, 7], "endpats = {}\n"], [22, "=", [138, 8], [138, 9], "endpats = {}\n"], [25, "{", [138, 10], [138, 11], "endpats = {}\n"], [26, "}", [138, 11], [138, 12], "endpats = {}\n"], [4, "\n", [138, 12], [138, 13], "endpats = {}\n"], [1, "for", [139, 0], [139, 3], "for _prefix in _all_string_prefixes():\n"], [1, "_prefix", [139, 4], [139, 11], "for _prefix in _all_string_prefixes():\n"], [1, "in", [139, 12], [139, 14], "for _prefix in _all_string_prefixes():\n"], [1, "_all_string_prefixes", [139, 15], [139, 35], "for _prefix in _all_string_prefixes():\n"], [7, "(", [139, 35], [139, 36], "for _prefix in _all_string_prefixes():\n"], [8, ")", [139, 36], [139, 37], "for _prefix in _all_string_prefixes():\n"], [11, ":", [139, 37], [139, 38], "for _prefix in _all_string_prefixes():\n"], [4, "\n", [139, 38], [139, 39], "for _prefix in _all_string_prefixes():\n"], [5, "    ", [140, 0], [140, 4], "    endpats[_prefix + \"'\"] = Single\n"], [1, "endpats", [140, 4], [140, 11], "    endpats[_prefix + \"'\"] = Single\n"], [9, "[", [140, 11], [140, 12], "    endpats[_prefix + \"'\"] = Single\n"], [1, "_prefix", [140, 12], [140, 19], "    endpats[_prefix + \"'\"] = Single\n"], [14, "+", [140, 20], [140, 21], "    endpats[_prefix + \"'\"] = Single\n"], [3, "\"'\"", [140, 22], [140, 25], "    endpats[_prefix + \"'\"] = Single\n"], [10, "]", [140, 25], [140, 26], "    endpats[_prefix + \"'\"] = Single\n"], [22, "=", [140, 27], [140, 28], "    endpats[_prefix + \"'\"] = Single\n"], [1, "Single", [140, 29], [140, 35], "    endpats[_prefix + \"'\"] = Single\n"], [4, "\n", [140, 35], [140, 36], "    endpats[_prefix + \"'\"] = Single\n"], [1, "endpats", [141, 4], [141, 11], "    endpats[_prefix + '\"'] = Double\n"], [9, "[", [141, 11], [141, 12], "    endpats[_prefix + '\"'] = Double\n"], [1, "_prefix", [141, 12], [141, 19], "    endpats[_prefix + '\"'] = Double\n"], [14, "+", [141, 20], [141, 21], "    endpats[_prefix + '\"'] = Double\n"], [3, "'\"'", [141, 22], [141, 25], "    endpats[_prefix + '\"'] = Double\n"], [10, "]", [141, 25], [141, 26], "    endpats[_prefix + '\"'] = Double\n"], [22, "=", [141, 27], [141, 28], "    endpats[_prefix + '\"'] = Double\n"], [1, "Double", [141, 29], [141, 35], "    endpats[_prefix + '\"'] = Double\n"], [4, "\n", [141, 35], [141, 36], "    endpats[_prefix + '\"'] = Double\n"], [1, "endpats", [142, 4], [142, 11], "    endpats[_prefix + \"'''\"] = Single3\n"], [9, "[", [142, 11], [142, 12], "    endpats[_prefix + \"'''\"] = Single3\n"], [1, "_prefix", [142, 12], [142, 19], "    endpats[_prefix + \"'''\"] = Single3\n"], [14, "+", [142, 20], [142, 21], "    endpats[_prefix + \"'''\"] = Single3\n"], [3, "\"'''\"", [142, 22], [142, 27], "    endpats[_prefix + \"'''\"] = Single3\n"], [10, "]", [142, 27], [142, 28], "    endpats[_prefix + \"'''\"] = Single3\n"], [22, "=", [142, 29], [142, 30], "    endpats[_prefix + \"'''\"] = Single3\n"], [1, "Single3", [142, 31], [142, 38], "    endpats[_prefix + \"'''\"] = Single3\n"], [4, "\n", [142, 38], [142, 39], "    endpats[_prefix + \"'''\"] = Single3\n"], [1, "endpats", [143, 4], [143, 11], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [9, "[", [143, 11], [143, 12], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [1, "_prefix", [143, 12], [143, 19], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [14, "+", [143, 20], [143, 21], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [3, "'\"\"\"'", [143, 22], [143, 27], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [10, "]", [143, 27], [143, 28], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [22, "=", [143, 29], [143, 30], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [1, "Double3", [143, 31], [143, 38], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [4, "\n", [143, 38], [143, 39], "    endpats[_prefix + '\"\"\"'] = Double3\n"], [6, "", [147, 0], [147, 0], "single_quoted = set()\n"], [1, "single_quoted", [147, 0], [147, 13], "single_quoted = set()\n"], [22, "=", [147, 14], [147, 15], "single_quoted = set()\n"], [1, "set", [147, 16], [147, 19], "single_quoted = set()\n"], [7, "(", [147, 19], [147, 20], "single_quoted = set()\n"], [8, ")", [147, 20], [147, 21], "single_quoted = set()\n"], [4, "\n", [147, 21], [147, 22], "single_quoted = set()\n"], [1, "triple_quoted", [148, 0], [148, 13], "triple_quoted = set()\n"], [22, "=", [148, 14], [148, 15], "triple_quoted = set()\n"], [1, "set", [148, 16], [148, 19], "triple_quoted = set()\n"], [7, "(", [148, 19], [148, 20], "triple_quoted = set()\n"], [8, ")", [148, 20], [148, 21], "triple_quoted = set()\n"], [4, "\n", [148, 21], [148, 22], "triple_quoted = set()\n"], [1, "for", [149, 0], [149, 3], "for t in _all_string_prefixes():\n"], [1, "t", [149, 4], [149, 5], "for t in _all_string_prefixes():\n"], [1, "in", [149, 6], [149, 8], "for t in _all_string_prefixes():\n"], [1, "_all_string_prefixes", [149, 9], [149, 29], "for t in _all_string_prefixes():\n"], [7, "(", [149, 29], [149, 30], "for t in _all_string_prefixes():\n"], [8, ")", [149, 30], [149, 31], "for t in _all_string_prefixes():\n"], [11, ":", [149, 31], [149, 32], "for t in _all_string_prefixes():\n"], [4, "\n", [149, 32], [149, 33], "for t in _all_string_prefixes():\n"], [5, "    ", [150, 0], [150, 4], "    for u in (t + '\"', t + \"'\"):\n"], [1, "for", [150, 4], [150, 7], "    for u in (t + '\"', t + \"'\"):\n"], [1, "u", [150, 8], [150, 9], "    for u in (t + '\"', t + \"'\"):\n"], [1, "in", [150, 10], [150, 12], "    for u in (t + '\"', t + \"'\"):\n"], [7, "(", [150, 13], [150, 14], "    for u in (t + '\"', t + \"'\"):\n"], [1, "t", [150, 14], [150, 15], "    for u in (t + '\"', t + \"'\"):\n"], [14, "+", [150, 16], [150, 17], "    for u in (t + '\"', t + \"'\"):\n"], [3, "'\"'", [150, 18], [150, 21], "    for u in (t + '\"', t + \"'\"):\n"], [12, ",", [150, 21], [150, 22], "    for u in (t + '\"', t + \"'\"):\n"], [1, "t", [150, 23], [150, 24], "    for u in (t + '\"', t + \"'\"):\n"], [14, "+", [150, 25], [150, 26], "    for u in (t + '\"', t + \"'\"):\n"], [3, "\"'\"", [150, 27], [150, 30], "    for u in (t + '\"', t + \"'\"):\n"], [8, ")", [150, 30], [150, 31], "    for u in (t + '\"', t + \"'\"):\n"], [11, ":", [150, 31], [150, 32], "    for u in (t + '\"', t + \"'\"):\n"], [4, "\n", [150, 32], [150, 33], "    for u in (t + '\"', t + \"'\"):\n"], [5, "        ", [151, 0], [151, 8], "        single_quoted.add(u)\n"], [1, "single_quoted", [151, 8], [151, 21], "        single_quoted.add(u)\n"], [23, ".", [151, 21], [151, 22], "        single_quoted.add(u)\n"], [1, "add", [151, 22], [151, 25], "        single_quoted.add(u)\n"], [7, "(", [151, 25], [151, 26], "        single_quoted.add(u)\n"], [1, "u", [151, 26], [151, 27], "        single_quoted.add(u)\n"], [8, ")", [151, 27], [151, 28], "        single_quoted.add(u)\n"], [4, "\n", [151, 28], [151, 29], "        single_quoted.add(u)\n"], [6, "", [152, 4], [152, 4], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [1, "for", [152, 4], [152, 7], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [1, "u", [152, 8], [152, 9], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [1, "in", [152, 10], [152, 12], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [7, "(", [152, 13], [152, 14], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [1, "t", [152, 14], [152, 15], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [14, "+", [152, 16], [152, 17], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [3, "'\"\"\"'", [152, 18], [152, 23], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [12, ",", [152, 23], [152, 24], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [1, "t", [152, 25], [152, 26], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [14, "+", [152, 27], [152, 28], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [3, "\"'''\"", [152, 29], [152, 34], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [8, ")", [152, 34], [152, 35], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [11, ":", [152, 35], [152, 36], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [4, "\n", [152, 36], [152, 37], "    for u in (t + '\"\"\"', t + \"'''\"):\n"], [5, "        ", [153, 0], [153, 8], "        triple_quoted.add(u)\n"], [1, "triple_quoted", [153, 8], [153, 21], "        triple_quoted.add(u)\n"], [23, ".", [153, 21], [153, 22], "        triple_quoted.add(u)\n"], [1, "add", [153, 22], [153, 25], "        triple_quoted.add(u)\n"], [7, "(", [153, 25], [153, 26], "        triple_quoted.add(u)\n"], [1, "u", [153, 26], [153, 27], "        triple_quoted.add(u)\n"], [8, ")", [153, 27], [153, 28], "        triple_quoted.add(u)\n"], [4, "\n", [153, 28], [153, 29], "        triple_quoted.add(u)\n"], [6, "", [155, 0], [155, 0], "tabsize = 8\n"], [6, "", [155, 0], [155, 0], "tabsize = 8\n"], [1, "tabsize", [155, 0], [155, 7], "tabsize = 8\n"], [22, "=", [155, 8], [155, 9], "tabsize = 8\n"], [2, "8", [155, 10], [155, 11], "tabsize = 8\n"], [4, "\n", [155, 11], [155, 12], "tabsize = 8\n"], [1, "class", [157, 0], [157, 5], "class TokenError(Exception): pass\n"], [1, "TokenError", [157, 6], [157, 16], "class TokenError(Exception): pass\n"], [7, "(", [157, 16], [157, 17], "class TokenError(Exception): pass\n"], [1, "Exception", [157, 17], [157, 26], "class TokenError(Exception): pass\n"], [8, ")", [157, 26], [157, 27], "class TokenError(Exception): pass\n"], [11, ":", [157, 27], [157, 28], "class TokenError(Exception): pass\n"], [1, "pass", [157, 29], [157, 33], "class TokenError(Exception): pass\n"], [4, "\n", [157, 33], [157, 34], "class TokenError(Exception): pass\n"], [1, "class", [159, 0], [159, 5], "class StopTokenizing(Exception): pass\n"], [1, "StopTokenizing", [159, 6], [159, 20], "class StopTokenizing(Exception): pass\n"], [7, "(", [159, 20], [159, 21], "class StopTokenizing(Exception): pass\n"], [1, "Exception", [159, 21], [159, 30], "class StopTokenizing(Exception): pass\n"], [8, ")", [159, 30], [159, 31], "class StopTokenizing(Exception): pass\n"], [11, ":", [159, 31], [159, 32], "class StopTokenizing(Exception): pass\n"], [1, "pass", [159, 33], [159, 37], "class StopTokenizing(Exception): pass\n"], [4, "\n", [159, 37], [159, 38], "class StopTokenizing(Exception): pass\n"], [1, "class", [162, 0], [162, 5], "class Untokenizer:\n"], [1, "Untokenizer", [162, 6], [162, 17], "class Untokenizer:\n"], [11, ":", [162, 17], [162, 18], "class Untokenizer:\n"], [4, "\n", [162, 18], [162, 19], "class Untokenizer:\n"], [5, "    ", [164, 0], [164, 4], "    def __init__(self):\n"], [1, "def", [164, 4], [164, 7], "    def __init__(self):\n"], [1, "__init__", [164, 8], [164, 16], "    def __init__(self):\n"], [7, "(", [164, 16], [164, 17], "    def __init__(self):\n"], [1, "self", [164, 17], [164, 21], "    def __init__(self):\n"], [8, ")", [164, 21], [164, 22], "    def __init__(self):\n"], [11, ":", [164, 22], [164, 23], "    def __init__(self):\n"], [4, "\n", [164, 23], [164, 24], "    def __init__(self):\n"], [5, "        ", [165, 0], [165, 8], "        self.tokens = []\n"], [1, "self", [165, 8], [165, 12], "        self.tokens = []\n"], [23, ".", [165, 12], [165, 13], "        self.tokens = []\n"], [1, "tokens", [165, 13], [165, 19], "        self.tokens = []\n"], [22, "=", [165, 20], [165, 21], "        self.tokens = []\n"], [9, "[", [165, 22], [165, 23], "        self.tokens = []\n"], [10, "]", [165, 23], [165, 24], "        self.tokens = []\n"], [4, "\n", [165, 24], [165, 25], "        self.tokens = []\n"], [1, "self", [166, 8], [166, 12], "        self.prev_row = 1\n"], [23, ".", [166, 12], [166, 13], "        self.prev_row = 1\n"], [1, "prev_row", [166, 13], [166, 21], "        self.prev_row = 1\n"], [22, "=", [166, 22], [166, 23], "        self.prev_row = 1\n"], [2, "1", [166, 24], [166, 25], "        self.prev_row = 1\n"], [4, "\n", [166, 25], [166, 26], "        self.prev_row = 1\n"], [1, "self", [167, 8], [167, 12], "        self.prev_col = 0\n"], [23, ".", [167, 12], [167, 13], "        self.prev_col = 0\n"], [1, "prev_col", [167, 13], [167, 21], "        self.prev_col = 0\n"], [22, "=", [167, 22], [167, 23], "        self.prev_col = 0\n"], [2, "0", [167, 24], [167, 25], "        self.prev_col = 0\n"], [4, "\n", [167, 25], [167, 26], "        self.prev_col = 0\n"], [1, "self", [168, 8], [168, 12], "        self.encoding = None\n"], [23, ".", [168, 12], [168, 13], "        self.encoding = None\n"], [1, "encoding", [168, 13], [168, 21], "        self.encoding = None\n"], [22, "=", [168, 22], [168, 23], "        self.encoding = None\n"], [1, "None", [168, 24], [168, 28], "        self.encoding = None\n"], [4, "\n", [168, 28], [168, 29], "        self.encoding = None\n"], [6, "", [170, 4], [170, 4], "    def add_whitespace(self, start):\n"], [1, "def", [170, 4], [170, 7], "    def add_whitespace(self, start):\n"], [1, "add_whitespace", [170, 8], [170, 22], "    def add_whitespace(self, start):\n"], [7, "(", [170, 22], [170, 23], "    def add_whitespace(self, start):\n"], [1, "self", [170, 23], [170, 27], "    def add_whitespace(self, start):\n"], [12, ",", [170, 27], [170, 28], "    def add_whitespace(self, start):\n"], [1, "start", [170, 29], [170, 34], "    def add_whitespace(self, start):\n"], [8, ")", [170, 34], [170, 35], "    def add_whitespace(self, start):\n"], [11, ":", [170, 35], [170, 36], "    def add_whitespace(self, start):\n"], [4, "\n", [170, 36], [170, 37], "    def add_whitespace(self, start):\n"], [5, "        ", [171, 0], [171, 8], "        row, col = start\n"], [1, "row", [171, 8], [171, 11], "        row, col = start\n"], [12, ",", [171, 11], [171, 12], "        row, col = start\n"], [1, "col", [171, 13], [171, 16], "        row, col = start\n"], [22, "=", [171, 17], [171, 18], "        row, col = start\n"], [1, "start", [171, 19], [171, 24], "        row, col = start\n"], [4, "\n", [171, 24], [171, 25], "        row, col = start\n"], [1, "if", [172, 8], [172, 10], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "row", [172, 11], [172, 14], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [20, "<", [172, 15], [172, 16], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "self", [172, 17], [172, 21], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [23, ".", [172, 21], [172, 22], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "prev_row", [172, 22], [172, 30], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "or", [172, 31], [172, 33], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "row", [172, 34], [172, 37], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [27, "==", [172, 38], [172, 40], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "self", [172, 41], [172, 45], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [23, ".", [172, 45], [172, 46], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "prev_row", [172, 46], [172, 54], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "and", [172, 55], [172, 58], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "col", [172, 59], [172, 62], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [20, "<", [172, 63], [172, 64], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "self", [172, 65], [172, 69], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [23, ".", [172, 69], [172, 70], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [1, "prev_col", [172, 70], [172, 78], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [11, ":", [172, 78], [172, 79], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [4, "\n", [172, 79], [172, 80], "        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n"], [5, "            ", [173, 0], [173, 12], "            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"\n"], [1, "raise", [173, 12], [173, 17], "            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"\n"], [1, "ValueError", [173, 18], [173, 28], "            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"\n"], [7, "(", [173, 28], [173, 29], "            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"\n"], [3, "\"start ({},{}) precedes previous end ({},{})\"", [173, 29], [173, 74], "            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"\n"], [23, ".", [174, 29], [174, 30], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "format", [174, 30], [174, 36], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [7, "(", [174, 36], [174, 37], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "row", [174, 37], [174, 40], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [12, ",", [174, 40], [174, 41], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "col", [174, 42], [174, 45], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [12, ",", [174, 45], [174, 46], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "self", [174, 47], [174, 51], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [23, ".", [174, 51], [174, 52], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "prev_row", [174, 52], [174, 60], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [12, ",", [174, 60], [174, 61], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "self", [174, 62], [174, 66], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [23, ".", [174, 66], [174, 67], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [1, "prev_col", [174, 67], [174, 75], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [8, ")", [174, 75], [174, 76], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [8, ")", [174, 76], [174, 77], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [4, "\n", [174, 77], [174, 78], "                             .format(row, col, self.prev_row, self.prev_col))\n"], [6, "", [175, 8], [175, 8], "        row_offset = row - self.prev_row\n"], [1, "row_offset", [175, 8], [175, 18], "        row_offset = row - self.prev_row\n"], [22, "=", [175, 19], [175, 20], "        row_offset = row - self.prev_row\n"], [1, "row", [175, 21], [175, 24], "        row_offset = row - self.prev_row\n"], [15, "-", [175, 25], [175, 26], "        row_offset = row - self.prev_row\n"], [1, "self", [175, 27], [175, 31], "        row_offset = row - self.prev_row\n"], [23, ".", [175, 31], [175, 32], "        row_offset = row - self.prev_row\n"], [1, "prev_row", [175, 32], [175, 40], "        row_offset = row - self.prev_row\n"], [4, "\n", [175, 40], [175, 41], "        row_offset = row - self.prev_row\n"], [1, "if", [176, 8], [176, 10], "        if row_offset:\n"], [1, "row_offset", [176, 11], [176, 21], "        if row_offset:\n"], [11, ":", [176, 21], [176, 22], "        if row_offset:\n"], [4, "\n", [176, 22], [176, 23], "        if row_offset:\n"], [5, "            ", [177, 0], [177, 12], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [1, "self", [177, 12], [177, 16], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [23, ".", [177, 16], [177, 17], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [1, "tokens", [177, 17], [177, 23], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [23, ".", [177, 23], [177, 24], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [1, "append", [177, 24], [177, 30], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [7, "(", [177, 30], [177, 31], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [3, "\"\\\\\\n\"", [177, 31], [177, 37], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [16, "*", [177, 38], [177, 39], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [1, "row_offset", [177, 40], [177, 50], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [8, ")", [177, 50], [177, 51], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [4, "\n", [177, 51], [177, 52], "            self.tokens.append(\"\\\\\\n\" * row_offset)\n"], [1, "self", [178, 12], [178, 16], "            self.prev_col = 0\n"], [23, ".", [178, 16], [178, 17], "            self.prev_col = 0\n"], [1, "prev_col", [178, 17], [178, 25], "            self.prev_col = 0\n"], [22, "=", [178, 26], [178, 27], "            self.prev_col = 0\n"], [2, "0", [178, 28], [178, 29], "            self.prev_col = 0\n"], [4, "\n", [178, 29], [178, 30], "            self.prev_col = 0\n"], [6, "", [179, 8], [179, 8], "        col_offset = col - self.prev_col\n"], [1, "col_offset", [179, 8], [179, 18], "        col_offset = col - self.prev_col\n"], [22, "=", [179, 19], [179, 20], "        col_offset = col - self.prev_col\n"], [1, "col", [179, 21], [179, 24], "        col_offset = col - self.prev_col\n"], [15, "-", [179, 25], [179, 26], "        col_offset = col - self.prev_col\n"], [1, "self", [179, 27], [179, 31], "        col_offset = col - self.prev_col\n"], [23, ".", [179, 31], [179, 32], "        col_offset = col - self.prev_col\n"], [1, "prev_col", [179, 32], [179, 40], "        col_offset = col - self.prev_col\n"], [4, "\n", [179, 40], [179, 41], "        col_offset = col - self.prev_col\n"], [1, "if", [180, 8], [180, 10], "        if col_offset:\n"], [1, "col_offset", [180, 11], [180, 21], "        if col_offset:\n"], [11, ":", [180, 21], [180, 22], "        if col_offset:\n"], [4, "\n", [180, 22], [180, 23], "        if col_offset:\n"], [5, "            ", [181, 0], [181, 12], "            self.tokens.append(\" \" * col_offset)\n"], [1, "self", [181, 12], [181, 16], "            self.tokens.append(\" \" * col_offset)\n"], [23, ".", [181, 16], [181, 17], "            self.tokens.append(\" \" * col_offset)\n"], [1, "tokens", [181, 17], [181, 23], "            self.tokens.append(\" \" * col_offset)\n"], [23, ".", [181, 23], [181, 24], "            self.tokens.append(\" \" * col_offset)\n"], [1, "append", [181, 24], [181, 30], "            self.tokens.append(\" \" * col_offset)\n"], [7, "(", [181, 30], [181, 31], "            self.tokens.append(\" \" * col_offset)\n"], [3, "\" \"", [181, 31], [181, 34], "            self.tokens.append(\" \" * col_offset)\n"], [16, "*", [181, 35], [181, 36], "            self.tokens.append(\" \" * col_offset)\n"], [1, "col_offset", [181, 37], [181, 47], "            self.tokens.append(\" \" * col_offset)\n"], [8, ")", [181, 47], [181, 48], "            self.tokens.append(\" \" * col_offset)\n"], [4, "\n", [181, 48], [181, 49], "            self.tokens.append(\" \" * col_offset)\n"], [6, "", [183, 4], [183, 4], "    def untokenize(self, iterable):\n"], [6, "", [183, 4], [183, 4], "    def untokenize(self, iterable):\n"], [1, "def", [183, 4], [183, 7], "    def untokenize(self, iterable):\n"], [1, "untokenize", [183, 8], [183, 18], "    def untokenize(self, iterable):\n"], [7, "(", [183, 18], [183, 19], "    def untokenize(self, iterable):\n"], [1, "self", [183, 19], [183, 23], "    def untokenize(self, iterable):\n"], [12, ",", [183, 23], [183, 24], "    def untokenize(self, iterable):\n"], [1, "iterable", [183, 25], [183, 33], "    def untokenize(self, iterable):\n"], [8, ")", [183, 33], [183, 34], "    def untokenize(self, iterable):\n"], [11, ":", [183, 34], [183, 35], "    def untokenize(self, iterable):\n"], [4, "\n", [183, 35], [183, 36], "    def untokenize(self, iterable):\n"], [5, "        ", [184, 0], [184, 8], "        it = iter(iterable)\n"], [1, "it", [184, 8], [184, 10], "        it = iter(iterable)\n"], [22, "=", [184, 11], [184, 12], "        it = iter(iterable)\n"], [1, "iter", [184, 13], [184, 17], "        it = iter(iterable)\n"], [7, "(", [184, 17], [184, 18], "        it = iter(iterable)\n"], [1, "iterable", [184, 18], [184, 26], "        it = iter(iterable)\n"], [8, ")", [184, 26], [184, 27], "        it = iter(iterable)\n"], [4, "\n", [184, 27], [184, 28], "        it = iter(iterable)\n"], [1, "indents", [185, 8], [185, 15], "        indents = []\n"], [22, "=", [185, 16], [185, 17], "        indents = []\n"], [9, "[", [185, 18], [185, 19], "        indents = []\n"], [10, "]", [185, 19], [185, 20], "        indents = []\n"], [4, "\n", [185, 20], [185, 21], "        indents = []\n"], [1, "startline", [186, 8], [186, 17], "        startline = False\n"], [22, "=", [186, 18], [186, 19], "        startline = False\n"], [1, "False", [186, 20], [186, 25], "        startline = False\n"], [4, "\n", [186, 25], [186, 26], "        startline = False\n"], [1, "for", [187, 8], [187, 11], "        for t in it:\n"], [1, "t", [187, 12], [187, 13], "        for t in it:\n"], [1, "in", [187, 14], [187, 16], "        for t in it:\n"], [1, "it", [187, 17], [187, 19], "        for t in it:\n"], [11, ":", [187, 19], [187, 20], "        for t in it:\n"], [4, "\n", [187, 20], [187, 21], "        for t in it:\n"], [5, "            ", [188, 0], [188, 12], "            if len(t) == 2:\n"], [1, "if", [188, 12], [188, 14], "            if len(t) == 2:\n"], [1, "len", [188, 15], [188, 18], "            if len(t) == 2:\n"], [7, "(", [188, 18], [188, 19], "            if len(t) == 2:\n"], [1, "t", [188, 19], [188, 20], "            if len(t) == 2:\n"], [8, ")", [188, 20], [188, 21], "            if len(t) == 2:\n"], [27, "==", [188, 22], [188, 24], "            if len(t) == 2:\n"], [2, "2", [188, 25], [188, 26], "            if len(t) == 2:\n"], [11, ":", [188, 26], [188, 27], "            if len(t) == 2:\n"], [4, "\n", [188, 27], [188, 28], "            if len(t) == 2:\n"], [5, "                ", [189, 0], [189, 16], "                self.compat(t, it)\n"], [1, "self", [189, 16], [189, 20], "                self.compat(t, it)\n"], [23, ".", [189, 20], [189, 21], "                self.compat(t, it)\n"], [1, "compat", [189, 21], [189, 27], "                self.compat(t, it)\n"], [7, "(", [189, 27], [189, 28], "                self.compat(t, it)\n"], [1, "t", [189, 28], [189, 29], "                self.compat(t, it)\n"], [12, ",", [189, 29], [189, 30], "                self.compat(t, it)\n"], [1, "it", [189, 31], [189, 33], "                self.compat(t, it)\n"], [8, ")", [189, 33], [189, 34], "                self.compat(t, it)\n"], [4, "\n", [189, 34], [189, 35], "                self.compat(t, it)\n"], [1, "break", [190, 16], [190, 21], "                break\n"], [4, "\n", [190, 21], [190, 22], "                break\n"], [6, "", [191, 12], [191, 12], "            tok_type, token, start, end, line = t\n"], [1, "tok_type", [191, 12], [191, 20], "            tok_type, token, start, end, line = t\n"], [12, ",", [191, 20], [191, 21], "            tok_type, token, start, end, line = t\n"], [1, "token", [191, 22], [191, 27], "            tok_type, token, start, end, line = t\n"], [12, ",", [191, 27], [191, 28], "            tok_type, token, start, end, line = t\n"], [1, "start", [191, 29], [191, 34], "            tok_type, token, start, end, line = t\n"], [12, ",", [191, 34], [191, 35], "            tok_type, token, start, end, line = t\n"], [1, "end", [191, 36], [191, 39], "            tok_type, token, start, end, line = t\n"], [12, ",", [191, 39], [191, 40], "            tok_type, token, start, end, line = t\n"], [1, "line", [191, 41], [191, 45], "            tok_type, token, start, end, line = t\n"], [22, "=", [191, 46], [191, 47], "            tok_type, token, start, end, line = t\n"], [1, "t", [191, 48], [191, 49], "            tok_type, token, start, end, line = t\n"], [4, "\n", [191, 49], [191, 50], "            tok_type, token, start, end, line = t\n"], [1, "if", [192, 12], [192, 14], "            if tok_type == ENCODING:\n"], [1, "tok_type", [192, 15], [192, 23], "            if tok_type == ENCODING:\n"], [27, "==", [192, 24], [192, 26], "            if tok_type == ENCODING:\n"], [1, "ENCODING", [192, 27], [192, 35], "            if tok_type == ENCODING:\n"], [11, ":", [192, 35], [192, 36], "            if tok_type == ENCODING:\n"], [4, "\n", [192, 36], [192, 37], "            if tok_type == ENCODING:\n"], [5, "                ", [193, 0], [193, 16], "                self.encoding = token\n"], [1, "self", [193, 16], [193, 20], "                self.encoding = token\n"], [23, ".", [193, 20], [193, 21], "                self.encoding = token\n"], [1, "encoding", [193, 21], [193, 29], "                self.encoding = token\n"], [22, "=", [193, 30], [193, 31], "                self.encoding = token\n"], [1, "token", [193, 32], [193, 37], "                self.encoding = token\n"], [4, "\n", [193, 37], [193, 38], "                self.encoding = token\n"], [1, "continue", [194, 16], [194, 24], "                continue\n"], [4, "\n", [194, 24], [194, 25], "                continue\n"], [6, "", [195, 12], [195, 12], "            if tok_type == ENDMARKER:\n"], [1, "if", [195, 12], [195, 14], "            if tok_type == ENDMARKER:\n"], [1, "tok_type", [195, 15], [195, 23], "            if tok_type == ENDMARKER:\n"], [27, "==", [195, 24], [195, 26], "            if tok_type == ENDMARKER:\n"], [1, "ENDMARKER", [195, 27], [195, 36], "            if tok_type == ENDMARKER:\n"], [11, ":", [195, 36], [195, 37], "            if tok_type == ENDMARKER:\n"], [4, "\n", [195, 37], [195, 38], "            if tok_type == ENDMARKER:\n"], [5, "                ", [196, 0], [196, 16], "                break\n"], [1, "break", [196, 16], [196, 21], "                break\n"], [4, "\n", [196, 21], [196, 22], "                break\n"], [6, "", [197, 12], [197, 12], "            if tok_type == INDENT:\n"], [1, "if", [197, 12], [197, 14], "            if tok_type == INDENT:\n"], [1, "tok_type", [197, 15], [197, 23], "            if tok_type == INDENT:\n"], [27, "==", [197, 24], [197, 26], "            if tok_type == INDENT:\n"], [1, "INDENT", [197, 27], [197, 33], "            if tok_type == INDENT:\n"], [11, ":", [197, 33], [197, 34], "            if tok_type == INDENT:\n"], [4, "\n", [197, 34], [197, 35], "            if tok_type == INDENT:\n"], [5, "                ", [198, 0], [198, 16], "                indents.append(token)\n"], [1, "indents", [198, 16], [198, 23], "                indents.append(token)\n"], [23, ".", [198, 23], [198, 24], "                indents.append(token)\n"], [1, "append", [198, 24], [198, 30], "                indents.append(token)\n"], [7, "(", [198, 30], [198, 31], "                indents.append(token)\n"], [1, "token", [198, 31], [198, 36], "                indents.append(token)\n"], [8, ")", [198, 36], [198, 37], "                indents.append(token)\n"], [4, "\n", [198, 37], [198, 38], "                indents.append(token)\n"], [1, "continue", [199, 16], [199, 24], "                continue\n"], [4, "\n", [199, 24], [199, 25], "                continue\n"], [6, "", [200, 12], [200, 12], "            elif tok_type == DEDENT:\n"], [1, "elif", [200, 12], [200, 16], "            elif tok_type == DEDENT:\n"], [1, "tok_type", [200, 17], [200, 25], "            elif tok_type == DEDENT:\n"], [27, "==", [200, 26], [200, 28], "            elif tok_type == DEDENT:\n"], [1, "DEDENT", [200, 29], [200, 35], "            elif tok_type == DEDENT:\n"], [11, ":", [200, 35], [200, 36], "            elif tok_type == DEDENT:\n"], [4, "\n", [200, 36], [200, 37], "            elif tok_type == DEDENT:\n"], [5, "                ", [201, 0], [201, 16], "                indents.pop()\n"], [1, "indents", [201, 16], [201, 23], "                indents.pop()\n"], [23, ".", [201, 23], [201, 24], "                indents.pop()\n"], [1, "pop", [201, 24], [201, 27], "                indents.pop()\n"], [7, "(", [201, 27], [201, 28], "                indents.pop()\n"], [8, ")", [201, 28], [201, 29], "                indents.pop()\n"], [4, "\n", [201, 29], [201, 30], "                indents.pop()\n"], [1, "self", [202, 16], [202, 20], "                self.prev_row, self.prev_col = end\n"], [23, ".", [202, 20], [202, 21], "                self.prev_row, self.prev_col = end\n"], [1, "prev_row", [202, 21], [202, 29], "                self.prev_row, self.prev_col = end\n"], [12, ",", [202, 29], [202, 30], "                self.prev_row, self.prev_col = end\n"], [1, "self", [202, 31], [202, 35], "                self.prev_row, self.prev_col = end\n"], [23, ".", [202, 35], [202, 36], "                self.prev_row, self.prev_col = end\n"], [1, "prev_col", [202, 36], [202, 44], "                self.prev_row, self.prev_col = end\n"], [22, "=", [202, 45], [202, 46], "                self.prev_row, self.prev_col = end\n"], [1, "end", [202, 47], [202, 50], "                self.prev_row, self.prev_col = end\n"], [4, "\n", [202, 50], [202, 51], "                self.prev_row, self.prev_col = end\n"], [1, "continue", [203, 16], [203, 24], "                continue\n"], [4, "\n", [203, 24], [203, 25], "                continue\n"], [6, "", [204, 12], [204, 12], "            elif tok_type in (NEWLINE, NL):\n"], [1, "elif", [204, 12], [204, 16], "            elif tok_type in (NEWLINE, NL):\n"], [1, "tok_type", [204, 17], [204, 25], "            elif tok_type in (NEWLINE, NL):\n"], [1, "in", [204, 26], [204, 28], "            elif tok_type in (NEWLINE, NL):\n"], [7, "(", [204, 29], [204, 30], "            elif tok_type in (NEWLINE, NL):\n"], [1, "NEWLINE", [204, 30], [204, 37], "            elif tok_type in (NEWLINE, NL):\n"], [12, ",", [204, 37], [204, 38], "            elif tok_type in (NEWLINE, NL):\n"], [1, "NL", [204, 39], [204, 41], "            elif tok_type in (NEWLINE, NL):\n"], [8, ")", [204, 41], [204, 42], "            elif tok_type in (NEWLINE, NL):\n"], [11, ":", [204, 42], [204, 43], "            elif tok_type in (NEWLINE, NL):\n"], [4, "\n", [204, 43], [204, 44], "            elif tok_type in (NEWLINE, NL):\n"], [5, "                ", [205, 0], [205, 16], "                startline = True\n"], [1, "startline", [205, 16], [205, 25], "                startline = True\n"], [22, "=", [205, 26], [205, 27], "                startline = True\n"], [1, "True", [205, 28], [205, 32], "                startline = True\n"], [4, "\n", [205, 32], [205, 33], "                startline = True\n"], [6, "", [206, 12], [206, 12], "            elif startline and indents:\n"], [1, "elif", [206, 12], [206, 16], "            elif startline and indents:\n"], [1, "startline", [206, 17], [206, 26], "            elif startline and indents:\n"], [1, "and", [206, 27], [206, 30], "            elif startline and indents:\n"], [1, "indents", [206, 31], [206, 38], "            elif startline and indents:\n"], [11, ":", [206, 38], [206, 39], "            elif startline and indents:\n"], [4, "\n", [206, 39], [206, 40], "            elif startline and indents:\n"], [5, "                ", [207, 0], [207, 16], "                indent = indents[-1]\n"], [1, "indent", [207, 16], [207, 22], "                indent = indents[-1]\n"], [22, "=", [207, 23], [207, 24], "                indent = indents[-1]\n"], [1, "indents", [207, 25], [207, 32], "                indent = indents[-1]\n"], [9, "[", [207, 32], [207, 33], "                indent = indents[-1]\n"], [15, "-", [207, 33], [207, 34], "                indent = indents[-1]\n"], [2, "1", [207, 34], [207, 35], "                indent = indents[-1]\n"], [10, "]", [207, 35], [207, 36], "                indent = indents[-1]\n"], [4, "\n", [207, 36], [207, 37], "                indent = indents[-1]\n"], [1, "if", [208, 16], [208, 18], "                if start[1] >= len(indent):\n"], [1, "start", [208, 19], [208, 24], "                if start[1] >= len(indent):\n"], [9, "[", [208, 24], [208, 25], "                if start[1] >= len(indent):\n"], [2, "1", [208, 25], [208, 26], "                if start[1] >= len(indent):\n"], [10, "]", [208, 26], [208, 27], "                if start[1] >= len(indent):\n"], [30, ">=", [208, 28], [208, 30], "                if start[1] >= len(indent):\n"], [1, "len", [208, 31], [208, 34], "                if start[1] >= len(indent):\n"], [7, "(", [208, 34], [208, 35], "                if start[1] >= len(indent):\n"], [1, "indent", [208, 35], [208, 41], "                if start[1] >= len(indent):\n"], [8, ")", [208, 41], [208, 42], "                if start[1] >= len(indent):\n"], [11, ":", [208, 42], [208, 43], "                if start[1] >= len(indent):\n"], [4, "\n", [208, 43], [208, 44], "                if start[1] >= len(indent):\n"], [5, "                    ", [209, 0], [209, 20], "                    self.tokens.append(indent)\n"], [1, "self", [209, 20], [209, 24], "                    self.tokens.append(indent)\n"], [23, ".", [209, 24], [209, 25], "                    self.tokens.append(indent)\n"], [1, "tokens", [209, 25], [209, 31], "                    self.tokens.append(indent)\n"], [23, ".", [209, 31], [209, 32], "                    self.tokens.append(indent)\n"], [1, "append", [209, 32], [209, 38], "                    self.tokens.append(indent)\n"], [7, "(", [209, 38], [209, 39], "                    self.tokens.append(indent)\n"], [1, "indent", [209, 39], [209, 45], "                    self.tokens.append(indent)\n"], [8, ")", [209, 45], [209, 46], "                    self.tokens.append(indent)\n"], [4, "\n", [209, 46], [209, 47], "                    self.tokens.append(indent)\n"], [1, "self", [210, 20], [210, 24], "                    self.prev_col = len(indent)\n"], [23, ".", [210, 24], [210, 25], "                    self.prev_col = len(indent)\n"], [1, "prev_col", [210, 25], [210, 33], "                    self.prev_col = len(indent)\n"], [22, "=", [210, 34], [210, 35], "                    self.prev_col = len(indent)\n"], [1, "len", [210, 36], [210, 39], "                    self.prev_col = len(indent)\n"], [7, "(", [210, 39], [210, 40], "                    self.prev_col = len(indent)\n"], [1, "indent", [210, 40], [210, 46], "                    self.prev_col = len(indent)\n"], [8, ")", [210, 46], [210, 47], "                    self.prev_col = len(indent)\n"], [4, "\n", [210, 47], [210, 48], "                    self.prev_col = len(indent)\n"], [6, "", [211, 16], [211, 16], "                startline = False\n"], [1, "startline", [211, 16], [211, 25], "                startline = False\n"], [22, "=", [211, 26], [211, 27], "                startline = False\n"], [1, "False", [211, 28], [211, 33], "                startline = False\n"], [4, "\n", [211, 33], [211, 34], "                startline = False\n"], [6, "", [212, 12], [212, 12], "            self.add_whitespace(start)\n"], [1, "self", [212, 12], [212, 16], "            self.add_whitespace(start)\n"], [23, ".", [212, 16], [212, 17], "            self.add_whitespace(start)\n"], [1, "add_whitespace", [212, 17], [212, 31], "            self.add_whitespace(start)\n"], [7, "(", [212, 31], [212, 32], "            self.add_whitespace(start)\n"], [1, "start", [212, 32], [212, 37], "            self.add_whitespace(start)\n"], [8, ")", [212, 37], [212, 38], "            self.add_whitespace(start)\n"], [4, "\n", [212, 38], [212, 39], "            self.add_whitespace(start)\n"], [1, "self", [213, 12], [213, 16], "            self.tokens.append(token)\n"], [23, ".", [213, 16], [213, 17], "            self.tokens.append(token)\n"], [1, "tokens", [213, 17], [213, 23], "            self.tokens.append(token)\n"], [23, ".", [213, 23], [213, 24], "            self.tokens.append(token)\n"], [1, "append", [213, 24], [213, 30], "            self.tokens.append(token)\n"], [7, "(", [213, 30], [213, 31], "            self.tokens.append(token)\n"], [1, "token", [213, 31], [213, 36], "            self.tokens.append(token)\n"], [8, ")", [213, 36], [213, 37], "            self.tokens.append(token)\n"], [4, "\n", [213, 37], [213, 38], "            self.tokens.append(token)\n"], [1, "self", [214, 12], [214, 16], "            self.prev_row, self.prev_col = end\n"], [23, ".", [214, 16], [214, 17], "            self.prev_row, self.prev_col = end\n"], [1, "prev_row", [214, 17], [214, 25], "            self.prev_row, self.prev_col = end\n"], [12, ",", [214, 25], [214, 26], "            self.prev_row, self.prev_col = end\n"], [1, "self", [214, 27], [214, 31], "            self.prev_row, self.prev_col = end\n"], [23, ".", [214, 31], [214, 32], "            self.prev_row, self.prev_col = end\n"], [1, "prev_col", [214, 32], [214, 40], "            self.prev_row, self.prev_col = end\n"], [22, "=", [214, 41], [214, 42], "            self.prev_row, self.prev_col = end\n"], [1, "end", [214, 43], [214, 46], "            self.prev_row, self.prev_col = end\n"], [4, "\n", [214, 46], [214, 47], "            self.prev_row, self.prev_col = end\n"], [1, "if", [215, 12], [215, 14], "            if tok_type in (NEWLINE, NL):\n"], [1, "tok_type", [215, 15], [215, 23], "            if tok_type in (NEWLINE, NL):\n"], [1, "in", [215, 24], [215, 26], "            if tok_type in (NEWLINE, NL):\n"], [7, "(", [215, 27], [215, 28], "            if tok_type in (NEWLINE, NL):\n"], [1, "NEWLINE", [215, 28], [215, 35], "            if tok_type in (NEWLINE, NL):\n"], [12, ",", [215, 35], [215, 36], "            if tok_type in (NEWLINE, NL):\n"], [1, "NL", [215, 37], [215, 39], "            if tok_type in (NEWLINE, NL):\n"], [8, ")", [215, 39], [215, 40], "            if tok_type in (NEWLINE, NL):\n"], [11, ":", [215, 40], [215, 41], "            if tok_type in (NEWLINE, NL):\n"], [4, "\n", [215, 41], [215, 42], "            if tok_type in (NEWLINE, NL):\n"], [5, "                ", [216, 0], [216, 16], "                self.prev_row += 1\n"], [1, "self", [216, 16], [216, 20], "                self.prev_row += 1\n"], [23, ".", [216, 20], [216, 21], "                self.prev_row += 1\n"], [1, "prev_row", [216, 21], [216, 29], "                self.prev_row += 1\n"], [36, "+=", [216, 30], [216, 32], "                self.prev_row += 1\n"], [2, "1", [216, 33], [216, 34], "                self.prev_row += 1\n"], [4, "\n", [216, 34], [216, 35], "                self.prev_row += 1\n"], [1, "self", [217, 16], [217, 20], "                self.prev_col = 0\n"], [23, ".", [217, 20], [217, 21], "                self.prev_col = 0\n"], [1, "prev_col", [217, 21], [217, 29], "                self.prev_col = 0\n"], [22, "=", [217, 30], [217, 31], "                self.prev_col = 0\n"], [2, "0", [217, 32], [217, 33], "                self.prev_col = 0\n"], [4, "\n", [217, 33], [217, 34], "                self.prev_col = 0\n"], [6, "", [218, 8], [218, 8], "        return \"\".join(self.tokens)\n"], [6, "", [218, 8], [218, 8], "        return \"\".join(self.tokens)\n"], [1, "return", [218, 8], [218, 14], "        return \"\".join(self.tokens)\n"], [3, "\"\"", [218, 15], [218, 17], "        return \"\".join(self.tokens)\n"], [23, ".", [218, 17], [218, 18], "        return \"\".join(self.tokens)\n"], [1, "join", [218, 18], [218, 22], "        return \"\".join(self.tokens)\n"], [7, "(", [218, 22], [218, 23], "        return \"\".join(self.tokens)\n"], [1, "self", [218, 23], [218, 27], "        return \"\".join(self.tokens)\n"], [23, ".", [218, 27], [218, 28], "        return \"\".join(self.tokens)\n"], [1, "tokens", [218, 28], [218, 34], "        return \"\".join(self.tokens)\n"], [8, ")", [218, 34], [218, 35], "        return \"\".join(self.tokens)\n"], [4, "\n", [218, 35], [218, 36], "        return \"\".join(self.tokens)\n"], [6, "", [220, 4], [220, 4], "    def compat(self, token, iterable):\n"], [1, "def", [220, 4], [220, 7], "    def compat(self, token, iterable):\n"], [1, "compat", [220, 8], [220, 14], "    def compat(self, token, iterable):\n"], [7, "(", [220, 14], [220, 15], "    def compat(self, token, iterable):\n"], [1, "self", [220, 15], [220, 19], "    def compat(self, token, iterable):\n"], [12, ",", [220, 19], [220, 20], "    def compat(self, token, iterable):\n"], [1, "token", [220, 21], [220, 26], "    def compat(self, token, iterable):\n"], [12, ",", [220, 26], [220, 27], "    def compat(self, token, iterable):\n"], [1, "iterable", [220, 28], [220, 36], "    def compat(self, token, iterable):\n"], [8, ")", [220, 36], [220, 37], "    def compat(self, token, iterable):\n"], [11, ":", [220, 37], [220, 38], "    def compat(self, token, iterable):\n"], [4, "\n", [220, 38], [220, 39], "    def compat(self, token, iterable):\n"], [5, "        ", [221, 0], [221, 8], "        indents = []\n"], [1, "indents", [221, 8], [221, 15], "        indents = []\n"], [22, "=", [221, 16], [221, 17], "        indents = []\n"], [9, "[", [221, 18], [221, 19], "        indents = []\n"], [10, "]", [221, 19], [221, 20], "        indents = []\n"], [4, "\n", [221, 20], [221, 21], "        indents = []\n"], [1, "toks_append", [222, 8], [222, 19], "        toks_append = self.tokens.append\n"], [22, "=", [222, 20], [222, 21], "        toks_append = self.tokens.append\n"], [1, "self", [222, 22], [222, 26], "        toks_append = self.tokens.append\n"], [23, ".", [222, 26], [222, 27], "        toks_append = self.tokens.append\n"], [1, "tokens", [222, 27], [222, 33], "        toks_append = self.tokens.append\n"], [23, ".", [222, 33], [222, 34], "        toks_append = self.tokens.append\n"], [1, "append", [222, 34], [222, 40], "        toks_append = self.tokens.append\n"], [4, "\n", [222, 40], [222, 41], "        toks_append = self.tokens.append\n"], [1, "startline", [223, 8], [223, 17], "        startline = token[0] in (NEWLINE, NL)\n"], [22, "=", [223, 18], [223, 19], "        startline = token[0] in (NEWLINE, NL)\n"], [1, "token", [223, 20], [223, 25], "        startline = token[0] in (NEWLINE, NL)\n"], [9, "[", [223, 25], [223, 26], "        startline = token[0] in (NEWLINE, NL)\n"], [2, "0", [223, 26], [223, 27], "        startline = token[0] in (NEWLINE, NL)\n"], [10, "]", [223, 27], [223, 28], "        startline = token[0] in (NEWLINE, NL)\n"], [1, "in", [223, 29], [223, 31], "        startline = token[0] in (NEWLINE, NL)\n"], [7, "(", [223, 32], [223, 33], "        startline = token[0] in (NEWLINE, NL)\n"], [1, "NEWLINE", [223, 33], [223, 40], "        startline = token[0] in (NEWLINE, NL)\n"], [12, ",", [223, 40], [223, 41], "        startline = token[0] in (NEWLINE, NL)\n"], [1, "NL", [223, 42], [223, 44], "        startline = token[0] in (NEWLINE, NL)\n"], [8, ")", [223, 44], [223, 45], "        startline = token[0] in (NEWLINE, NL)\n"], [4, "\n", [223, 45], [223, 46], "        startline = token[0] in (NEWLINE, NL)\n"], [1, "prevstring", [224, 8], [224, 18], "        prevstring = False\n"], [22, "=", [224, 19], [224, 20], "        prevstring = False\n"], [1, "False", [224, 21], [224, 26], "        prevstring = False\n"], [4, "\n", [224, 26], [224, 27], "        prevstring = False\n"], [1, "for", [226, 8], [226, 11], "        for tok in _itertools.chain([token], iterable):\n"], [1, "tok", [226, 12], [226, 15], "        for tok in _itertools.chain([token], iterable):\n"], [1, "in", [226, 16], [226, 18], "        for tok in _itertools.chain([token], iterable):\n"], [1, "_itertools", [226, 19], [226, 29], "        for tok in _itertools.chain([token], iterable):\n"], [23, ".", [226, 29], [226, 30], "        for tok in _itertools.chain([token], iterable):\n"], [1, "chain", [226, 30], [226, 35], "        for tok in _itertools.chain([token], iterable):\n"], [7, "(", [226, 35], [226, 36], "        for tok in _itertools.chain([token], iterable):\n"], [9, "[", [226, 36], [226, 37], "        for tok in _itertools.chain([token], iterable):\n"], [1, "token", [226, 37], [226, 42], "        for tok in _itertools.chain([token], iterable):\n"], [10, "]", [226, 42], [226, 43], "        for tok in _itertools.chain([token], iterable):\n"], [12, ",", [226, 43], [226, 44], "        for tok in _itertools.chain([token], iterable):\n"], [1, "iterable", [226, 45], [226, 53], "        for tok in _itertools.chain([token], iterable):\n"], [8, ")", [226, 53], [226, 54], "        for tok in _itertools.chain([token], iterable):\n"], [11, ":", [226, 54], [226, 55], "        for tok in _itertools.chain([token], iterable):\n"], [4, "\n", [226, 55], [226, 56], "        for tok in _itertools.chain([token], iterable):\n"], [5, "            ", [227, 0], [227, 12], "            toknum, tokval = tok[:2]\n"], [1, "toknum", [227, 12], [227, 18], "            toknum, tokval = tok[:2]\n"], [12, ",", [227, 18], [227, 19], "            toknum, tokval = tok[:2]\n"], [1, "tokval", [227, 20], [227, 26], "            toknum, tokval = tok[:2]\n"], [22, "=", [227, 27], [227, 28], "            toknum, tokval = tok[:2]\n"], [1, "tok", [227, 29], [227, 32], "            toknum, tokval = tok[:2]\n"], [9, "[", [227, 32], [227, 33], "            toknum, tokval = tok[:2]\n"], [11, ":", [227, 33], [227, 34], "            toknum, tokval = tok[:2]\n"], [2, "2", [227, 34], [227, 35], "            toknum, tokval = tok[:2]\n"], [10, "]", [227, 35], [227, 36], "            toknum, tokval = tok[:2]\n"], [4, "\n", [227, 36], [227, 37], "            toknum, tokval = tok[:2]\n"], [1, "if", [228, 12], [228, 14], "            if toknum == ENCODING:\n"], [1, "toknum", [228, 15], [228, 21], "            if toknum == ENCODING:\n"], [27, "==", [228, 22], [228, 24], "            if toknum == ENCODING:\n"], [1, "ENCODING", [228, 25], [228, 33], "            if toknum == ENCODING:\n"], [11, ":", [228, 33], [228, 34], "            if toknum == ENCODING:\n"], [4, "\n", [228, 34], [228, 35], "            if toknum == ENCODING:\n"], [5, "                ", [229, 0], [229, 16], "                self.encoding = tokval\n"], [1, "self", [229, 16], [229, 20], "                self.encoding = tokval\n"], [23, ".", [229, 20], [229, 21], "                self.encoding = tokval\n"], [1, "encoding", [229, 21], [229, 29], "                self.encoding = tokval\n"], [22, "=", [229, 30], [229, 31], "                self.encoding = tokval\n"], [1, "tokval", [229, 32], [229, 38], "                self.encoding = tokval\n"], [4, "\n", [229, 38], [229, 39], "                self.encoding = tokval\n"], [1, "continue", [230, 16], [230, 24], "                continue\n"], [4, "\n", [230, 24], [230, 25], "                continue\n"], [6, "", [232, 12], [232, 12], "            if toknum in (NAME, NUMBER):\n"], [1, "if", [232, 12], [232, 14], "            if toknum in (NAME, NUMBER):\n"], [1, "toknum", [232, 15], [232, 21], "            if toknum in (NAME, NUMBER):\n"], [1, "in", [232, 22], [232, 24], "            if toknum in (NAME, NUMBER):\n"], [7, "(", [232, 25], [232, 26], "            if toknum in (NAME, NUMBER):\n"], [1, "NAME", [232, 26], [232, 30], "            if toknum in (NAME, NUMBER):\n"], [12, ",", [232, 30], [232, 31], "            if toknum in (NAME, NUMBER):\n"], [1, "NUMBER", [232, 32], [232, 38], "            if toknum in (NAME, NUMBER):\n"], [8, ")", [232, 38], [232, 39], "            if toknum in (NAME, NUMBER):\n"], [11, ":", [232, 39], [232, 40], "            if toknum in (NAME, NUMBER):\n"], [4, "\n", [232, 40], [232, 41], "            if toknum in (NAME, NUMBER):\n"], [5, "                ", [233, 0], [233, 16], "                tokval += ' '\n"], [1, "tokval", [233, 16], [233, 22], "                tokval += ' '\n"], [36, "+=", [233, 23], [233, 25], "                tokval += ' '\n"], [3, "' '", [233, 26], [233, 29], "                tokval += ' '\n"], [4, "\n", [233, 29], [233, 30], "                tokval += ' '\n"], [6, "", [236, 12], [236, 12], "            if toknum == STRING:\n"], [1, "if", [236, 12], [236, 14], "            if toknum == STRING:\n"], [1, "toknum", [236, 15], [236, 21], "            if toknum == STRING:\n"], [27, "==", [236, 22], [236, 24], "            if toknum == STRING:\n"], [1, "STRING", [236, 25], [236, 31], "            if toknum == STRING:\n"], [11, ":", [236, 31], [236, 32], "            if toknum == STRING:\n"], [4, "\n", [236, 32], [236, 33], "            if toknum == STRING:\n"], [5, "                ", [237, 0], [237, 16], "                if prevstring:\n"], [1, "if", [237, 16], [237, 18], "                if prevstring:\n"], [1, "prevstring", [237, 19], [237, 29], "                if prevstring:\n"], [11, ":", [237, 29], [237, 30], "                if prevstring:\n"], [4, "\n", [237, 30], [237, 31], "                if prevstring:\n"], [5, "                    ", [238, 0], [238, 20], "                    tokval = ' ' + tokval\n"], [1, "tokval", [238, 20], [238, 26], "                    tokval = ' ' + tokval\n"], [22, "=", [238, 27], [238, 28], "                    tokval = ' ' + tokval\n"], [3, "' '", [238, 29], [238, 32], "                    tokval = ' ' + tokval\n"], [14, "+", [238, 33], [238, 34], "                    tokval = ' ' + tokval\n"], [1, "tokval", [238, 35], [238, 41], "                    tokval = ' ' + tokval\n"], [4, "\n", [238, 41], [238, 42], "                    tokval = ' ' + tokval\n"], [6, "", [239, 16], [239, 16], "                prevstring = True\n"], [1, "prevstring", [239, 16], [239, 26], "                prevstring = True\n"], [22, "=", [239, 27], [239, 28], "                prevstring = True\n"], [1, "True", [239, 29], [239, 33], "                prevstring = True\n"], [4, "\n", [239, 33], [239, 34], "                prevstring = True\n"], [6, "", [240, 12], [240, 12], "            else:\n"], [1, "else", [240, 12], [240, 16], "            else:\n"], [11, ":", [240, 16], [240, 17], "            else:\n"], [4, "\n", [240, 17], [240, 18], "            else:\n"], [5, "                ", [241, 0], [241, 16], "                prevstring = False\n"], [1, "prevstring", [241, 16], [241, 26], "                prevstring = False\n"], [22, "=", [241, 27], [241, 28], "                prevstring = False\n"], [1, "False", [241, 29], [241, 34], "                prevstring = False\n"], [4, "\n", [241, 34], [241, 35], "                prevstring = False\n"], [6, "", [243, 12], [243, 12], "            if toknum == INDENT:\n"], [1, "if", [243, 12], [243, 14], "            if toknum == INDENT:\n"], [1, "toknum", [243, 15], [243, 21], "            if toknum == INDENT:\n"], [27, "==", [243, 22], [243, 24], "            if toknum == INDENT:\n"], [1, "INDENT", [243, 25], [243, 31], "            if toknum == INDENT:\n"], [11, ":", [243, 31], [243, 32], "            if toknum == INDENT:\n"], [4, "\n", [243, 32], [243, 33], "            if toknum == INDENT:\n"], [5, "                ", [244, 0], [244, 16], "                indents.append(tokval)\n"], [1, "indents", [244, 16], [244, 23], "                indents.append(tokval)\n"], [23, ".", [244, 23], [244, 24], "                indents.append(tokval)\n"], [1, "append", [244, 24], [244, 30], "                indents.append(tokval)\n"], [7, "(", [244, 30], [244, 31], "                indents.append(tokval)\n"], [1, "tokval", [244, 31], [244, 37], "                indents.append(tokval)\n"], [8, ")", [244, 37], [244, 38], "                indents.append(tokval)\n"], [4, "\n", [244, 38], [244, 39], "                indents.append(tokval)\n"], [1, "continue", [245, 16], [245, 24], "                continue\n"], [4, "\n", [245, 24], [245, 25], "                continue\n"], [6, "", [246, 12], [246, 12], "            elif toknum == DEDENT:\n"], [1, "elif", [246, 12], [246, 16], "            elif toknum == DEDENT:\n"], [1, "toknum", [246, 17], [246, 23], "            elif toknum == DEDENT:\n"], [27, "==", [246, 24], [246, 26], "            elif toknum == DEDENT:\n"], [1, "DEDENT", [246, 27], [246, 33], "            elif toknum == DEDENT:\n"], [11, ":", [246, 33], [246, 34], "            elif toknum == DEDENT:\n"], [4, "\n", [246, 34], [246, 35], "            elif toknum == DEDENT:\n"], [5, "                ", [247, 0], [247, 16], "                indents.pop()\n"], [1, "indents", [247, 16], [247, 23], "                indents.pop()\n"], [23, ".", [247, 23], [247, 24], "                indents.pop()\n"], [1, "pop", [247, 24], [247, 27], "                indents.pop()\n"], [7, "(", [247, 27], [247, 28], "                indents.pop()\n"], [8, ")", [247, 28], [247, 29], "                indents.pop()\n"], [4, "\n", [247, 29], [247, 30], "                indents.pop()\n"], [1, "continue", [248, 16], [248, 24], "                continue\n"], [4, "\n", [248, 24], [248, 25], "                continue\n"], [6, "", [249, 12], [249, 12], "            elif toknum in (NEWLINE, NL):\n"], [1, "elif", [249, 12], [249, 16], "            elif toknum in (NEWLINE, NL):\n"], [1, "toknum", [249, 17], [249, 23], "            elif toknum in (NEWLINE, NL):\n"], [1, "in", [249, 24], [249, 26], "            elif toknum in (NEWLINE, NL):\n"], [7, "(", [249, 27], [249, 28], "            elif toknum in (NEWLINE, NL):\n"], [1, "NEWLINE", [249, 28], [249, 35], "            elif toknum in (NEWLINE, NL):\n"], [12, ",", [249, 35], [249, 36], "            elif toknum in (NEWLINE, NL):\n"], [1, "NL", [249, 37], [249, 39], "            elif toknum in (NEWLINE, NL):\n"], [8, ")", [249, 39], [249, 40], "            elif toknum in (NEWLINE, NL):\n"], [11, ":", [249, 40], [249, 41], "            elif toknum in (NEWLINE, NL):\n"], [4, "\n", [249, 41], [249, 42], "            elif toknum in (NEWLINE, NL):\n"], [5, "                ", [250, 0], [250, 16], "                startline = True\n"], [1, "startline", [250, 16], [250, 25], "                startline = True\n"], [22, "=", [250, 26], [250, 27], "                startline = True\n"], [1, "True", [250, 28], [250, 32], "                startline = True\n"], [4, "\n", [250, 32], [250, 33], "                startline = True\n"], [6, "", [251, 12], [251, 12], "            elif startline and indents:\n"], [1, "elif", [251, 12], [251, 16], "            elif startline and indents:\n"], [1, "startline", [251, 17], [251, 26], "            elif startline and indents:\n"], [1, "and", [251, 27], [251, 30], "            elif startline and indents:\n"], [1, "indents", [251, 31], [251, 38], "            elif startline and indents:\n"], [11, ":", [251, 38], [251, 39], "            elif startline and indents:\n"], [4, "\n", [251, 39], [251, 40], "            elif startline and indents:\n"], [5, "                ", [252, 0], [252, 16], "                toks_append(indents[-1])\n"], [1, "toks_append", [252, 16], [252, 27], "                toks_append(indents[-1])\n"], [7, "(", [252, 27], [252, 28], "                toks_append(indents[-1])\n"], [1, "indents", [252, 28], [252, 35], "                toks_append(indents[-1])\n"], [9, "[", [252, 35], [252, 36], "                toks_append(indents[-1])\n"], [15, "-", [252, 36], [252, 37], "                toks_append(indents[-1])\n"], [2, "1", [252, 37], [252, 38], "                toks_append(indents[-1])\n"], [10, "]", [252, 38], [252, 39], "                toks_append(indents[-1])\n"], [8, ")", [252, 39], [252, 40], "                toks_append(indents[-1])\n"], [4, "\n", [252, 40], [252, 41], "                toks_append(indents[-1])\n"], [1, "startline", [253, 16], [253, 25], "                startline = False\n"], [22, "=", [253, 26], [253, 27], "                startline = False\n"], [1, "False", [253, 28], [253, 33], "                startline = False\n"], [4, "\n", [253, 33], [253, 34], "                startline = False\n"], [6, "", [254, 12], [254, 12], "            toks_append(tokval)\n"], [1, "toks_append", [254, 12], [254, 23], "            toks_append(tokval)\n"], [7, "(", [254, 23], [254, 24], "            toks_append(tokval)\n"], [1, "tokval", [254, 24], [254, 30], "            toks_append(tokval)\n"], [8, ")", [254, 30], [254, 31], "            toks_append(tokval)\n"], [4, "\n", [254, 31], [254, 32], "            toks_append(tokval)\n"], [6, "", [257, 0], [257, 0], "def untokenize(iterable):\n"], [6, "", [257, 0], [257, 0], "def untokenize(iterable):\n"], [6, "", [257, 0], [257, 0], "def untokenize(iterable):\n"], [1, "def", [257, 0], [257, 3], "def untokenize(iterable):\n"], [1, "untokenize", [257, 4], [257, 14], "def untokenize(iterable):\n"], [7, "(", [257, 14], [257, 15], "def untokenize(iterable):\n"], [1, "iterable", [257, 15], [257, 23], "def untokenize(iterable):\n"], [8, ")", [257, 23], [257, 24], "def untokenize(iterable):\n"], [11, ":", [257, 24], [257, 25], "def untokenize(iterable):\n"], [4, "\n", [257, 25], [257, 26], "def untokenize(iterable):\n"], [5, "    ", [258, 0], [258, 4], "    \"\"\"Transform tokens back into Python source code.\n"], [3, "\"\"\"Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n\n    Round-trip invariant for limited input:\n        # Output bytes will tokenize back to the input\n        t1 = [tok[:2] for tok in tokenize(f.readline)]\n        newcode = untokenize(t1)\n        readline = BytesIO(newcode).readline\n        t2 = [tok[:2] for tok in tokenize(readline)]\n        assert t1 == t2\n    \"\"\"", [258, 4], [276, 7], "    \"\"\"Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n\n    Round-trip invariant for limited input:\n        # Output bytes will tokenize back to the input\n        t1 = [tok[:2] for tok in tokenize(f.readline)]\n        newcode = untokenize(t1)\n        readline = BytesIO(newcode).readline\n        t2 = [tok[:2] for tok in tokenize(readline)]\n        assert t1 == t2\n    \"\"\"\n"], [4, "\n", [276, 7], [276, 8], "    \"\"\"\n"], [1, "ut", [277, 4], [277, 6], "    ut = Untokenizer()\n"], [22, "=", [277, 7], [277, 8], "    ut = Untokenizer()\n"], [1, "Untokenizer", [277, 9], [277, 20], "    ut = Untokenizer()\n"], [7, "(", [277, 20], [277, 21], "    ut = Untokenizer()\n"], [8, ")", [277, 21], [277, 22], "    ut = Untokenizer()\n"], [4, "\n", [277, 22], [277, 23], "    ut = Untokenizer()\n"], [1, "out", [278, 4], [278, 7], "    out = ut.untokenize(iterable)\n"], [22, "=", [278, 8], [278, 9], "    out = ut.untokenize(iterable)\n"], [1, "ut", [278, 10], [278, 12], "    out = ut.untokenize(iterable)\n"], [23, ".", [278, 12], [278, 13], "    out = ut.untokenize(iterable)\n"], [1, "untokenize", [278, 13], [278, 23], "    out = ut.untokenize(iterable)\n"], [7, "(", [278, 23], [278, 24], "    out = ut.untokenize(iterable)\n"], [1, "iterable", [278, 24], [278, 32], "    out = ut.untokenize(iterable)\n"], [8, ")", [278, 32], [278, 33], "    out = ut.untokenize(iterable)\n"], [4, "\n", [278, 33], [278, 34], "    out = ut.untokenize(iterable)\n"], [1, "if", [279, 4], [279, 6], "    if ut.encoding is not None:\n"], [1, "ut", [279, 7], [279, 9], "    if ut.encoding is not None:\n"], [23, ".", [279, 9], [279, 10], "    if ut.encoding is not None:\n"], [1, "encoding", [279, 10], [279, 18], "    if ut.encoding is not None:\n"], [1, "is", [279, 19], [279, 21], "    if ut.encoding is not None:\n"], [1, "not", [279, 22], [279, 25], "    if ut.encoding is not None:\n"], [1, "None", [279, 26], [279, 30], "    if ut.encoding is not None:\n"], [11, ":", [279, 30], [279, 31], "    if ut.encoding is not None:\n"], [4, "\n", [279, 31], [279, 32], "    if ut.encoding is not None:\n"], [5, "        ", [280, 0], [280, 8], "        out = out.encode(ut.encoding)\n"], [1, "out", [280, 8], [280, 11], "        out = out.encode(ut.encoding)\n"], [22, "=", [280, 12], [280, 13], "        out = out.encode(ut.encoding)\n"], [1, "out", [280, 14], [280, 17], "        out = out.encode(ut.encoding)\n"], [23, ".", [280, 17], [280, 18], "        out = out.encode(ut.encoding)\n"], [1, "encode", [280, 18], [280, 24], "        out = out.encode(ut.encoding)\n"], [7, "(", [280, 24], [280, 25], "        out = out.encode(ut.encoding)\n"], [1, "ut", [280, 25], [280, 27], "        out = out.encode(ut.encoding)\n"], [23, ".", [280, 27], [280, 28], "        out = out.encode(ut.encoding)\n"], [1, "encoding", [280, 28], [280, 36], "        out = out.encode(ut.encoding)\n"], [8, ")", [280, 36], [280, 37], "        out = out.encode(ut.encoding)\n"], [4, "\n", [280, 37], [280, 38], "        out = out.encode(ut.encoding)\n"], [6, "", [281, 4], [281, 4], "    return out\n"], [1, "return", [281, 4], [281, 10], "    return out\n"], [1, "out", [281, 11], [281, 14], "    return out\n"], [4, "\n", [281, 14], [281, 15], "    return out\n"], [6, "", [284, 0], [284, 0], "def _get_normal_name(orig_enc):\n"], [1, "def", [284, 0], [284, 3], "def _get_normal_name(orig_enc):\n"], [1, "_get_normal_name", [284, 4], [284, 20], "def _get_normal_name(orig_enc):\n"], [7, "(", [284, 20], [284, 21], "def _get_normal_name(orig_enc):\n"], [1, "orig_enc", [284, 21], [284, 29], "def _get_normal_name(orig_enc):\n"], [8, ")", [284, 29], [284, 30], "def _get_normal_name(orig_enc):\n"], [11, ":", [284, 30], [284, 31], "def _get_normal_name(orig_enc):\n"], [4, "\n", [284, 31], [284, 32], "def _get_normal_name(orig_enc):\n"], [5, "    ", [285, 0], [285, 4], "    \"\"\"Imitates get_normal_name in tokenizer.c.\"\"\"\n"], [3, "\"\"\"Imitates get_normal_name in tokenizer.c.\"\"\"", [285, 4], [285, 50], "    \"\"\"Imitates get_normal_name in tokenizer.c.\"\"\"\n"], [4, "\n", [285, 50], [285, 51], "    \"\"\"Imitates get_normal_name in tokenizer.c.\"\"\"\n"], [1, "enc", [287, 4], [287, 7], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [22, "=", [287, 8], [287, 9], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [1, "orig_enc", [287, 10], [287, 18], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [9, "[", [287, 18], [287, 19], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [11, ":", [287, 19], [287, 20], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [2, "12", [287, 20], [287, 22], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [10, "]", [287, 22], [287, 23], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [23, ".", [287, 23], [287, 24], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [1, "lower", [287, 24], [287, 29], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [7, "(", [287, 29], [287, 30], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [8, ")", [287, 30], [287, 31], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [23, ".", [287, 31], [287, 32], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [1, "replace", [287, 32], [287, 39], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [7, "(", [287, 39], [287, 40], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [3, "\"_\"", [287, 40], [287, 43], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [12, ",", [287, 43], [287, 44], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [3, "\"-\"", [287, 45], [287, 48], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [8, ")", [287, 48], [287, 49], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [4, "\n", [287, 49], [287, 50], "    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n"], [1, "if", [288, 4], [288, 6], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [1, "enc", [288, 7], [288, 10], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [27, "==", [288, 11], [288, 13], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [3, "\"utf-8\"", [288, 14], [288, 21], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [1, "or", [288, 22], [288, 24], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [1, "enc", [288, 25], [288, 28], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [23, ".", [288, 28], [288, 29], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [1, "startswith", [288, 29], [288, 39], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [7, "(", [288, 39], [288, 40], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [3, "\"utf-8-\"", [288, 40], [288, 48], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [8, ")", [288, 48], [288, 49], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [11, ":", [288, 49], [288, 50], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [4, "\n", [288, 50], [288, 51], "    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n"], [5, "        ", [289, 0], [289, 8], "        return \"utf-8\"\n"], [1, "return", [289, 8], [289, 14], "        return \"utf-8\"\n"], [3, "\"utf-8\"", [289, 15], [289, 22], "        return \"utf-8\"\n"], [4, "\n", [289, 22], [289, 23], "        return \"utf-8\"\n"], [6, "", [290, 4], [290, 4], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [1, "if", [290, 4], [290, 6], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [1, "enc", [290, 7], [290, 10], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [1, "in", [290, 11], [290, 13], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [7, "(", [290, 14], [290, 15], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [3, "\"latin-1\"", [290, 15], [290, 24], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [12, ",", [290, 24], [290, 25], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [3, "\"iso-8859-1\"", [290, 26], [290, 38], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [12, ",", [290, 38], [290, 39], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [3, "\"iso-latin-1\"", [290, 40], [290, 53], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [8, ")", [290, 53], [290, 54], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [1, "or", [290, 55], [290, 57], "    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n"], [1, "enc", [291, 7], [291, 10], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [23, ".", [291, 10], [291, 11], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [1, "startswith", [291, 11], [291, 21], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [7, "(", [291, 21], [291, 22], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [7, "(", [291, 22], [291, 23], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [3, "\"latin-1-\"", [291, 23], [291, 33], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [12, ",", [291, 33], [291, 34], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [3, "\"iso-8859-1-\"", [291, 35], [291, 48], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [12, ",", [291, 48], [291, 49], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [3, "\"iso-latin-1-\"", [291, 50], [291, 64], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [8, ")", [291, 64], [291, 65], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [8, ")", [291, 65], [291, 66], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [11, ":", [291, 66], [291, 67], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [4, "\n", [291, 67], [291, 68], "       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n"], [5, "        ", [292, 0], [292, 8], "        return \"iso-8859-1\"\n"], [1, "return", [292, 8], [292, 14], "        return \"iso-8859-1\"\n"], [3, "\"iso-8859-1\"", [292, 15], [292, 27], "        return \"iso-8859-1\"\n"], [4, "\n", [292, 27], [292, 28], "        return \"iso-8859-1\"\n"], [6, "", [293, 4], [293, 4], "    return orig_enc\n"], [1, "return", [293, 4], [293, 10], "    return orig_enc\n"], [1, "orig_enc", [293, 11], [293, 19], "    return orig_enc\n"], [4, "\n", [293, 19], [293, 20], "    return orig_enc\n"], [6, "", [295, 0], [295, 0], "def detect_encoding(readline):\n"], [1, "def", [295, 0], [295, 3], "def detect_encoding(readline):\n"], [1, "detect_encoding", [295, 4], [295, 19], "def detect_encoding(readline):\n"], [7, "(", [295, 19], [295, 20], "def detect_encoding(readline):\n"], [1, "readline", [295, 20], [295, 28], "def detect_encoding(readline):\n"], [8, ")", [295, 28], [295, 29], "def detect_encoding(readline):\n"], [11, ":", [295, 29], [295, 30], "def detect_encoding(readline):\n"], [4, "\n", [295, 30], [295, 31], "def detect_encoding(readline):\n"], [5, "    ", [296, 0], [296, 4], "    \"\"\"\n"], [3, "\"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argument, readline,\n    in the same way as the tokenize() generator.\n\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an\n    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n    'utf-8-sig' is returned.\n\n    If no encoding is specified, then the default of 'utf-8' will be returned.\n    \"\"\"", [296, 4], [311, 7], "    \"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argument, readline,\n    in the same way as the tokenize() generator.\n\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an\n    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n    'utf-8-sig' is returned.\n\n    If no encoding is specified, then the default of 'utf-8' will be returned.\n    \"\"\"\n"], [4, "\n", [311, 7], [311, 8], "    \"\"\"\n"], [1, "try", [312, 4], [312, 7], "    try:\n"], [11, ":", [312, 7], [312, 8], "    try:\n"], [4, "\n", [312, 8], [312, 9], "    try:\n"], [5, "        ", [313, 0], [313, 8], "        filename = readline.__self__.name\n"], [1, "filename", [313, 8], [313, 16], "        filename = readline.__self__.name\n"], [22, "=", [313, 17], [313, 18], "        filename = readline.__self__.name\n"], [1, "readline", [313, 19], [313, 27], "        filename = readline.__self__.name\n"], [23, ".", [313, 27], [313, 28], "        filename = readline.__self__.name\n"], [1, "__self__", [313, 28], [313, 36], "        filename = readline.__self__.name\n"], [23, ".", [313, 36], [313, 37], "        filename = readline.__self__.name\n"], [1, "name", [313, 37], [313, 41], "        filename = readline.__self__.name\n"], [4, "\n", [313, 41], [313, 42], "        filename = readline.__self__.name\n"], [6, "", [314, 4], [314, 4], "    except AttributeError:\n"], [1, "except", [314, 4], [314, 10], "    except AttributeError:\n"], [1, "AttributeError", [314, 11], [314, 25], "    except AttributeError:\n"], [11, ":", [314, 25], [314, 26], "    except AttributeError:\n"], [4, "\n", [314, 26], [314, 27], "    except AttributeError:\n"], [5, "        ", [315, 0], [315, 8], "        filename = None\n"], [1, "filename", [315, 8], [315, 16], "        filename = None\n"], [22, "=", [315, 17], [315, 18], "        filename = None\n"], [1, "None", [315, 19], [315, 23], "        filename = None\n"], [4, "\n", [315, 23], [315, 24], "        filename = None\n"], [6, "", [316, 4], [316, 4], "    bom_found = False\n"], [1, "bom_found", [316, 4], [316, 13], "    bom_found = False\n"], [22, "=", [316, 14], [316, 15], "    bom_found = False\n"], [1, "False", [316, 16], [316, 21], "    bom_found = False\n"], [4, "\n", [316, 21], [316, 22], "    bom_found = False\n"], [1, "encoding", [317, 4], [317, 12], "    encoding = None\n"], [22, "=", [317, 13], [317, 14], "    encoding = None\n"], [1, "None", [317, 15], [317, 19], "    encoding = None\n"], [4, "\n", [317, 19], [317, 20], "    encoding = None\n"], [1, "default", [318, 4], [318, 11], "    default = 'utf-8'\n"], [22, "=", [318, 12], [318, 13], "    default = 'utf-8'\n"], [3, "'utf-8'", [318, 14], [318, 21], "    default = 'utf-8'\n"], [4, "\n", [318, 21], [318, 22], "    default = 'utf-8'\n"], [1, "def", [319, 4], [319, 7], "    def read_or_stop():\n"], [1, "read_or_stop", [319, 8], [319, 20], "    def read_or_stop():\n"], [7, "(", [319, 20], [319, 21], "    def read_or_stop():\n"], [8, ")", [319, 21], [319, 22], "    def read_or_stop():\n"], [11, ":", [319, 22], [319, 23], "    def read_or_stop():\n"], [4, "\n", [319, 23], [319, 24], "    def read_or_stop():\n"], [5, "        ", [320, 0], [320, 8], "        try:\n"], [1, "try", [320, 8], [320, 11], "        try:\n"], [11, ":", [320, 11], [320, 12], "        try:\n"], [4, "\n", [320, 12], [320, 13], "        try:\n"], [5, "            ", [321, 0], [321, 12], "            return readline()\n"], [1, "return", [321, 12], [321, 18], "            return readline()\n"], [1, "readline", [321, 19], [321, 27], "            return readline()\n"], [7, "(", [321, 27], [321, 28], "            return readline()\n"], [8, ")", [321, 28], [321, 29], "            return readline()\n"], [4, "\n", [321, 29], [321, 30], "            return readline()\n"], [6, "", [322, 8], [322, 8], "        except StopIteration:\n"], [1, "except", [322, 8], [322, 14], "        except StopIteration:\n"], [1, "StopIteration", [322, 15], [322, 28], "        except StopIteration:\n"], [11, ":", [322, 28], [322, 29], "        except StopIteration:\n"], [4, "\n", [322, 29], [322, 30], "        except StopIteration:\n"], [5, "            ", [323, 0], [323, 12], "            return b''\n"], [1, "return", [323, 12], [323, 18], "            return b''\n"], [3, "b''", [323, 19], [323, 22], "            return b''\n"], [4, "\n", [323, 22], [323, 23], "            return b''\n"], [6, "", [325, 4], [325, 4], "    def find_cookie(line):\n"], [6, "", [325, 4], [325, 4], "    def find_cookie(line):\n"], [1, "def", [325, 4], [325, 7], "    def find_cookie(line):\n"], [1, "find_cookie", [325, 8], [325, 19], "    def find_cookie(line):\n"], [7, "(", [325, 19], [325, 20], "    def find_cookie(line):\n"], [1, "line", [325, 20], [325, 24], "    def find_cookie(line):\n"], [8, ")", [325, 24], [325, 25], "    def find_cookie(line):\n"], [11, ":", [325, 25], [325, 26], "    def find_cookie(line):\n"], [4, "\n", [325, 26], [325, 27], "    def find_cookie(line):\n"], [5, "        ", [326, 0], [326, 8], "        try:\n"], [1, "try", [326, 8], [326, 11], "        try:\n"], [11, ":", [326, 11], [326, 12], "        try:\n"], [4, "\n", [326, 12], [326, 13], "        try:\n"], [5, "            ", [330, 0], [330, 12], "            line_string = line.decode('utf-8')\n"], [1, "line_string", [330, 12], [330, 23], "            line_string = line.decode('utf-8')\n"], [22, "=", [330, 24], [330, 25], "            line_string = line.decode('utf-8')\n"], [1, "line", [330, 26], [330, 30], "            line_string = line.decode('utf-8')\n"], [23, ".", [330, 30], [330, 31], "            line_string = line.decode('utf-8')\n"], [1, "decode", [330, 31], [330, 37], "            line_string = line.decode('utf-8')\n"], [7, "(", [330, 37], [330, 38], "            line_string = line.decode('utf-8')\n"], [3, "'utf-8'", [330, 38], [330, 45], "            line_string = line.decode('utf-8')\n"], [8, ")", [330, 45], [330, 46], "            line_string = line.decode('utf-8')\n"], [4, "\n", [330, 46], [330, 47], "            line_string = line.decode('utf-8')\n"], [6, "", [331, 8], [331, 8], "        except UnicodeDecodeError:\n"], [1, "except", [331, 8], [331, 14], "        except UnicodeDecodeError:\n"], [1, "UnicodeDecodeError", [331, 15], [331, 33], "        except UnicodeDecodeError:\n"], [11, ":", [331, 33], [331, 34], "        except UnicodeDecodeError:\n"], [4, "\n", [331, 34], [331, 35], "        except UnicodeDecodeError:\n"], [5, "            ", [332, 0], [332, 12], "            msg = \"invalid or missing encoding declaration\"\n"], [1, "msg", [332, 12], [332, 15], "            msg = \"invalid or missing encoding declaration\"\n"], [22, "=", [332, 16], [332, 17], "            msg = \"invalid or missing encoding declaration\"\n"], [3, "\"invalid or missing encoding declaration\"", [332, 18], [332, 59], "            msg = \"invalid or missing encoding declaration\"\n"], [4, "\n", [332, 59], [332, 60], "            msg = \"invalid or missing encoding declaration\"\n"], [1, "if", [333, 12], [333, 14], "            if filename is not None:\n"], [1, "filename", [333, 15], [333, 23], "            if filename is not None:\n"], [1, "is", [333, 24], [333, 26], "            if filename is not None:\n"], [1, "not", [333, 27], [333, 30], "            if filename is not None:\n"], [1, "None", [333, 31], [333, 35], "            if filename is not None:\n"], [11, ":", [333, 35], [333, 36], "            if filename is not None:\n"], [4, "\n", [333, 36], [333, 37], "            if filename is not None:\n"], [5, "                ", [334, 0], [334, 16], "                msg = '{} for {!r}'.format(msg, filename)\n"], [1, "msg", [334, 16], [334, 19], "                msg = '{} for {!r}'.format(msg, filename)\n"], [22, "=", [334, 20], [334, 21], "                msg = '{} for {!r}'.format(msg, filename)\n"], [3, "'{} for {!r}'", [334, 22], [334, 35], "                msg = '{} for {!r}'.format(msg, filename)\n"], [23, ".", [334, 35], [334, 36], "                msg = '{} for {!r}'.format(msg, filename)\n"], [1, "format", [334, 36], [334, 42], "                msg = '{} for {!r}'.format(msg, filename)\n"], [7, "(", [334, 42], [334, 43], "                msg = '{} for {!r}'.format(msg, filename)\n"], [1, "msg", [334, 43], [334, 46], "                msg = '{} for {!r}'.format(msg, filename)\n"], [12, ",", [334, 46], [334, 47], "                msg = '{} for {!r}'.format(msg, filename)\n"], [1, "filename", [334, 48], [334, 56], "                msg = '{} for {!r}'.format(msg, filename)\n"], [8, ")", [334, 56], [334, 57], "                msg = '{} for {!r}'.format(msg, filename)\n"], [4, "\n", [334, 57], [334, 58], "                msg = '{} for {!r}'.format(msg, filename)\n"], [6, "", [335, 12], [335, 12], "            raise SyntaxError(msg)\n"], [1, "raise", [335, 12], [335, 17], "            raise SyntaxError(msg)\n"], [1, "SyntaxError", [335, 18], [335, 29], "            raise SyntaxError(msg)\n"], [7, "(", [335, 29], [335, 30], "            raise SyntaxError(msg)\n"], [1, "msg", [335, 30], [335, 33], "            raise SyntaxError(msg)\n"], [8, ")", [335, 33], [335, 34], "            raise SyntaxError(msg)\n"], [4, "\n", [335, 34], [335, 35], "            raise SyntaxError(msg)\n"], [6, "", [337, 8], [337, 8], "        match = cookie_re.match(line_string)\n"], [1, "match", [337, 8], [337, 13], "        match = cookie_re.match(line_string)\n"], [22, "=", [337, 14], [337, 15], "        match = cookie_re.match(line_string)\n"], [1, "cookie_re", [337, 16], [337, 25], "        match = cookie_re.match(line_string)\n"], [23, ".", [337, 25], [337, 26], "        match = cookie_re.match(line_string)\n"], [1, "match", [337, 26], [337, 31], "        match = cookie_re.match(line_string)\n"], [7, "(", [337, 31], [337, 32], "        match = cookie_re.match(line_string)\n"], [1, "line_string", [337, 32], [337, 43], "        match = cookie_re.match(line_string)\n"], [8, ")", [337, 43], [337, 44], "        match = cookie_re.match(line_string)\n"], [4, "\n", [337, 44], [337, 45], "        match = cookie_re.match(line_string)\n"], [1, "if", [338, 8], [338, 10], "        if not match:\n"], [1, "not", [338, 11], [338, 14], "        if not match:\n"], [1, "match", [338, 15], [338, 20], "        if not match:\n"], [11, ":", [338, 20], [338, 21], "        if not match:\n"], [4, "\n", [338, 21], [338, 22], "        if not match:\n"], [5, "            ", [339, 0], [339, 12], "            return None\n"], [1, "return", [339, 12], [339, 18], "            return None\n"], [1, "None", [339, 19], [339, 23], "            return None\n"], [4, "\n", [339, 23], [339, 24], "            return None\n"], [6, "", [340, 8], [340, 8], "        encoding = _get_normal_name(match.group(1))\n"], [1, "encoding", [340, 8], [340, 16], "        encoding = _get_normal_name(match.group(1))\n"], [22, "=", [340, 17], [340, 18], "        encoding = _get_normal_name(match.group(1))\n"], [1, "_get_normal_name", [340, 19], [340, 35], "        encoding = _get_normal_name(match.group(1))\n"], [7, "(", [340, 35], [340, 36], "        encoding = _get_normal_name(match.group(1))\n"], [1, "match", [340, 36], [340, 41], "        encoding = _get_normal_name(match.group(1))\n"], [23, ".", [340, 41], [340, 42], "        encoding = _get_normal_name(match.group(1))\n"], [1, "group", [340, 42], [340, 47], "        encoding = _get_normal_name(match.group(1))\n"], [7, "(", [340, 47], [340, 48], "        encoding = _get_normal_name(match.group(1))\n"], [2, "1", [340, 48], [340, 49], "        encoding = _get_normal_name(match.group(1))\n"], [8, ")", [340, 49], [340, 50], "        encoding = _get_normal_name(match.group(1))\n"], [8, ")", [340, 50], [340, 51], "        encoding = _get_normal_name(match.group(1))\n"], [4, "\n", [340, 51], [340, 52], "        encoding = _get_normal_name(match.group(1))\n"], [1, "try", [341, 8], [341, 11], "        try:\n"], [11, ":", [341, 11], [341, 12], "        try:\n"], [4, "\n", [341, 12], [341, 13], "        try:\n"], [5, "            ", [342, 0], [342, 12], "            codec = lookup(encoding)\n"], [1, "codec", [342, 12], [342, 17], "            codec = lookup(encoding)\n"], [22, "=", [342, 18], [342, 19], "            codec = lookup(encoding)\n"], [1, "lookup", [342, 20], [342, 26], "            codec = lookup(encoding)\n"], [7, "(", [342, 26], [342, 27], "            codec = lookup(encoding)\n"], [1, "encoding", [342, 27], [342, 35], "            codec = lookup(encoding)\n"], [8, ")", [342, 35], [342, 36], "            codec = lookup(encoding)\n"], [4, "\n", [342, 36], [342, 37], "            codec = lookup(encoding)\n"], [6, "", [343, 8], [343, 8], "        except LookupError:\n"], [1, "except", [343, 8], [343, 14], "        except LookupError:\n"], [1, "LookupError", [343, 15], [343, 26], "        except LookupError:\n"], [11, ":", [343, 26], [343, 27], "        except LookupError:\n"], [4, "\n", [343, 27], [343, 28], "        except LookupError:\n"], [5, "            ", [345, 0], [345, 12], "            if filename is None:\n"], [1, "if", [345, 12], [345, 14], "            if filename is None:\n"], [1, "filename", [345, 15], [345, 23], "            if filename is None:\n"], [1, "is", [345, 24], [345, 26], "            if filename is None:\n"], [1, "None", [345, 27], [345, 31], "            if filename is None:\n"], [11, ":", [345, 31], [345, 32], "            if filename is None:\n"], [4, "\n", [345, 32], [345, 33], "            if filename is None:\n"], [5, "                ", [346, 0], [346, 16], "                msg = \"unknown encoding: \" + encoding\n"], [1, "msg", [346, 16], [346, 19], "                msg = \"unknown encoding: \" + encoding\n"], [22, "=", [346, 20], [346, 21], "                msg = \"unknown encoding: \" + encoding\n"], [3, "\"unknown encoding: \"", [346, 22], [346, 42], "                msg = \"unknown encoding: \" + encoding\n"], [14, "+", [346, 43], [346, 44], "                msg = \"unknown encoding: \" + encoding\n"], [1, "encoding", [346, 45], [346, 53], "                msg = \"unknown encoding: \" + encoding\n"], [4, "\n", [346, 53], [346, 54], "                msg = \"unknown encoding: \" + encoding\n"], [6, "", [347, 12], [347, 12], "            else:\n"], [1, "else", [347, 12], [347, 16], "            else:\n"], [11, ":", [347, 16], [347, 17], "            else:\n"], [4, "\n", [347, 17], [347, 18], "            else:\n"], [5, "                ", [348, 0], [348, 16], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [1, "msg", [348, 16], [348, 19], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [22, "=", [348, 20], [348, 21], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [3, "\"unknown encoding for {!r}: {}\"", [348, 22], [348, 53], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [23, ".", [348, 53], [348, 54], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [1, "format", [348, 54], [348, 60], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [7, "(", [348, 60], [348, 61], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [1, "filename", [348, 61], [348, 69], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [12, ",", [348, 69], [348, 70], "                msg = \"unknown encoding for {!r}: {}\".format(filename,\n"], [1, "encoding", [349, 24], [349, 32], "                        encoding)\n"], [8, ")", [349, 32], [349, 33], "                        encoding)\n"], [4, "\n", [349, 33], [349, 34], "                        encoding)\n"], [6, "", [350, 12], [350, 12], "            raise SyntaxError(msg)\n"], [1, "raise", [350, 12], [350, 17], "            raise SyntaxError(msg)\n"], [1, "SyntaxError", [350, 18], [350, 29], "            raise SyntaxError(msg)\n"], [7, "(", [350, 29], [350, 30], "            raise SyntaxError(msg)\n"], [1, "msg", [350, 30], [350, 33], "            raise SyntaxError(msg)\n"], [8, ")", [350, 33], [350, 34], "            raise SyntaxError(msg)\n"], [4, "\n", [350, 34], [350, 35], "            raise SyntaxError(msg)\n"], [6, "", [352, 8], [352, 8], "        if bom_found:\n"], [1, "if", [352, 8], [352, 10], "        if bom_found:\n"], [1, "bom_found", [352, 11], [352, 20], "        if bom_found:\n"], [11, ":", [352, 20], [352, 21], "        if bom_found:\n"], [4, "\n", [352, 21], [352, 22], "        if bom_found:\n"], [5, "            ", [353, 0], [353, 12], "            if encoding != 'utf-8':\n"], [1, "if", [353, 12], [353, 14], "            if encoding != 'utf-8':\n"], [1, "encoding", [353, 15], [353, 23], "            if encoding != 'utf-8':\n"], [28, "!=", [353, 24], [353, 26], "            if encoding != 'utf-8':\n"], [3, "'utf-8'", [353, 27], [353, 34], "            if encoding != 'utf-8':\n"], [11, ":", [353, 34], [353, 35], "            if encoding != 'utf-8':\n"], [4, "\n", [353, 35], [353, 36], "            if encoding != 'utf-8':\n"], [5, "                ", [355, 0], [355, 16], "                if filename is None:\n"], [1, "if", [355, 16], [355, 18], "                if filename is None:\n"], [1, "filename", [355, 19], [355, 27], "                if filename is None:\n"], [1, "is", [355, 28], [355, 30], "                if filename is None:\n"], [1, "None", [355, 31], [355, 35], "                if filename is None:\n"], [11, ":", [355, 35], [355, 36], "                if filename is None:\n"], [4, "\n", [355, 36], [355, 37], "                if filename is None:\n"], [5, "                    ", [356, 0], [356, 20], "                    msg = 'encoding problem: utf-8'\n"], [1, "msg", [356, 20], [356, 23], "                    msg = 'encoding problem: utf-8'\n"], [22, "=", [356, 24], [356, 25], "                    msg = 'encoding problem: utf-8'\n"], [3, "'encoding problem: utf-8'", [356, 26], [356, 51], "                    msg = 'encoding problem: utf-8'\n"], [4, "\n", [356, 51], [356, 52], "                    msg = 'encoding problem: utf-8'\n"], [6, "", [357, 16], [357, 16], "                else:\n"], [1, "else", [357, 16], [357, 20], "                else:\n"], [11, ":", [357, 20], [357, 21], "                else:\n"], [4, "\n", [357, 21], [357, 22], "                else:\n"], [5, "                    ", [358, 0], [358, 20], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [1, "msg", [358, 20], [358, 23], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [22, "=", [358, 24], [358, 25], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [3, "'encoding problem for {!r}: utf-8'", [358, 26], [358, 60], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [23, ".", [358, 60], [358, 61], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [1, "format", [358, 61], [358, 67], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [7, "(", [358, 67], [358, 68], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [1, "filename", [358, 68], [358, 76], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [8, ")", [358, 76], [358, 77], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [4, "\n", [358, 77], [358, 78], "                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n"], [6, "", [359, 16], [359, 16], "                raise SyntaxError(msg)\n"], [1, "raise", [359, 16], [359, 21], "                raise SyntaxError(msg)\n"], [1, "SyntaxError", [359, 22], [359, 33], "                raise SyntaxError(msg)\n"], [7, "(", [359, 33], [359, 34], "                raise SyntaxError(msg)\n"], [1, "msg", [359, 34], [359, 37], "                raise SyntaxError(msg)\n"], [8, ")", [359, 37], [359, 38], "                raise SyntaxError(msg)\n"], [4, "\n", [359, 38], [359, 39], "                raise SyntaxError(msg)\n"], [6, "", [360, 12], [360, 12], "            encoding += '-sig'\n"], [1, "encoding", [360, 12], [360, 20], "            encoding += '-sig'\n"], [36, "+=", [360, 21], [360, 23], "            encoding += '-sig'\n"], [3, "'-sig'", [360, 24], [360, 30], "            encoding += '-sig'\n"], [4, "\n", [360, 30], [360, 31], "            encoding += '-sig'\n"], [6, "", [361, 8], [361, 8], "        return encoding\n"], [1, "return", [361, 8], [361, 14], "        return encoding\n"], [1, "encoding", [361, 15], [361, 23], "        return encoding\n"], [4, "\n", [361, 23], [361, 24], "        return encoding\n"], [6, "", [363, 4], [363, 4], "    first = read_or_stop()\n"], [1, "first", [363, 4], [363, 9], "    first = read_or_stop()\n"], [22, "=", [363, 10], [363, 11], "    first = read_or_stop()\n"], [1, "read_or_stop", [363, 12], [363, 24], "    first = read_or_stop()\n"], [7, "(", [363, 24], [363, 25], "    first = read_or_stop()\n"], [8, ")", [363, 25], [363, 26], "    first = read_or_stop()\n"], [4, "\n", [363, 26], [363, 27], "    first = read_or_stop()\n"], [1, "if", [364, 4], [364, 6], "    if first.startswith(BOM_UTF8):\n"], [1, "first", [364, 7], [364, 12], "    if first.startswith(BOM_UTF8):\n"], [23, ".", [364, 12], [364, 13], "    if first.startswith(BOM_UTF8):\n"], [1, "startswith", [364, 13], [364, 23], "    if first.startswith(BOM_UTF8):\n"], [7, "(", [364, 23], [364, 24], "    if first.startswith(BOM_UTF8):\n"], [1, "BOM_UTF8", [364, 24], [364, 32], "    if first.startswith(BOM_UTF8):\n"], [8, ")", [364, 32], [364, 33], "    if first.startswith(BOM_UTF8):\n"], [11, ":", [364, 33], [364, 34], "    if first.startswith(BOM_UTF8):\n"], [4, "\n", [364, 34], [364, 35], "    if first.startswith(BOM_UTF8):\n"], [5, "        ", [365, 0], [365, 8], "        bom_found = True\n"], [1, "bom_found", [365, 8], [365, 17], "        bom_found = True\n"], [22, "=", [365, 18], [365, 19], "        bom_found = True\n"], [1, "True", [365, 20], [365, 24], "        bom_found = True\n"], [4, "\n", [365, 24], [365, 25], "        bom_found = True\n"], [1, "first", [366, 8], [366, 13], "        first = first[3:]\n"], [22, "=", [366, 14], [366, 15], "        first = first[3:]\n"], [1, "first", [366, 16], [366, 21], "        first = first[3:]\n"], [9, "[", [366, 21], [366, 22], "        first = first[3:]\n"], [2, "3", [366, 22], [366, 23], "        first = first[3:]\n"], [11, ":", [366, 23], [366, 24], "        first = first[3:]\n"], [10, "]", [366, 24], [366, 25], "        first = first[3:]\n"], [4, "\n", [366, 25], [366, 26], "        first = first[3:]\n"], [1, "default", [367, 8], [367, 15], "        default = 'utf-8-sig'\n"], [22, "=", [367, 16], [367, 17], "        default = 'utf-8-sig'\n"], [3, "'utf-8-sig'", [367, 18], [367, 29], "        default = 'utf-8-sig'\n"], [4, "\n", [367, 29], [367, 30], "        default = 'utf-8-sig'\n"], [6, "", [368, 4], [368, 4], "    if not first:\n"], [1, "if", [368, 4], [368, 6], "    if not first:\n"], [1, "not", [368, 7], [368, 10], "    if not first:\n"], [1, "first", [368, 11], [368, 16], "    if not first:\n"], [11, ":", [368, 16], [368, 17], "    if not first:\n"], [4, "\n", [368, 17], [368, 18], "    if not first:\n"], [5, "        ", [369, 0], [369, 8], "        return default, []\n"], [1, "return", [369, 8], [369, 14], "        return default, []\n"], [1, "default", [369, 15], [369, 22], "        return default, []\n"], [12, ",", [369, 22], [369, 23], "        return default, []\n"], [9, "[", [369, 24], [369, 25], "        return default, []\n"], [10, "]", [369, 25], [369, 26], "        return default, []\n"], [4, "\n", [369, 26], [369, 27], "        return default, []\n"], [6, "", [371, 4], [371, 4], "    encoding = find_cookie(first)\n"], [1, "encoding", [371, 4], [371, 12], "    encoding = find_cookie(first)\n"], [22, "=", [371, 13], [371, 14], "    encoding = find_cookie(first)\n"], [1, "find_cookie", [371, 15], [371, 26], "    encoding = find_cookie(first)\n"], [7, "(", [371, 26], [371, 27], "    encoding = find_cookie(first)\n"], [1, "first", [371, 27], [371, 32], "    encoding = find_cookie(first)\n"], [8, ")", [371, 32], [371, 33], "    encoding = find_cookie(first)\n"], [4, "\n", [371, 33], [371, 34], "    encoding = find_cookie(first)\n"], [1, "if", [372, 4], [372, 6], "    if encoding:\n"], [1, "encoding", [372, 7], [372, 15], "    if encoding:\n"], [11, ":", [372, 15], [372, 16], "    if encoding:\n"], [4, "\n", [372, 16], [372, 17], "    if encoding:\n"], [5, "        ", [373, 0], [373, 8], "        return encoding, [first]\n"], [1, "return", [373, 8], [373, 14], "        return encoding, [first]\n"], [1, "encoding", [373, 15], [373, 23], "        return encoding, [first]\n"], [12, ",", [373, 23], [373, 24], "        return encoding, [first]\n"], [9, "[", [373, 25], [373, 26], "        return encoding, [first]\n"], [1, "first", [373, 26], [373, 31], "        return encoding, [first]\n"], [10, "]", [373, 31], [373, 32], "        return encoding, [first]\n"], [4, "\n", [373, 32], [373, 33], "        return encoding, [first]\n"], [6, "", [374, 4], [374, 4], "    if not blank_re.match(first):\n"], [1, "if", [374, 4], [374, 6], "    if not blank_re.match(first):\n"], [1, "not", [374, 7], [374, 10], "    if not blank_re.match(first):\n"], [1, "blank_re", [374, 11], [374, 19], "    if not blank_re.match(first):\n"], [23, ".", [374, 19], [374, 20], "    if not blank_re.match(first):\n"], [1, "match", [374, 20], [374, 25], "    if not blank_re.match(first):\n"], [7, "(", [374, 25], [374, 26], "    if not blank_re.match(first):\n"], [1, "first", [374, 26], [374, 31], "    if not blank_re.match(first):\n"], [8, ")", [374, 31], [374, 32], "    if not blank_re.match(first):\n"], [11, ":", [374, 32], [374, 33], "    if not blank_re.match(first):\n"], [4, "\n", [374, 33], [374, 34], "    if not blank_re.match(first):\n"], [5, "        ", [375, 0], [375, 8], "        return default, [first]\n"], [1, "return", [375, 8], [375, 14], "        return default, [first]\n"], [1, "default", [375, 15], [375, 22], "        return default, [first]\n"], [12, ",", [375, 22], [375, 23], "        return default, [first]\n"], [9, "[", [375, 24], [375, 25], "        return default, [first]\n"], [1, "first", [375, 25], [375, 30], "        return default, [first]\n"], [10, "]", [375, 30], [375, 31], "        return default, [first]\n"], [4, "\n", [375, 31], [375, 32], "        return default, [first]\n"], [6, "", [377, 4], [377, 4], "    second = read_or_stop()\n"], [1, "second", [377, 4], [377, 10], "    second = read_or_stop()\n"], [22, "=", [377, 11], [377, 12], "    second = read_or_stop()\n"], [1, "read_or_stop", [377, 13], [377, 25], "    second = read_or_stop()\n"], [7, "(", [377, 25], [377, 26], "    second = read_or_stop()\n"], [8, ")", [377, 26], [377, 27], "    second = read_or_stop()\n"], [4, "\n", [377, 27], [377, 28], "    second = read_or_stop()\n"], [1, "if", [378, 4], [378, 6], "    if not second:\n"], [1, "not", [378, 7], [378, 10], "    if not second:\n"], [1, "second", [378, 11], [378, 17], "    if not second:\n"], [11, ":", [378, 17], [378, 18], "    if not second:\n"], [4, "\n", [378, 18], [378, 19], "    if not second:\n"], [5, "        ", [379, 0], [379, 8], "        return default, [first]\n"], [1, "return", [379, 8], [379, 14], "        return default, [first]\n"], [1, "default", [379, 15], [379, 22], "        return default, [first]\n"], [12, ",", [379, 22], [379, 23], "        return default, [first]\n"], [9, "[", [379, 24], [379, 25], "        return default, [first]\n"], [1, "first", [379, 25], [379, 30], "        return default, [first]\n"], [10, "]", [379, 30], [379, 31], "        return default, [first]\n"], [4, "\n", [379, 31], [379, 32], "        return default, [first]\n"], [6, "", [381, 4], [381, 4], "    encoding = find_cookie(second)\n"], [1, "encoding", [381, 4], [381, 12], "    encoding = find_cookie(second)\n"], [22, "=", [381, 13], [381, 14], "    encoding = find_cookie(second)\n"], [1, "find_cookie", [381, 15], [381, 26], "    encoding = find_cookie(second)\n"], [7, "(", [381, 26], [381, 27], "    encoding = find_cookie(second)\n"], [1, "second", [381, 27], [381, 33], "    encoding = find_cookie(second)\n"], [8, ")", [381, 33], [381, 34], "    encoding = find_cookie(second)\n"], [4, "\n", [381, 34], [381, 35], "    encoding = find_cookie(second)\n"], [1, "if", [382, 4], [382, 6], "    if encoding:\n"], [1, "encoding", [382, 7], [382, 15], "    if encoding:\n"], [11, ":", [382, 15], [382, 16], "    if encoding:\n"], [4, "\n", [382, 16], [382, 17], "    if encoding:\n"], [5, "        ", [383, 0], [383, 8], "        return encoding, [first, second]\n"], [1, "return", [383, 8], [383, 14], "        return encoding, [first, second]\n"], [1, "encoding", [383, 15], [383, 23], "        return encoding, [first, second]\n"], [12, ",", [383, 23], [383, 24], "        return encoding, [first, second]\n"], [9, "[", [383, 25], [383, 26], "        return encoding, [first, second]\n"], [1, "first", [383, 26], [383, 31], "        return encoding, [first, second]\n"], [12, ",", [383, 31], [383, 32], "        return encoding, [first, second]\n"], [1, "second", [383, 33], [383, 39], "        return encoding, [first, second]\n"], [10, "]", [383, 39], [383, 40], "        return encoding, [first, second]\n"], [4, "\n", [383, 40], [383, 41], "        return encoding, [first, second]\n"], [6, "", [385, 4], [385, 4], "    return default, [first, second]\n"], [1, "return", [385, 4], [385, 10], "    return default, [first, second]\n"], [1, "default", [385, 11], [385, 18], "    return default, [first, second]\n"], [12, ",", [385, 18], [385, 19], "    return default, [first, second]\n"], [9, "[", [385, 20], [385, 21], "    return default, [first, second]\n"], [1, "first", [385, 21], [385, 26], "    return default, [first, second]\n"], [12, ",", [385, 26], [385, 27], "    return default, [first, second]\n"], [1, "second", [385, 28], [385, 34], "    return default, [first, second]\n"], [10, "]", [385, 34], [385, 35], "    return default, [first, second]\n"], [4, "\n", [385, 35], [385, 36], "    return default, [first, second]\n"], [6, "", [388, 0], [388, 0], "def open(filename):\n"], [1, "def", [388, 0], [388, 3], "def open(filename):\n"], [1, "open", [388, 4], [388, 8], "def open(filename):\n"], [7, "(", [388, 8], [388, 9], "def open(filename):\n"], [1, "filename", [388, 9], [388, 17], "def open(filename):\n"], [8, ")", [388, 17], [388, 18], "def open(filename):\n"], [11, ":", [388, 18], [388, 19], "def open(filename):\n"], [4, "\n", [388, 19], [388, 20], "def open(filename):\n"], [5, "    ", [389, 0], [389, 4], "    \"\"\"Open a file in read only mode using the encoding detected by\n"], [3, "\"\"\"Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    \"\"\"", [389, 4], [391, 7], "    \"\"\"Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    \"\"\"\n"], [4, "\n", [391, 7], [391, 8], "    \"\"\"\n"], [1, "buffer", [392, 4], [392, 10], "    buffer = _builtin_open(filename, 'rb')\n"], [22, "=", [392, 11], [392, 12], "    buffer = _builtin_open(filename, 'rb')\n"], [1, "_builtin_open", [392, 13], [392, 26], "    buffer = _builtin_open(filename, 'rb')\n"], [7, "(", [392, 26], [392, 27], "    buffer = _builtin_open(filename, 'rb')\n"], [1, "filename", [392, 27], [392, 35], "    buffer = _builtin_open(filename, 'rb')\n"], [12, ",", [392, 35], [392, 36], "    buffer = _builtin_open(filename, 'rb')\n"], [3, "'rb'", [392, 37], [392, 41], "    buffer = _builtin_open(filename, 'rb')\n"], [8, ")", [392, 41], [392, 42], "    buffer = _builtin_open(filename, 'rb')\n"], [4, "\n", [392, 42], [392, 43], "    buffer = _builtin_open(filename, 'rb')\n"], [1, "try", [393, 4], [393, 7], "    try:\n"], [11, ":", [393, 7], [393, 8], "    try:\n"], [4, "\n", [393, 8], [393, 9], "    try:\n"], [5, "        ", [394, 0], [394, 8], "        encoding, lines = detect_encoding(buffer.readline)\n"], [1, "encoding", [394, 8], [394, 16], "        encoding, lines = detect_encoding(buffer.readline)\n"], [12, ",", [394, 16], [394, 17], "        encoding, lines = detect_encoding(buffer.readline)\n"], [1, "lines", [394, 18], [394, 23], "        encoding, lines = detect_encoding(buffer.readline)\n"], [22, "=", [394, 24], [394, 25], "        encoding, lines = detect_encoding(buffer.readline)\n"], [1, "detect_encoding", [394, 26], [394, 41], "        encoding, lines = detect_encoding(buffer.readline)\n"], [7, "(", [394, 41], [394, 42], "        encoding, lines = detect_encoding(buffer.readline)\n"], [1, "buffer", [394, 42], [394, 48], "        encoding, lines = detect_encoding(buffer.readline)\n"], [23, ".", [394, 48], [394, 49], "        encoding, lines = detect_encoding(buffer.readline)\n"], [1, "readline", [394, 49], [394, 57], "        encoding, lines = detect_encoding(buffer.readline)\n"], [8, ")", [394, 57], [394, 58], "        encoding, lines = detect_encoding(buffer.readline)\n"], [4, "\n", [394, 58], [394, 59], "        encoding, lines = detect_encoding(buffer.readline)\n"], [1, "buffer", [395, 8], [395, 14], "        buffer.seek(0)\n"], [23, ".", [395, 14], [395, 15], "        buffer.seek(0)\n"], [1, "seek", [395, 15], [395, 19], "        buffer.seek(0)\n"], [7, "(", [395, 19], [395, 20], "        buffer.seek(0)\n"], [2, "0", [395, 20], [395, 21], "        buffer.seek(0)\n"], [8, ")", [395, 21], [395, 22], "        buffer.seek(0)\n"], [4, "\n", [395, 22], [395, 23], "        buffer.seek(0)\n"], [1, "text", [396, 8], [396, 12], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [22, "=", [396, 13], [396, 14], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [1, "TextIOWrapper", [396, 15], [396, 28], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [7, "(", [396, 28], [396, 29], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [1, "buffer", [396, 29], [396, 35], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [12, ",", [396, 35], [396, 36], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [1, "encoding", [396, 37], [396, 45], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [12, ",", [396, 45], [396, 46], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [1, "line_buffering", [396, 47], [396, 61], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [22, "=", [396, 61], [396, 62], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [1, "True", [396, 62], [396, 66], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [8, ")", [396, 66], [396, 67], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [4, "\n", [396, 67], [396, 68], "        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n"], [1, "text", [397, 8], [397, 12], "        text.mode = 'r'\n"], [23, ".", [397, 12], [397, 13], "        text.mode = 'r'\n"], [1, "mode", [397, 13], [397, 17], "        text.mode = 'r'\n"], [22, "=", [397, 18], [397, 19], "        text.mode = 'r'\n"], [3, "'r'", [397, 20], [397, 23], "        text.mode = 'r'\n"], [4, "\n", [397, 23], [397, 24], "        text.mode = 'r'\n"], [1, "return", [398, 8], [398, 14], "        return text\n"], [1, "text", [398, 15], [398, 19], "        return text\n"], [4, "\n", [398, 19], [398, 20], "        return text\n"], [6, "", [399, 4], [399, 4], "    except:\n"], [1, "except", [399, 4], [399, 10], "    except:\n"], [11, ":", [399, 10], [399, 11], "    except:\n"], [4, "\n", [399, 11], [399, 12], "    except:\n"], [5, "        ", [400, 0], [400, 8], "        buffer.close()\n"], [1, "buffer", [400, 8], [400, 14], "        buffer.close()\n"], [23, ".", [400, 14], [400, 15], "        buffer.close()\n"], [1, "close", [400, 15], [400, 20], "        buffer.close()\n"], [7, "(", [400, 20], [400, 21], "        buffer.close()\n"], [8, ")", [400, 21], [400, 22], "        buffer.close()\n"], [4, "\n", [400, 22], [400, 23], "        buffer.close()\n"], [1, "raise", [401, 8], [401, 13], "        raise\n"], [4, "\n", [401, 13], [401, 14], "        raise\n"], [6, "", [404, 0], [404, 0], "def tokenize(readline):\n"], [6, "", [404, 0], [404, 0], "def tokenize(readline):\n"], [1, "def", [404, 0], [404, 3], "def tokenize(readline):\n"], [1, "tokenize", [404, 4], [404, 12], "def tokenize(readline):\n"], [7, "(", [404, 12], [404, 13], "def tokenize(readline):\n"], [1, "readline", [404, 13], [404, 21], "def tokenize(readline):\n"], [8, ")", [404, 21], [404, 22], "def tokenize(readline):\n"], [11, ":", [404, 22], [404, 23], "def tokenize(readline):\n"], [4, "\n", [404, 23], [404, 24], "def tokenize(readline):\n"], [5, "    ", [405, 0], [405, 4], "    \"\"\"\n"], [3, "\"\"\"\n    The tokenize() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternatively, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found.  The line passed is the\n    physical line.\n\n    The first token sequence will always be an ENCODING token\n    which tells you which encoding was used to decode the bytes stream.\n    \"\"\"", [405, 4], [422, 7], "    \"\"\"\n    The tokenize() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternatively, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found.  The line passed is the\n    physical line.\n\n    The first token sequence will always be an ENCODING token\n    which tells you which encoding was used to decode the bytes stream.\n    \"\"\"\n"], [4, "\n", [422, 7], [422, 8], "    \"\"\"\n"], [1, "encoding", [423, 4], [423, 12], "    encoding, consumed = detect_encoding(readline)\n"], [12, ",", [423, 12], [423, 13], "    encoding, consumed = detect_encoding(readline)\n"], [1, "consumed", [423, 14], [423, 22], "    encoding, consumed = detect_encoding(readline)\n"], [22, "=", [423, 23], [423, 24], "    encoding, consumed = detect_encoding(readline)\n"], [1, "detect_encoding", [423, 25], [423, 40], "    encoding, consumed = detect_encoding(readline)\n"], [7, "(", [423, 40], [423, 41], "    encoding, consumed = detect_encoding(readline)\n"], [1, "readline", [423, 41], [423, 49], "    encoding, consumed = detect_encoding(readline)\n"], [8, ")", [423, 49], [423, 50], "    encoding, consumed = detect_encoding(readline)\n"], [4, "\n", [423, 50], [423, 51], "    encoding, consumed = detect_encoding(readline)\n"], [1, "empty", [424, 4], [424, 9], "    empty = _itertools.repeat(b\"\")\n"], [22, "=", [424, 10], [424, 11], "    empty = _itertools.repeat(b\"\")\n"], [1, "_itertools", [424, 12], [424, 22], "    empty = _itertools.repeat(b\"\")\n"], [23, ".", [424, 22], [424, 23], "    empty = _itertools.repeat(b\"\")\n"], [1, "repeat", [424, 23], [424, 29], "    empty = _itertools.repeat(b\"\")\n"], [7, "(", [424, 29], [424, 30], "    empty = _itertools.repeat(b\"\")\n"], [3, "b\"\"", [424, 30], [424, 33], "    empty = _itertools.repeat(b\"\")\n"], [8, ")", [424, 33], [424, 34], "    empty = _itertools.repeat(b\"\")\n"], [4, "\n", [424, 34], [424, 35], "    empty = _itertools.repeat(b\"\")\n"], [1, "rl_gen", [425, 4], [425, 10], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [22, "=", [425, 11], [425, 12], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "_itertools", [425, 13], [425, 23], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [23, ".", [425, 23], [425, 24], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "chain", [425, 24], [425, 29], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [7, "(", [425, 29], [425, 30], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "consumed", [425, 30], [425, 38], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [12, ",", [425, 38], [425, 39], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "iter", [425, 40], [425, 44], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [7, "(", [425, 44], [425, 45], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "readline", [425, 45], [425, 53], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [12, ",", [425, 53], [425, 54], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [3, "b\"\"", [425, 55], [425, 58], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [8, ")", [425, 58], [425, 59], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [12, ",", [425, 59], [425, 60], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "empty", [425, 61], [425, 66], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [8, ")", [425, 66], [425, 67], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [4, "\n", [425, 67], [425, 68], "    rl_gen = _itertools.chain(consumed, iter(readline, b\"\"), empty)\n"], [1, "return", [426, 4], [426, 10], "    return _tokenize(rl_gen.__next__, encoding)\n"], [1, "_tokenize", [426, 11], [426, 20], "    return _tokenize(rl_gen.__next__, encoding)\n"], [7, "(", [426, 20], [426, 21], "    return _tokenize(rl_gen.__next__, encoding)\n"], [1, "rl_gen", [426, 21], [426, 27], "    return _tokenize(rl_gen.__next__, encoding)\n"], [23, ".", [426, 27], [426, 28], "    return _tokenize(rl_gen.__next__, encoding)\n"], [1, "__next__", [426, 28], [426, 36], "    return _tokenize(rl_gen.__next__, encoding)\n"], [12, ",", [426, 36], [426, 37], "    return _tokenize(rl_gen.__next__, encoding)\n"], [1, "encoding", [426, 38], [426, 46], "    return _tokenize(rl_gen.__next__, encoding)\n"], [8, ")", [426, 46], [426, 47], "    return _tokenize(rl_gen.__next__, encoding)\n"], [4, "\n", [426, 47], [426, 48], "    return _tokenize(rl_gen.__next__, encoding)\n"], [6, "", [429, 0], [429, 0], "def _tokenize(readline, encoding):\n"], [1, "def", [429, 0], [429, 3], "def _tokenize(readline, encoding):\n"], [1, "_tokenize", [429, 4], [429, 13], "def _tokenize(readline, encoding):\n"], [7, "(", [429, 13], [429, 14], "def _tokenize(readline, encoding):\n"], [1, "readline", [429, 14], [429, 22], "def _tokenize(readline, encoding):\n"], [12, ",", [429, 22], [429, 23], "def _tokenize(readline, encoding):\n"], [1, "encoding", [429, 24], [429, 32], "def _tokenize(readline, encoding):\n"], [8, ")", [429, 32], [429, 33], "def _tokenize(readline, encoding):\n"], [11, ":", [429, 33], [429, 34], "def _tokenize(readline, encoding):\n"], [4, "\n", [429, 34], [429, 35], "def _tokenize(readline, encoding):\n"], [5, "    ", [430, 0], [430, 4], "    lnum = parenlev = continued = 0\n"], [1, "lnum", [430, 4], [430, 8], "    lnum = parenlev = continued = 0\n"], [22, "=", [430, 9], [430, 10], "    lnum = parenlev = continued = 0\n"], [1, "parenlev", [430, 11], [430, 19], "    lnum = parenlev = continued = 0\n"], [22, "=", [430, 20], [430, 21], "    lnum = parenlev = continued = 0\n"], [1, "continued", [430, 22], [430, 31], "    lnum = parenlev = continued = 0\n"], [22, "=", [430, 32], [430, 33], "    lnum = parenlev = continued = 0\n"], [2, "0", [430, 34], [430, 35], "    lnum = parenlev = continued = 0\n"], [4, "\n", [430, 35], [430, 36], "    lnum = parenlev = continued = 0\n"], [1, "numchars", [431, 4], [431, 12], "    numchars = '0123456789'\n"], [22, "=", [431, 13], [431, 14], "    numchars = '0123456789'\n"], [3, "'0123456789'", [431, 15], [431, 27], "    numchars = '0123456789'\n"], [4, "\n", [431, 27], [431, 28], "    numchars = '0123456789'\n"], [1, "contstr", [432, 4], [432, 11], "    contstr, needcont = '', 0\n"], [12, ",", [432, 11], [432, 12], "    contstr, needcont = '', 0\n"], [1, "needcont", [432, 13], [432, 21], "    contstr, needcont = '', 0\n"], [22, "=", [432, 22], [432, 23], "    contstr, needcont = '', 0\n"], [3, "''", [432, 24], [432, 26], "    contstr, needcont = '', 0\n"], [12, ",", [432, 26], [432, 27], "    contstr, needcont = '', 0\n"], [2, "0", [432, 28], [432, 29], "    contstr, needcont = '', 0\n"], [4, "\n", [432, 29], [432, 30], "    contstr, needcont = '', 0\n"], [1, "contline", [433, 4], [433, 12], "    contline = None\n"], [22, "=", [433, 13], [433, 14], "    contline = None\n"], [1, "None", [433, 15], [433, 19], "    contline = None\n"], [4, "\n", [433, 19], [433, 20], "    contline = None\n"], [1, "indents", [434, 4], [434, 11], "    indents = [0]\n"], [22, "=", [434, 12], [434, 13], "    indents = [0]\n"], [9, "[", [434, 14], [434, 15], "    indents = [0]\n"], [2, "0", [434, 15], [434, 16], "    indents = [0]\n"], [10, "]", [434, 16], [434, 17], "    indents = [0]\n"], [4, "\n", [434, 17], [434, 18], "    indents = [0]\n"], [1, "if", [436, 4], [436, 6], "    if encoding is not None:\n"], [1, "encoding", [436, 7], [436, 15], "    if encoding is not None:\n"], [1, "is", [436, 16], [436, 18], "    if encoding is not None:\n"], [1, "not", [436, 19], [436, 22], "    if encoding is not None:\n"], [1, "None", [436, 23], [436, 27], "    if encoding is not None:\n"], [11, ":", [436, 27], [436, 28], "    if encoding is not None:\n"], [4, "\n", [436, 28], [436, 29], "    if encoding is not None:\n"], [5, "        ", [437, 0], [437, 8], "        if encoding == \"utf-8-sig\":\n"], [1, "if", [437, 8], [437, 10], "        if encoding == \"utf-8-sig\":\n"], [1, "encoding", [437, 11], [437, 19], "        if encoding == \"utf-8-sig\":\n"], [27, "==", [437, 20], [437, 22], "        if encoding == \"utf-8-sig\":\n"], [3, "\"utf-8-sig\"", [437, 23], [437, 34], "        if encoding == \"utf-8-sig\":\n"], [11, ":", [437, 34], [437, 35], "        if encoding == \"utf-8-sig\":\n"], [4, "\n", [437, 35], [437, 36], "        if encoding == \"utf-8-sig\":\n"], [5, "            ", [439, 0], [439, 12], "            encoding = \"utf-8\"\n"], [1, "encoding", [439, 12], [439, 20], "            encoding = \"utf-8\"\n"], [22, "=", [439, 21], [439, 22], "            encoding = \"utf-8\"\n"], [3, "\"utf-8\"", [439, 23], [439, 30], "            encoding = \"utf-8\"\n"], [4, "\n", [439, 30], [439, 31], "            encoding = \"utf-8\"\n"], [6, "", [440, 8], [440, 8], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [1, "yield", [440, 8], [440, 13], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [1, "TokenInfo", [440, 14], [440, 23], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [7, "(", [440, 23], [440, 24], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [1, "ENCODING", [440, 24], [440, 32], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [12, ",", [440, 32], [440, 33], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [1, "encoding", [440, 34], [440, 42], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [12, ",", [440, 42], [440, 43], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [7, "(", [440, 44], [440, 45], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [2, "0", [440, 45], [440, 46], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [12, ",", [440, 46], [440, 47], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [2, "0", [440, 48], [440, 49], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [8, ")", [440, 49], [440, 50], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [12, ",", [440, 50], [440, 51], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [7, "(", [440, 52], [440, 53], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [2, "0", [440, 53], [440, 54], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [12, ",", [440, 54], [440, 55], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [2, "0", [440, 56], [440, 57], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [8, ")", [440, 57], [440, 58], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [12, ",", [440, 58], [440, 59], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [3, "''", [440, 60], [440, 62], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [8, ")", [440, 62], [440, 63], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [4, "\n", [440, 63], [440, 64], "        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n"], [6, "", [441, 4], [441, 4], "    last_line = b''\n"], [1, "last_line", [441, 4], [441, 13], "    last_line = b''\n"], [22, "=", [441, 14], [441, 15], "    last_line = b''\n"], [3, "b''", [441, 16], [441, 19], "    last_line = b''\n"], [4, "\n", [441, 19], [441, 20], "    last_line = b''\n"], [1, "line", [442, 4], [442, 8], "    line = b''\n"], [22, "=", [442, 9], [442, 10], "    line = b''\n"], [3, "b''", [442, 11], [442, 14], "    line = b''\n"], [4, "\n", [442, 14], [442, 15], "    line = b''\n"], [1, "while", [443, 4], [443, 9], "    while True:                                # loop over lines in stream\n"], [1, "True", [443, 10], [443, 14], "    while True:                                # loop over lines in stream\n"], [11, ":", [443, 14], [443, 15], "    while True:                                # loop over lines in stream\n"], [4, "\n", [443, 74], [443, 75], "    while True:                                # loop over lines in stream\n"], [5, "        ", [444, 0], [444, 8], "        try:\n"], [1, "try", [444, 8], [444, 11], "        try:\n"], [11, ":", [444, 11], [444, 12], "        try:\n"], [4, "\n", [444, 12], [444, 13], "        try:\n"], [5, "            ", [449, 0], [449, 12], "            last_line = line\n"], [1, "last_line", [449, 12], [449, 21], "            last_line = line\n"], [22, "=", [449, 22], [449, 23], "            last_line = line\n"], [1, "line", [449, 24], [449, 28], "            last_line = line\n"], [4, "\n", [449, 28], [449, 29], "            last_line = line\n"], [1, "line", [450, 12], [450, 16], "            line = readline()\n"], [22, "=", [450, 17], [450, 18], "            line = readline()\n"], [1, "readline", [450, 19], [450, 27], "            line = readline()\n"], [7, "(", [450, 27], [450, 28], "            line = readline()\n"], [8, ")", [450, 28], [450, 29], "            line = readline()\n"], [4, "\n", [450, 29], [450, 30], "            line = readline()\n"], [6, "", [451, 8], [451, 8], "        except StopIteration:\n"], [1, "except", [451, 8], [451, 14], "        except StopIteration:\n"], [1, "StopIteration", [451, 15], [451, 28], "        except StopIteration:\n"], [11, ":", [451, 28], [451, 29], "        except StopIteration:\n"], [4, "\n", [451, 29], [451, 30], "        except StopIteration:\n"], [5, "            ", [452, 0], [452, 12], "            line = b''\n"], [1, "line", [452, 12], [452, 16], "            line = b''\n"], [22, "=", [452, 17], [452, 18], "            line = b''\n"], [3, "b''", [452, 19], [452, 22], "            line = b''\n"], [4, "\n", [452, 22], [452, 23], "            line = b''\n"], [6, "", [454, 8], [454, 8], "        if encoding is not None:\n"], [1, "if", [454, 8], [454, 10], "        if encoding is not None:\n"], [1, "encoding", [454, 11], [454, 19], "        if encoding is not None:\n"], [1, "is", [454, 20], [454, 22], "        if encoding is not None:\n"], [1, "not", [454, 23], [454, 26], "        if encoding is not None:\n"], [1, "None", [454, 27], [454, 31], "        if encoding is not None:\n"], [11, ":", [454, 31], [454, 32], "        if encoding is not None:\n"], [4, "\n", [454, 32], [454, 33], "        if encoding is not None:\n"], [5, "            ", [455, 0], [455, 12], "            line = line.decode(encoding)\n"], [1, "line", [455, 12], [455, 16], "            line = line.decode(encoding)\n"], [22, "=", [455, 17], [455, 18], "            line = line.decode(encoding)\n"], [1, "line", [455, 19], [455, 23], "            line = line.decode(encoding)\n"], [23, ".", [455, 23], [455, 24], "            line = line.decode(encoding)\n"], [1, "decode", [455, 24], [455, 30], "            line = line.decode(encoding)\n"], [7, "(", [455, 30], [455, 31], "            line = line.decode(encoding)\n"], [1, "encoding", [455, 31], [455, 39], "            line = line.decode(encoding)\n"], [8, ")", [455, 39], [455, 40], "            line = line.decode(encoding)\n"], [4, "\n", [455, 40], [455, 41], "            line = line.decode(encoding)\n"], [6, "", [456, 8], [456, 8], "        lnum += 1\n"], [1, "lnum", [456, 8], [456, 12], "        lnum += 1\n"], [36, "+=", [456, 13], [456, 15], "        lnum += 1\n"], [2, "1", [456, 16], [456, 17], "        lnum += 1\n"], [4, "\n", [456, 17], [456, 18], "        lnum += 1\n"], [1, "pos", [457, 8], [457, 11], "        pos, max = 0, len(line)\n"], [12, ",", [457, 11], [457, 12], "        pos, max = 0, len(line)\n"], [1, "max", [457, 13], [457, 16], "        pos, max = 0, len(line)\n"], [22, "=", [457, 17], [457, 18], "        pos, max = 0, len(line)\n"], [2, "0", [457, 19], [457, 20], "        pos, max = 0, len(line)\n"], [12, ",", [457, 20], [457, 21], "        pos, max = 0, len(line)\n"], [1, "len", [457, 22], [457, 25], "        pos, max = 0, len(line)\n"], [7, "(", [457, 25], [457, 26], "        pos, max = 0, len(line)\n"], [1, "line", [457, 26], [457, 30], "        pos, max = 0, len(line)\n"], [8, ")", [457, 30], [457, 31], "        pos, max = 0, len(line)\n"], [4, "\n", [457, 31], [457, 32], "        pos, max = 0, len(line)\n"], [1, "if", [459, 8], [459, 10], "        if contstr:                            # continued string\n"], [1, "contstr", [459, 11], [459, 18], "        if contstr:                            # continued string\n"], [11, ":", [459, 18], [459, 19], "        if contstr:                            # continued string\n"], [4, "\n", [459, 65], [459, 66], "        if contstr:                            # continued string\n"], [5, "            ", [460, 0], [460, 12], "            if not line:\n"], [1, "if", [460, 12], [460, 14], "            if not line:\n"], [1, "not", [460, 15], [460, 18], "            if not line:\n"], [1, "line", [460, 19], [460, 23], "            if not line:\n"], [11, ":", [460, 23], [460, 24], "            if not line:\n"], [4, "\n", [460, 24], [460, 25], "            if not line:\n"], [5, "                ", [461, 0], [461, 16], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [1, "raise", [461, 16], [461, 21], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [1, "TokenError", [461, 22], [461, 32], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [7, "(", [461, 32], [461, 33], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [3, "\"EOF in multi-line string\"", [461, 33], [461, 59], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [12, ",", [461, 59], [461, 60], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [1, "strstart", [461, 61], [461, 69], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [8, ")", [461, 69], [461, 70], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [4, "\n", [461, 70], [461, 71], "                raise TokenError(\"EOF in multi-line string\", strstart)\n"], [6, "", [462, 12], [462, 12], "            endmatch = endprog.match(line)\n"], [1, "endmatch", [462, 12], [462, 20], "            endmatch = endprog.match(line)\n"], [22, "=", [462, 21], [462, 22], "            endmatch = endprog.match(line)\n"], [1, "endprog", [462, 23], [462, 30], "            endmatch = endprog.match(line)\n"], [23, ".", [462, 30], [462, 31], "            endmatch = endprog.match(line)\n"], [1, "match", [462, 31], [462, 36], "            endmatch = endprog.match(line)\n"], [7, "(", [462, 36], [462, 37], "            endmatch = endprog.match(line)\n"], [1, "line", [462, 37], [462, 41], "            endmatch = endprog.match(line)\n"], [8, ")", [462, 41], [462, 42], "            endmatch = endprog.match(line)\n"], [4, "\n", [462, 42], [462, 43], "            endmatch = endprog.match(line)\n"], [1, "if", [463, 12], [463, 14], "            if endmatch:\n"], [1, "endmatch", [463, 15], [463, 23], "            if endmatch:\n"], [11, ":", [463, 23], [463, 24], "            if endmatch:\n"], [4, "\n", [463, 24], [463, 25], "            if endmatch:\n"], [5, "                ", [464, 0], [464, 16], "                pos = end = endmatch.end(0)\n"], [1, "pos", [464, 16], [464, 19], "                pos = end = endmatch.end(0)\n"], [22, "=", [464, 20], [464, 21], "                pos = end = endmatch.end(0)\n"], [1, "end", [464, 22], [464, 25], "                pos = end = endmatch.end(0)\n"], [22, "=", [464, 26], [464, 27], "                pos = end = endmatch.end(0)\n"], [1, "endmatch", [464, 28], [464, 36], "                pos = end = endmatch.end(0)\n"], [23, ".", [464, 36], [464, 37], "                pos = end = endmatch.end(0)\n"], [1, "end", [464, 37], [464, 40], "                pos = end = endmatch.end(0)\n"], [7, "(", [464, 40], [464, 41], "                pos = end = endmatch.end(0)\n"], [2, "0", [464, 41], [464, 42], "                pos = end = endmatch.end(0)\n"], [8, ")", [464, 42], [464, 43], "                pos = end = endmatch.end(0)\n"], [4, "\n", [464, 43], [464, 44], "                pos = end = endmatch.end(0)\n"], [1, "yield", [465, 16], [465, 21], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [1, "TokenInfo", [465, 22], [465, 31], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [7, "(", [465, 31], [465, 32], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [1, "STRING", [465, 32], [465, 38], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [12, ",", [465, 38], [465, 39], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [1, "contstr", [465, 40], [465, 47], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [14, "+", [465, 48], [465, 49], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [1, "line", [465, 50], [465, 54], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [9, "[", [465, 54], [465, 55], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [11, ":", [465, 55], [465, 56], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [1, "end", [465, 56], [465, 59], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [10, "]", [465, 59], [465, 60], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [12, ",", [465, 60], [465, 61], "                yield TokenInfo(STRING, contstr + line[:end],\n"], [1, "strstart", [466, 23], [466, 31], "                       strstart, (lnum, end), contline + line)\n"], [12, ",", [466, 31], [466, 32], "                       strstart, (lnum, end), contline + line)\n"], [7, "(", [466, 33], [466, 34], "                       strstart, (lnum, end), contline + line)\n"], [1, "lnum", [466, 34], [466, 38], "                       strstart, (lnum, end), contline + line)\n"], [12, ",", [466, 38], [466, 39], "                       strstart, (lnum, end), contline + line)\n"], [1, "end", [466, 40], [466, 43], "                       strstart, (lnum, end), contline + line)\n"], [8, ")", [466, 43], [466, 44], "                       strstart, (lnum, end), contline + line)\n"], [12, ",", [466, 44], [466, 45], "                       strstart, (lnum, end), contline + line)\n"], [1, "contline", [466, 46], [466, 54], "                       strstart, (lnum, end), contline + line)\n"], [14, "+", [466, 55], [466, 56], "                       strstart, (lnum, end), contline + line)\n"], [1, "line", [466, 57], [466, 61], "                       strstart, (lnum, end), contline + line)\n"], [8, ")", [466, 61], [466, 62], "                       strstart, (lnum, end), contline + line)\n"], [4, "\n", [466, 62], [466, 63], "                       strstart, (lnum, end), contline + line)\n"], [1, "contstr", [467, 16], [467, 23], "                contstr, needcont = '', 0\n"], [12, ",", [467, 23], [467, 24], "                contstr, needcont = '', 0\n"], [1, "needcont", [467, 25], [467, 33], "                contstr, needcont = '', 0\n"], [22, "=", [467, 34], [467, 35], "                contstr, needcont = '', 0\n"], [3, "''", [467, 36], [467, 38], "                contstr, needcont = '', 0\n"], [12, ",", [467, 38], [467, 39], "                contstr, needcont = '', 0\n"], [2, "0", [467, 40], [467, 41], "                contstr, needcont = '', 0\n"], [4, "\n", [467, 41], [467, 42], "                contstr, needcont = '', 0\n"], [1, "contline", [468, 16], [468, 24], "                contline = None\n"], [22, "=", [468, 25], [468, 26], "                contline = None\n"], [1, "None", [468, 27], [468, 31], "                contline = None\n"], [4, "\n", [468, 31], [468, 32], "                contline = None\n"], [6, "", [469, 12], [469, 12], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [1, "elif", [469, 12], [469, 16], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [1, "needcont", [469, 17], [469, 25], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [1, "and", [469, 26], [469, 29], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [1, "line", [469, 30], [469, 34], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [9, "[", [469, 34], [469, 35], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [15, "-", [469, 35], [469, 36], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [2, "2", [469, 36], [469, 37], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [11, ":", [469, 37], [469, 38], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [10, "]", [469, 38], [469, 39], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [28, "!=", [469, 40], [469, 42], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [3, "'\\\\\\n'", [469, 43], [469, 49], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [1, "and", [469, 50], [469, 53], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [1, "line", [469, 54], [469, 58], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [9, "[", [469, 58], [469, 59], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [15, "-", [469, 59], [469, 60], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [2, "3", [469, 60], [469, 61], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [11, ":", [469, 61], [469, 62], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [10, "]", [469, 62], [469, 63], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [28, "!=", [469, 64], [469, 66], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [3, "'\\\\\\r\\n'", [469, 67], [469, 75], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [11, ":", [469, 75], [469, 76], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [4, "\n", [469, 76], [469, 77], "            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n"], [5, "                ", [470, 0], [470, 16], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [1, "yield", [470, 16], [470, 21], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [1, "TokenInfo", [470, 22], [470, 31], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [7, "(", [470, 31], [470, 32], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [1, "ERRORTOKEN", [470, 32], [470, 42], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [12, ",", [470, 42], [470, 43], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [1, "contstr", [470, 44], [470, 51], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [14, "+", [470, 52], [470, 53], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [1, "line", [470, 54], [470, 58], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [12, ",", [470, 58], [470, 59], "                yield TokenInfo(ERRORTOKEN, contstr + line,\n"], [1, "strstart", [471, 27], [471, 35], "                           strstart, (lnum, len(line)), contline)\n"], [12, ",", [471, 35], [471, 36], "                           strstart, (lnum, len(line)), contline)\n"], [7, "(", [471, 37], [471, 38], "                           strstart, (lnum, len(line)), contline)\n"], [1, "lnum", [471, 38], [471, 42], "                           strstart, (lnum, len(line)), contline)\n"], [12, ",", [471, 42], [471, 43], "                           strstart, (lnum, len(line)), contline)\n"], [1, "len", [471, 44], [471, 47], "                           strstart, (lnum, len(line)), contline)\n"], [7, "(", [471, 47], [471, 48], "                           strstart, (lnum, len(line)), contline)\n"], [1, "line", [471, 48], [471, 52], "                           strstart, (lnum, len(line)), contline)\n"], [8, ")", [471, 52], [471, 53], "                           strstart, (lnum, len(line)), contline)\n"], [8, ")", [471, 53], [471, 54], "                           strstart, (lnum, len(line)), contline)\n"], [12, ",", [471, 54], [471, 55], "                           strstart, (lnum, len(line)), contline)\n"], [1, "contline", [471, 56], [471, 64], "                           strstart, (lnum, len(line)), contline)\n"], [8, ")", [471, 64], [471, 65], "                           strstart, (lnum, len(line)), contline)\n"], [4, "\n", [471, 65], [471, 66], "                           strstart, (lnum, len(line)), contline)\n"], [1, "contstr", [472, 16], [472, 23], "                contstr = ''\n"], [22, "=", [472, 24], [472, 25], "                contstr = ''\n"], [3, "''", [472, 26], [472, 28], "                contstr = ''\n"], [4, "\n", [472, 28], [472, 29], "                contstr = ''\n"], [1, "contline", [473, 16], [473, 24], "                contline = None\n"], [22, "=", [473, 25], [473, 26], "                contline = None\n"], [1, "None", [473, 27], [473, 31], "                contline = None\n"], [4, "\n", [473, 31], [473, 32], "                contline = None\n"], [1, "continue", [474, 16], [474, 24], "                continue\n"], [4, "\n", [474, 24], [474, 25], "                continue\n"], [6, "", [475, 12], [475, 12], "            else:\n"], [1, "else", [475, 12], [475, 16], "            else:\n"], [11, ":", [475, 16], [475, 17], "            else:\n"], [4, "\n", [475, 17], [475, 18], "            else:\n"], [5, "                ", [476, 0], [476, 16], "                contstr = contstr + line\n"], [1, "contstr", [476, 16], [476, 23], "                contstr = contstr + line\n"], [22, "=", [476, 24], [476, 25], "                contstr = contstr + line\n"], [1, "contstr", [476, 26], [476, 33], "                contstr = contstr + line\n"], [14, "+", [476, 34], [476, 35], "                contstr = contstr + line\n"], [1, "line", [476, 36], [476, 40], "                contstr = contstr + line\n"], [4, "\n", [476, 40], [476, 41], "                contstr = contstr + line\n"], [1, "contline", [477, 16], [477, 24], "                contline = contline + line\n"], [22, "=", [477, 25], [477, 26], "                contline = contline + line\n"], [1, "contline", [477, 27], [477, 35], "                contline = contline + line\n"], [14, "+", [477, 36], [477, 37], "                contline = contline + line\n"], [1, "line", [477, 38], [477, 42], "                contline = contline + line\n"], [4, "\n", [477, 42], [477, 43], "                contline = contline + line\n"], [1, "continue", [478, 16], [478, 24], "                continue\n"], [4, "\n", [478, 24], [478, 25], "                continue\n"], [6, "", [480, 8], [480, 8], "        elif parenlev == 0 and not continued:  # new statement\n"], [6, "", [480, 8], [480, 8], "        elif parenlev == 0 and not continued:  # new statement\n"], [1, "elif", [480, 8], [480, 12], "        elif parenlev == 0 and not continued:  # new statement\n"], [1, "parenlev", [480, 13], [480, 21], "        elif parenlev == 0 and not continued:  # new statement\n"], [27, "==", [480, 22], [480, 24], "        elif parenlev == 0 and not continued:  # new statement\n"], [2, "0", [480, 25], [480, 26], "        elif parenlev == 0 and not continued:  # new statement\n"], [1, "and", [480, 27], [480, 30], "        elif parenlev == 0 and not continued:  # new statement\n"], [1, "not", [480, 31], [480, 34], "        elif parenlev == 0 and not continued:  # new statement\n"], [1, "continued", [480, 35], [480, 44], "        elif parenlev == 0 and not continued:  # new statement\n"], [11, ":", [480, 44], [480, 45], "        elif parenlev == 0 and not continued:  # new statement\n"], [4, "\n", [480, 62], [480, 63], "        elif parenlev == 0 and not continued:  # new statement\n"], [5, "            ", [481, 0], [481, 12], "            if not line: break\n"], [1, "if", [481, 12], [481, 14], "            if not line: break\n"], [1, "not", [481, 15], [481, 18], "            if not line: break\n"], [1, "line", [481, 19], [481, 23], "            if not line: break\n"], [11, ":", [481, 23], [481, 24], "            if not line: break\n"], [1, "break", [481, 25], [481, 30], "            if not line: break\n"], [4, "\n", [481, 30], [481, 31], "            if not line: break\n"], [1, "column", [482, 12], [482, 18], "            column = 0\n"], [22, "=", [482, 19], [482, 20], "            column = 0\n"], [2, "0", [482, 21], [482, 22], "            column = 0\n"], [4, "\n", [482, 22], [482, 23], "            column = 0\n"], [1, "while", [483, 12], [483, 17], "            while pos < max:                   # measure leading whitespace\n"], [1, "pos", [483, 18], [483, 21], "            while pos < max:                   # measure leading whitespace\n"], [20, "<", [483, 22], [483, 23], "            while pos < max:                   # measure leading whitespace\n"], [1, "max", [483, 24], [483, 27], "            while pos < max:                   # measure leading whitespace\n"], [11, ":", [483, 27], [483, 28], "            while pos < max:                   # measure leading whitespace\n"], [4, "\n", [483, 75], [483, 76], "            while pos < max:                   # measure leading whitespace\n"], [5, "                ", [484, 0], [484, 16], "                if line[pos] == ' ':\n"], [1, "if", [484, 16], [484, 18], "                if line[pos] == ' ':\n"], [1, "line", [484, 19], [484, 23], "                if line[pos] == ' ':\n"], [9, "[", [484, 23], [484, 24], "                if line[pos] == ' ':\n"], [1, "pos", [484, 24], [484, 27], "                if line[pos] == ' ':\n"], [10, "]", [484, 27], [484, 28], "                if line[pos] == ' ':\n"], [27, "==", [484, 29], [484, 31], "                if line[pos] == ' ':\n"], [3, "' '", [484, 32], [484, 35], "                if line[pos] == ' ':\n"], [11, ":", [484, 35], [484, 36], "                if line[pos] == ' ':\n"], [4, "\n", [484, 36], [484, 37], "                if line[pos] == ' ':\n"], [5, "                    ", [485, 0], [485, 20], "                    column += 1\n"], [1, "column", [485, 20], [485, 26], "                    column += 1\n"], [36, "+=", [485, 27], [485, 29], "                    column += 1\n"], [2, "1", [485, 30], [485, 31], "                    column += 1\n"], [4, "\n", [485, 31], [485, 32], "                    column += 1\n"], [6, "", [486, 16], [486, 16], "                elif line[pos] == '\\t':\n"], [1, "elif", [486, 16], [486, 20], "                elif line[pos] == '\\t':\n"], [1, "line", [486, 21], [486, 25], "                elif line[pos] == '\\t':\n"], [9, "[", [486, 25], [486, 26], "                elif line[pos] == '\\t':\n"], [1, "pos", [486, 26], [486, 29], "                elif line[pos] == '\\t':\n"], [10, "]", [486, 29], [486, 30], "                elif line[pos] == '\\t':\n"], [27, "==", [486, 31], [486, 33], "                elif line[pos] == '\\t':\n"], [3, "'\\t'", [486, 34], [486, 38], "                elif line[pos] == '\\t':\n"], [11, ":", [486, 38], [486, 39], "                elif line[pos] == '\\t':\n"], [4, "\n", [486, 39], [486, 40], "                elif line[pos] == '\\t':\n"], [5, "                    ", [487, 0], [487, 20], "                    column = (column//tabsize + 1)*tabsize\n"], [1, "column", [487, 20], [487, 26], "                    column = (column//tabsize + 1)*tabsize\n"], [22, "=", [487, 27], [487, 28], "                    column = (column//tabsize + 1)*tabsize\n"], [7, "(", [487, 29], [487, 30], "                    column = (column//tabsize + 1)*tabsize\n"], [1, "column", [487, 30], [487, 36], "                    column = (column//tabsize + 1)*tabsize\n"], [47, "//", [487, 36], [487, 38], "                    column = (column//tabsize + 1)*tabsize\n"], [1, "tabsize", [487, 38], [487, 45], "                    column = (column//tabsize + 1)*tabsize\n"], [14, "+", [487, 46], [487, 47], "                    column = (column//tabsize + 1)*tabsize\n"], [2, "1", [487, 48], [487, 49], "                    column = (column//tabsize + 1)*tabsize\n"], [8, ")", [487, 49], [487, 50], "                    column = (column//tabsize + 1)*tabsize\n"], [16, "*", [487, 50], [487, 51], "                    column = (column//tabsize + 1)*tabsize\n"], [1, "tabsize", [487, 51], [487, 58], "                    column = (column//tabsize + 1)*tabsize\n"], [4, "\n", [487, 58], [487, 59], "                    column = (column//tabsize + 1)*tabsize\n"], [6, "", [488, 16], [488, 16], "                elif line[pos] == '\\f':\n"], [1, "elif", [488, 16], [488, 20], "                elif line[pos] == '\\f':\n"], [1, "line", [488, 21], [488, 25], "                elif line[pos] == '\\f':\n"], [9, "[", [488, 25], [488, 26], "                elif line[pos] == '\\f':\n"], [1, "pos", [488, 26], [488, 29], "                elif line[pos] == '\\f':\n"], [10, "]", [488, 29], [488, 30], "                elif line[pos] == '\\f':\n"], [27, "==", [488, 31], [488, 33], "                elif line[pos] == '\\f':\n"], [3, "'\\f'", [488, 34], [488, 38], "                elif line[pos] == '\\f':\n"], [11, ":", [488, 38], [488, 39], "                elif line[pos] == '\\f':\n"], [4, "\n", [488, 39], [488, 40], "                elif line[pos] == '\\f':\n"], [5, "                    ", [489, 0], [489, 20], "                    column = 0\n"], [1, "column", [489, 20], [489, 26], "                    column = 0\n"], [22, "=", [489, 27], [489, 28], "                    column = 0\n"], [2, "0", [489, 29], [489, 30], "                    column = 0\n"], [4, "\n", [489, 30], [489, 31], "                    column = 0\n"], [6, "", [490, 16], [490, 16], "                else:\n"], [1, "else", [490, 16], [490, 20], "                else:\n"], [11, ":", [490, 20], [490, 21], "                else:\n"], [4, "\n", [490, 21], [490, 22], "                else:\n"], [5, "                    ", [491, 0], [491, 20], "                    break\n"], [1, "break", [491, 20], [491, 25], "                    break\n"], [4, "\n", [491, 25], [491, 26], "                    break\n"], [6, "", [492, 16], [492, 16], "                pos += 1\n"], [1, "pos", [492, 16], [492, 19], "                pos += 1\n"], [36, "+=", [492, 20], [492, 22], "                pos += 1\n"], [2, "1", [492, 23], [492, 24], "                pos += 1\n"], [4, "\n", [492, 24], [492, 25], "                pos += 1\n"], [6, "", [493, 12], [493, 12], "            if pos == max:\n"], [1, "if", [493, 12], [493, 14], "            if pos == max:\n"], [1, "pos", [493, 15], [493, 18], "            if pos == max:\n"], [27, "==", [493, 19], [493, 21], "            if pos == max:\n"], [1, "max", [493, 22], [493, 25], "            if pos == max:\n"], [11, ":", [493, 25], [493, 26], "            if pos == max:\n"], [4, "\n", [493, 26], [493, 27], "            if pos == max:\n"], [5, "                ", [494, 0], [494, 16], "                break\n"], [1, "break", [494, 16], [494, 21], "                break\n"], [4, "\n", [494, 21], [494, 22], "                break\n"], [6, "", [496, 12], [496, 12], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [1, "if", [496, 12], [496, 14], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [1, "line", [496, 15], [496, 19], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [9, "[", [496, 19], [496, 20], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [1, "pos", [496, 20], [496, 23], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [10, "]", [496, 23], [496, 24], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [1, "in", [496, 25], [496, 27], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [3, "'#\\r\\n'", [496, 28], [496, 35], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [11, ":", [496, 35], [496, 36], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [4, "\n", [496, 77], [496, 78], "            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n"], [5, "                ", [497, 0], [497, 16], "                if line[pos] == '#':\n"], [1, "if", [497, 16], [497, 18], "                if line[pos] == '#':\n"], [1, "line", [497, 19], [497, 23], "                if line[pos] == '#':\n"], [9, "[", [497, 23], [497, 24], "                if line[pos] == '#':\n"], [1, "pos", [497, 24], [497, 27], "                if line[pos] == '#':\n"], [10, "]", [497, 27], [497, 28], "                if line[pos] == '#':\n"], [27, "==", [497, 29], [497, 31], "                if line[pos] == '#':\n"], [3, "'#'", [497, 32], [497, 35], "                if line[pos] == '#':\n"], [11, ":", [497, 35], [497, 36], "                if line[pos] == '#':\n"], [4, "\n", [497, 36], [497, 37], "                if line[pos] == '#':\n"], [5, "                    ", [498, 0], [498, 20], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [1, "comment_token", [498, 20], [498, 33], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [22, "=", [498, 34], [498, 35], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [1, "line", [498, 36], [498, 40], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [9, "[", [498, 40], [498, 41], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [1, "pos", [498, 41], [498, 44], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [11, ":", [498, 44], [498, 45], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [10, "]", [498, 45], [498, 46], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [23, ".", [498, 46], [498, 47], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [1, "rstrip", [498, 47], [498, 53], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [7, "(", [498, 53], [498, 54], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [3, "'\\r\\n'", [498, 54], [498, 60], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [8, ")", [498, 60], [498, 61], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [4, "\n", [498, 61], [498, 62], "                    comment_token = line[pos:].rstrip('\\r\\n')\n"], [1, "yield", [499, 20], [499, 25], "                    yield TokenInfo(COMMENT, comment_token,\n"], [1, "TokenInfo", [499, 26], [499, 35], "                    yield TokenInfo(COMMENT, comment_token,\n"], [7, "(", [499, 35], [499, 36], "                    yield TokenInfo(COMMENT, comment_token,\n"], [1, "COMMENT", [499, 36], [499, 43], "                    yield TokenInfo(COMMENT, comment_token,\n"], [12, ",", [499, 43], [499, 44], "                    yield TokenInfo(COMMENT, comment_token,\n"], [1, "comment_token", [499, 45], [499, 58], "                    yield TokenInfo(COMMENT, comment_token,\n"], [12, ",", [499, 58], [499, 59], "                    yield TokenInfo(COMMENT, comment_token,\n"], [7, "(", [500, 27], [500, 28], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "lnum", [500, 28], [500, 32], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [12, ",", [500, 32], [500, 33], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "pos", [500, 34], [500, 37], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [8, ")", [500, 37], [500, 38], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [12, ",", [500, 38], [500, 39], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [7, "(", [500, 40], [500, 41], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "lnum", [500, 41], [500, 45], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [12, ",", [500, 45], [500, 46], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "pos", [500, 47], [500, 50], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [14, "+", [500, 51], [500, 52], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "len", [500, 53], [500, 56], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [7, "(", [500, 56], [500, 57], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "comment_token", [500, 57], [500, 70], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [8, ")", [500, 70], [500, 71], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [8, ")", [500, 71], [500, 72], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [12, ",", [500, 72], [500, 73], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "line", [500, 74], [500, 78], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [8, ")", [500, 78], [500, 79], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [4, "\n", [500, 79], [500, 80], "                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n"], [1, "pos", [501, 20], [501, 23], "                    pos += len(comment_token)\n"], [36, "+=", [501, 24], [501, 26], "                    pos += len(comment_token)\n"], [1, "len", [501, 27], [501, 30], "                    pos += len(comment_token)\n"], [7, "(", [501, 30], [501, 31], "                    pos += len(comment_token)\n"], [1, "comment_token", [501, 31], [501, 44], "                    pos += len(comment_token)\n"], [8, ")", [501, 44], [501, 45], "                    pos += len(comment_token)\n"], [4, "\n", [501, 45], [501, 46], "                    pos += len(comment_token)\n"], [6, "", [503, 16], [503, 16], "                yield TokenInfo(NL, line[pos:],\n"], [1, "yield", [503, 16], [503, 21], "                yield TokenInfo(NL, line[pos:],\n"], [1, "TokenInfo", [503, 22], [503, 31], "                yield TokenInfo(NL, line[pos:],\n"], [7, "(", [503, 31], [503, 32], "                yield TokenInfo(NL, line[pos:],\n"], [1, "NL", [503, 32], [503, 34], "                yield TokenInfo(NL, line[pos:],\n"], [12, ",", [503, 34], [503, 35], "                yield TokenInfo(NL, line[pos:],\n"], [1, "line", [503, 36], [503, 40], "                yield TokenInfo(NL, line[pos:],\n"], [9, "[", [503, 40], [503, 41], "                yield TokenInfo(NL, line[pos:],\n"], [1, "pos", [503, 41], [503, 44], "                yield TokenInfo(NL, line[pos:],\n"], [11, ":", [503, 44], [503, 45], "                yield TokenInfo(NL, line[pos:],\n"], [10, "]", [503, 45], [503, 46], "                yield TokenInfo(NL, line[pos:],\n"], [12, ",", [503, 46], [503, 47], "                yield TokenInfo(NL, line[pos:],\n"], [7, "(", [504, 27], [504, 28], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "lnum", [504, 28], [504, 32], "                           (lnum, pos), (lnum, len(line)), line)\n"], [12, ",", [504, 32], [504, 33], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "pos", [504, 34], [504, 37], "                           (lnum, pos), (lnum, len(line)), line)\n"], [8, ")", [504, 37], [504, 38], "                           (lnum, pos), (lnum, len(line)), line)\n"], [12, ",", [504, 38], [504, 39], "                           (lnum, pos), (lnum, len(line)), line)\n"], [7, "(", [504, 40], [504, 41], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "lnum", [504, 41], [504, 45], "                           (lnum, pos), (lnum, len(line)), line)\n"], [12, ",", [504, 45], [504, 46], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "len", [504, 47], [504, 50], "                           (lnum, pos), (lnum, len(line)), line)\n"], [7, "(", [504, 50], [504, 51], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "line", [504, 51], [504, 55], "                           (lnum, pos), (lnum, len(line)), line)\n"], [8, ")", [504, 55], [504, 56], "                           (lnum, pos), (lnum, len(line)), line)\n"], [8, ")", [504, 56], [504, 57], "                           (lnum, pos), (lnum, len(line)), line)\n"], [12, ",", [504, 57], [504, 58], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "line", [504, 59], [504, 63], "                           (lnum, pos), (lnum, len(line)), line)\n"], [8, ")", [504, 63], [504, 64], "                           (lnum, pos), (lnum, len(line)), line)\n"], [4, "\n", [504, 64], [504, 65], "                           (lnum, pos), (lnum, len(line)), line)\n"], [1, "continue", [505, 16], [505, 24], "                continue\n"], [4, "\n", [505, 24], [505, 25], "                continue\n"], [6, "", [507, 12], [507, 12], "            if column > indents[-1]:           # count indents or dedents\n"], [1, "if", [507, 12], [507, 14], "            if column > indents[-1]:           # count indents or dedents\n"], [1, "column", [507, 15], [507, 21], "            if column > indents[-1]:           # count indents or dedents\n"], [21, ">", [507, 22], [507, 23], "            if column > indents[-1]:           # count indents or dedents\n"], [1, "indents", [507, 24], [507, 31], "            if column > indents[-1]:           # count indents or dedents\n"], [9, "[", [507, 31], [507, 32], "            if column > indents[-1]:           # count indents or dedents\n"], [15, "-", [507, 32], [507, 33], "            if column > indents[-1]:           # count indents or dedents\n"], [2, "1", [507, 33], [507, 34], "            if column > indents[-1]:           # count indents or dedents\n"], [10, "]", [507, 34], [507, 35], "            if column > indents[-1]:           # count indents or dedents\n"], [11, ":", [507, 35], [507, 36], "            if column > indents[-1]:           # count indents or dedents\n"], [4, "\n", [507, 73], [507, 74], "            if column > indents[-1]:           # count indents or dedents\n"], [5, "                ", [508, 0], [508, 16], "                indents.append(column)\n"], [1, "indents", [508, 16], [508, 23], "                indents.append(column)\n"], [23, ".", [508, 23], [508, 24], "                indents.append(column)\n"], [1, "append", [508, 24], [508, 30], "                indents.append(column)\n"], [7, "(", [508, 30], [508, 31], "                indents.append(column)\n"], [1, "column", [508, 31], [508, 37], "                indents.append(column)\n"], [8, ")", [508, 37], [508, 38], "                indents.append(column)\n"], [4, "\n", [508, 38], [508, 39], "                indents.append(column)\n"], [1, "yield", [509, 16], [509, 21], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "TokenInfo", [509, 22], [509, 31], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [7, "(", [509, 31], [509, 32], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "INDENT", [509, 32], [509, 38], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [12, ",", [509, 38], [509, 39], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "line", [509, 40], [509, 44], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [9, "[", [509, 44], [509, 45], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [11, ":", [509, 45], [509, 46], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "pos", [509, 46], [509, 49], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [10, "]", [509, 49], [509, 50], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [12, ",", [509, 50], [509, 51], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [7, "(", [509, 52], [509, 53], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "lnum", [509, 53], [509, 57], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [12, ",", [509, 57], [509, 58], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [2, "0", [509, 59], [509, 60], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [8, ")", [509, 60], [509, 61], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [12, ",", [509, 61], [509, 62], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [7, "(", [509, 63], [509, 64], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "lnum", [509, 64], [509, 68], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [12, ",", [509, 68], [509, 69], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "pos", [509, 70], [509, 73], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [8, ")", [509, 73], [509, 74], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [12, ",", [509, 74], [509, 75], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [1, "line", [509, 76], [509, 80], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [8, ")", [509, 80], [509, 81], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [4, "\n", [509, 81], [509, 82], "                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n"], [6, "", [510, 12], [510, 12], "            while column < indents[-1]:\n"], [1, "while", [510, 12], [510, 17], "            while column < indents[-1]:\n"], [1, "column", [510, 18], [510, 24], "            while column < indents[-1]:\n"], [20, "<", [510, 25], [510, 26], "            while column < indents[-1]:\n"], [1, "indents", [510, 27], [510, 34], "            while column < indents[-1]:\n"], [9, "[", [510, 34], [510, 35], "            while column < indents[-1]:\n"], [15, "-", [510, 35], [510, 36], "            while column < indents[-1]:\n"], [2, "1", [510, 36], [510, 37], "            while column < indents[-1]:\n"], [10, "]", [510, 37], [510, 38], "            while column < indents[-1]:\n"], [11, ":", [510, 38], [510, 39], "            while column < indents[-1]:\n"], [4, "\n", [510, 39], [510, 40], "            while column < indents[-1]:\n"], [5, "                ", [511, 0], [511, 16], "                if column not in indents:\n"], [1, "if", [511, 16], [511, 18], "                if column not in indents:\n"], [1, "column", [511, 19], [511, 25], "                if column not in indents:\n"], [1, "not", [511, 26], [511, 29], "                if column not in indents:\n"], [1, "in", [511, 30], [511, 32], "                if column not in indents:\n"], [1, "indents", [511, 33], [511, 40], "                if column not in indents:\n"], [11, ":", [511, 40], [511, 41], "                if column not in indents:\n"], [4, "\n", [511, 41], [511, 42], "                if column not in indents:\n"], [5, "                    ", [512, 0], [512, 20], "                    raise IndentationError(\n"], [1, "raise", [512, 20], [512, 25], "                    raise IndentationError(\n"], [1, "IndentationError", [512, 26], [512, 42], "                    raise IndentationError(\n"], [7, "(", [512, 42], [512, 43], "                    raise IndentationError(\n"], [3, "\"unindent does not match any outer indentation level\"", [513, 24], [513, 77], "                        \"unindent does not match any outer indentation level\",\n"], [12, ",", [513, 77], [513, 78], "                        \"unindent does not match any outer indentation level\",\n"], [7, "(", [514, 24], [514, 25], "                        (\"<tokenize>\", lnum, pos, line))\n"], [3, "\"<tokenize>\"", [514, 25], [514, 37], "                        (\"<tokenize>\", lnum, pos, line))\n"], [12, ",", [514, 37], [514, 38], "                        (\"<tokenize>\", lnum, pos, line))\n"], [1, "lnum", [514, 39], [514, 43], "                        (\"<tokenize>\", lnum, pos, line))\n"], [12, ",", [514, 43], [514, 44], "                        (\"<tokenize>\", lnum, pos, line))\n"], [1, "pos", [514, 45], [514, 48], "                        (\"<tokenize>\", lnum, pos, line))\n"], [12, ",", [514, 48], [514, 49], "                        (\"<tokenize>\", lnum, pos, line))\n"], [1, "line", [514, 50], [514, 54], "                        (\"<tokenize>\", lnum, pos, line))\n"], [8, ")", [514, 54], [514, 55], "                        (\"<tokenize>\", lnum, pos, line))\n"], [8, ")", [514, 55], [514, 56], "                        (\"<tokenize>\", lnum, pos, line))\n"], [4, "\n", [514, 56], [514, 57], "                        (\"<tokenize>\", lnum, pos, line))\n"], [6, "", [515, 16], [515, 16], "                indents = indents[:-1]\n"], [1, "indents", [515, 16], [515, 23], "                indents = indents[:-1]\n"], [22, "=", [515, 24], [515, 25], "                indents = indents[:-1]\n"], [1, "indents", [515, 26], [515, 33], "                indents = indents[:-1]\n"], [9, "[", [515, 33], [515, 34], "                indents = indents[:-1]\n"], [11, ":", [515, 34], [515, 35], "                indents = indents[:-1]\n"], [15, "-", [515, 35], [515, 36], "                indents = indents[:-1]\n"], [2, "1", [515, 36], [515, 37], "                indents = indents[:-1]\n"], [10, "]", [515, 37], [515, 38], "                indents = indents[:-1]\n"], [4, "\n", [515, 38], [515, 39], "                indents = indents[:-1]\n"], [1, "yield", [517, 16], [517, 21], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "TokenInfo", [517, 22], [517, 31], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [7, "(", [517, 31], [517, 32], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "DEDENT", [517, 32], [517, 38], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [12, ",", [517, 38], [517, 39], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [3, "''", [517, 40], [517, 42], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [12, ",", [517, 42], [517, 43], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [7, "(", [517, 44], [517, 45], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "lnum", [517, 45], [517, 49], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [12, ",", [517, 49], [517, 50], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "pos", [517, 51], [517, 54], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [8, ")", [517, 54], [517, 55], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [12, ",", [517, 55], [517, 56], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [7, "(", [517, 57], [517, 58], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "lnum", [517, 58], [517, 62], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [12, ",", [517, 62], [517, 63], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "pos", [517, 64], [517, 67], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [8, ")", [517, 67], [517, 68], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [12, ",", [517, 68], [517, 69], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [1, "line", [517, 70], [517, 74], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [8, ")", [517, 74], [517, 75], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [4, "\n", [517, 75], [517, 76], "                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n"], [6, "", [519, 8], [519, 8], "        else:                                  # continued statement\n"], [6, "", [519, 8], [519, 8], "        else:                                  # continued statement\n"], [1, "else", [519, 8], [519, 12], "        else:                                  # continued statement\n"], [11, ":", [519, 12], [519, 13], "        else:                                  # continued statement\n"], [4, "\n", [519, 68], [519, 69], "        else:                                  # continued statement\n"], [5, "            ", [520, 0], [520, 12], "            if not line:\n"], [1, "if", [520, 12], [520, 14], "            if not line:\n"], [1, "not", [520, 15], [520, 18], "            if not line:\n"], [1, "line", [520, 19], [520, 23], "            if not line:\n"], [11, ":", [520, 23], [520, 24], "            if not line:\n"], [4, "\n", [520, 24], [520, 25], "            if not line:\n"], [5, "                ", [521, 0], [521, 16], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [1, "raise", [521, 16], [521, 21], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [1, "TokenError", [521, 22], [521, 32], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [7, "(", [521, 32], [521, 33], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [3, "\"EOF in multi-line statement\"", [521, 33], [521, 62], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [12, ",", [521, 62], [521, 63], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [7, "(", [521, 64], [521, 65], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [1, "lnum", [521, 65], [521, 69], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [12, ",", [521, 69], [521, 70], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [2, "0", [521, 71], [521, 72], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [8, ")", [521, 72], [521, 73], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [8, ")", [521, 73], [521, 74], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [4, "\n", [521, 74], [521, 75], "                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n"], [6, "", [522, 12], [522, 12], "            continued = 0\n"], [1, "continued", [522, 12], [522, 21], "            continued = 0\n"], [22, "=", [522, 22], [522, 23], "            continued = 0\n"], [2, "0", [522, 24], [522, 25], "            continued = 0\n"], [4, "\n", [522, 25], [522, 26], "            continued = 0\n"], [6, "", [524, 8], [524, 8], "        while pos < max:\n"], [1, "while", [524, 8], [524, 13], "        while pos < max:\n"], [1, "pos", [524, 14], [524, 17], "        while pos < max:\n"], [20, "<", [524, 18], [524, 19], "        while pos < max:\n"], [1, "max", [524, 20], [524, 23], "        while pos < max:\n"], [11, ":", [524, 23], [524, 24], "        while pos < max:\n"], [4, "\n", [524, 24], [524, 25], "        while pos < max:\n"], [5, "            ", [525, 0], [525, 12], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "pseudomatch", [525, 12], [525, 23], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [22, "=", [525, 24], [525, 25], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "_compile", [525, 26], [525, 34], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [7, "(", [525, 34], [525, 35], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "PseudoToken", [525, 35], [525, 46], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [8, ")", [525, 46], [525, 47], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [23, ".", [525, 47], [525, 48], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "match", [525, 48], [525, 53], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [7, "(", [525, 53], [525, 54], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "line", [525, 54], [525, 58], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [12, ",", [525, 58], [525, 59], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "pos", [525, 60], [525, 63], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [8, ")", [525, 63], [525, 64], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [4, "\n", [525, 64], [525, 65], "            pseudomatch = _compile(PseudoToken).match(line, pos)\n"], [1, "if", [526, 12], [526, 14], "            if pseudomatch:                                # scan for tokens\n"], [1, "pseudomatch", [526, 15], [526, 26], "            if pseudomatch:                                # scan for tokens\n"], [11, ":", [526, 26], [526, 27], "            if pseudomatch:                                # scan for tokens\n"], [4, "\n", [526, 76], [526, 77], "            if pseudomatch:                                # scan for tokens\n"], [5, "                ", [527, 0], [527, 16], "                start, end = pseudomatch.span(1)\n"], [1, "start", [527, 16], [527, 21], "                start, end = pseudomatch.span(1)\n"], [12, ",", [527, 21], [527, 22], "                start, end = pseudomatch.span(1)\n"], [1, "end", [527, 23], [527, 26], "                start, end = pseudomatch.span(1)\n"], [22, "=", [527, 27], [527, 28], "                start, end = pseudomatch.span(1)\n"], [1, "pseudomatch", [527, 29], [527, 40], "                start, end = pseudomatch.span(1)\n"], [23, ".", [527, 40], [527, 41], "                start, end = pseudomatch.span(1)\n"], [1, "span", [527, 41], [527, 45], "                start, end = pseudomatch.span(1)\n"], [7, "(", [527, 45], [527, 46], "                start, end = pseudomatch.span(1)\n"], [2, "1", [527, 46], [527, 47], "                start, end = pseudomatch.span(1)\n"], [8, ")", [527, 47], [527, 48], "                start, end = pseudomatch.span(1)\n"], [4, "\n", [527, 48], [527, 49], "                start, end = pseudomatch.span(1)\n"], [1, "spos", [528, 16], [528, 20], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [12, ",", [528, 20], [528, 21], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "epos", [528, 22], [528, 26], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [12, ",", [528, 26], [528, 27], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "pos", [528, 28], [528, 31], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [22, "=", [528, 32], [528, 33], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [7, "(", [528, 34], [528, 35], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "lnum", [528, 35], [528, 39], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [12, ",", [528, 39], [528, 40], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "start", [528, 41], [528, 46], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [8, ")", [528, 46], [528, 47], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [12, ",", [528, 47], [528, 48], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [7, "(", [528, 49], [528, 50], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "lnum", [528, 50], [528, 54], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [12, ",", [528, 54], [528, 55], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "end", [528, 56], [528, 59], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [8, ")", [528, 59], [528, 60], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [12, ",", [528, 60], [528, 61], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "end", [528, 62], [528, 65], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [4, "\n", [528, 65], [528, 66], "                spos, epos, pos = (lnum, start), (lnum, end), end\n"], [1, "if", [529, 16], [529, 18], "                if start == end:\n"], [1, "start", [529, 19], [529, 24], "                if start == end:\n"], [27, "==", [529, 25], [529, 27], "                if start == end:\n"], [1, "end", [529, 28], [529, 31], "                if start == end:\n"], [11, ":", [529, 31], [529, 32], "                if start == end:\n"], [4, "\n", [529, 32], [529, 33], "                if start == end:\n"], [5, "                    ", [530, 0], [530, 20], "                    continue\n"], [1, "continue", [530, 20], [530, 28], "                    continue\n"], [4, "\n", [530, 28], [530, 29], "                    continue\n"], [6, "", [531, 16], [531, 16], "                token, initial = line[start:end], line[start]\n"], [1, "token", [531, 16], [531, 21], "                token, initial = line[start:end], line[start]\n"], [12, ",", [531, 21], [531, 22], "                token, initial = line[start:end], line[start]\n"], [1, "initial", [531, 23], [531, 30], "                token, initial = line[start:end], line[start]\n"], [22, "=", [531, 31], [531, 32], "                token, initial = line[start:end], line[start]\n"], [1, "line", [531, 33], [531, 37], "                token, initial = line[start:end], line[start]\n"], [9, "[", [531, 37], [531, 38], "                token, initial = line[start:end], line[start]\n"], [1, "start", [531, 38], [531, 43], "                token, initial = line[start:end], line[start]\n"], [11, ":", [531, 43], [531, 44], "                token, initial = line[start:end], line[start]\n"], [1, "end", [531, 44], [531, 47], "                token, initial = line[start:end], line[start]\n"], [10, "]", [531, 47], [531, 48], "                token, initial = line[start:end], line[start]\n"], [12, ",", [531, 48], [531, 49], "                token, initial = line[start:end], line[start]\n"], [1, "line", [531, 50], [531, 54], "                token, initial = line[start:end], line[start]\n"], [9, "[", [531, 54], [531, 55], "                token, initial = line[start:end], line[start]\n"], [1, "start", [531, 55], [531, 60], "                token, initial = line[start:end], line[start]\n"], [10, "]", [531, 60], [531, 61], "                token, initial = line[start:end], line[start]\n"], [4, "\n", [531, 61], [531, 62], "                token, initial = line[start:end], line[start]\n"], [1, "if", [533, 16], [533, 18], "                if (initial in numchars or                 # ordinary number\n"], [7, "(", [533, 19], [533, 20], "                if (initial in numchars or                 # ordinary number\n"], [1, "initial", [533, 20], [533, 27], "                if (initial in numchars or                 # ordinary number\n"], [1, "in", [533, 28], [533, 30], "                if (initial in numchars or                 # ordinary number\n"], [1, "numchars", [533, 31], [533, 39], "                if (initial in numchars or                 # ordinary number\n"], [1, "or", [533, 40], [533, 42], "                if (initial in numchars or                 # ordinary number\n"], [7, "(", [534, 20], [534, 21], "                    (initial == '.' and token != '.' and token != '...')):\n"], [1, "initial", [534, 21], [534, 28], "                    (initial == '.' and token != '.' and token != '...')):\n"], [27, "==", [534, 29], [534, 31], "                    (initial == '.' and token != '.' and token != '...')):\n"], [3, "'.'", [534, 32], [534, 35], "                    (initial == '.' and token != '.' and token != '...')):\n"], [1, "and", [534, 36], [534, 39], "                    (initial == '.' and token != '.' and token != '...')):\n"], [1, "token", [534, 40], [534, 45], "                    (initial == '.' and token != '.' and token != '...')):\n"], [28, "!=", [534, 46], [534, 48], "                    (initial == '.' and token != '.' and token != '...')):\n"], [3, "'.'", [534, 49], [534, 52], "                    (initial == '.' and token != '.' and token != '...')):\n"], [1, "and", [534, 53], [534, 56], "                    (initial == '.' and token != '.' and token != '...')):\n"], [1, "token", [534, 57], [534, 62], "                    (initial == '.' and token != '.' and token != '...')):\n"], [28, "!=", [534, 63], [534, 65], "                    (initial == '.' and token != '.' and token != '...')):\n"], [3, "'...'", [534, 66], [534, 71], "                    (initial == '.' and token != '.' and token != '...')):\n"], [8, ")", [534, 71], [534, 72], "                    (initial == '.' and token != '.' and token != '...')):\n"], [8, ")", [534, 72], [534, 73], "                    (initial == '.' and token != '.' and token != '...')):\n"], [11, ":", [534, 73], [534, 74], "                    (initial == '.' and token != '.' and token != '...')):\n"], [4, "\n", [534, 74], [534, 75], "                    (initial == '.' and token != '.' and token != '...')):\n"], [5, "                    ", [535, 0], [535, 20], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "yield", [535, 20], [535, 25], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "TokenInfo", [535, 26], [535, 35], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [7, "(", [535, 35], [535, 36], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "NUMBER", [535, 36], [535, 42], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [12, ",", [535, 42], [535, 43], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "token", [535, 44], [535, 49], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [12, ",", [535, 49], [535, 50], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "spos", [535, 51], [535, 55], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [12, ",", [535, 55], [535, 56], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "epos", [535, 57], [535, 61], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [12, ",", [535, 61], [535, 62], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [1, "line", [535, 63], [535, 67], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [8, ")", [535, 67], [535, 68], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [4, "\n", [535, 68], [535, 69], "                    yield TokenInfo(NUMBER, token, spos, epos, line)\n"], [6, "", [536, 16], [536, 16], "                elif initial in '\\r\\n':\n"], [1, "elif", [536, 16], [536, 20], "                elif initial in '\\r\\n':\n"], [1, "initial", [536, 21], [536, 28], "                elif initial in '\\r\\n':\n"], [1, "in", [536, 29], [536, 31], "                elif initial in '\\r\\n':\n"], [3, "'\\r\\n'", [536, 32], [536, 38], "                elif initial in '\\r\\n':\n"], [11, ":", [536, 38], [536, 39], "                elif initial in '\\r\\n':\n"], [4, "\n", [536, 39], [536, 40], "                elif initial in '\\r\\n':\n"], [5, "                    ", [537, 0], [537, 20], "                    if parenlev > 0:\n"], [1, "if", [537, 20], [537, 22], "                    if parenlev > 0:\n"], [1, "parenlev", [537, 23], [537, 31], "                    if parenlev > 0:\n"], [21, ">", [537, 32], [537, 33], "                    if parenlev > 0:\n"], [2, "0", [537, 34], [537, 35], "                    if parenlev > 0:\n"], [11, ":", [537, 35], [537, 36], "                    if parenlev > 0:\n"], [4, "\n", [537, 36], [537, 37], "                    if parenlev > 0:\n"], [5, "                        ", [538, 0], [538, 24], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "yield", [538, 24], [538, 29], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "TokenInfo", [538, 30], [538, 39], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [7, "(", [538, 39], [538, 40], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "NL", [538, 40], [538, 42], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [12, ",", [538, 42], [538, 43], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "token", [538, 44], [538, 49], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [12, ",", [538, 49], [538, 50], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "spos", [538, 51], [538, 55], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [12, ",", [538, 55], [538, 56], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "epos", [538, 57], [538, 61], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [12, ",", [538, 61], [538, 62], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [1, "line", [538, 63], [538, 67], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [8, ")", [538, 67], [538, 68], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [4, "\n", [538, 68], [538, 69], "                        yield TokenInfo(NL, token, spos, epos, line)\n"], [6, "", [539, 20], [539, 20], "                    else:\n"], [1, "else", [539, 20], [539, 24], "                    else:\n"], [11, ":", [539, 24], [539, 25], "                    else:\n"], [4, "\n", [539, 25], [539, 26], "                    else:\n"], [5, "                        ", [540, 0], [540, 24], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "yield", [540, 24], [540, 29], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "TokenInfo", [540, 30], [540, 39], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [7, "(", [540, 39], [540, 40], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "NEWLINE", [540, 40], [540, 47], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [12, ",", [540, 47], [540, 48], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "token", [540, 49], [540, 54], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [12, ",", [540, 54], [540, 55], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "spos", [540, 56], [540, 60], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [12, ",", [540, 60], [540, 61], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "epos", [540, 62], [540, 66], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [12, ",", [540, 66], [540, 67], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [1, "line", [540, 68], [540, 72], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [8, ")", [540, 72], [540, 73], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [4, "\n", [540, 73], [540, 74], "                        yield TokenInfo(NEWLINE, token, spos, epos, line)\n"], [6, "", [542, 16], [542, 16], "                elif initial == '#':\n"], [6, "", [542, 16], [542, 16], "                elif initial == '#':\n"], [1, "elif", [542, 16], [542, 20], "                elif initial == '#':\n"], [1, "initial", [542, 21], [542, 28], "                elif initial == '#':\n"], [27, "==", [542, 29], [542, 31], "                elif initial == '#':\n"], [3, "'#'", [542, 32], [542, 35], "                elif initial == '#':\n"], [11, ":", [542, 35], [542, 36], "                elif initial == '#':\n"], [4, "\n", [542, 36], [542, 37], "                elif initial == '#':\n"], [5, "                    ", [543, 0], [543, 20], "                    assert not token.endswith(\"\\n\")\n"], [1, "assert", [543, 20], [543, 26], "                    assert not token.endswith(\"\\n\")\n"], [1, "not", [543, 27], [543, 30], "                    assert not token.endswith(\"\\n\")\n"], [1, "token", [543, 31], [543, 36], "                    assert not token.endswith(\"\\n\")\n"], [23, ".", [543, 36], [543, 37], "                    assert not token.endswith(\"\\n\")\n"], [1, "endswith", [543, 37], [543, 45], "                    assert not token.endswith(\"\\n\")\n"], [7, "(", [543, 45], [543, 46], "                    assert not token.endswith(\"\\n\")\n"], [3, "\"\\n\"", [543, 46], [543, 50], "                    assert not token.endswith(\"\\n\")\n"], [8, ")", [543, 50], [543, 51], "                    assert not token.endswith(\"\\n\")\n"], [4, "\n", [543, 51], [543, 52], "                    assert not token.endswith(\"\\n\")\n"], [1, "yield", [544, 20], [544, 25], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [1, "TokenInfo", [544, 26], [544, 35], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [7, "(", [544, 35], [544, 36], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [1, "COMMENT", [544, 36], [544, 43], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [12, ",", [544, 43], [544, 44], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [1, "token", [544, 45], [544, 50], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [12, ",", [544, 50], [544, 51], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [1, "spos", [544, 52], [544, 56], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [12, ",", [544, 56], [544, 57], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [1, "epos", [544, 58], [544, 62], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [12, ",", [544, 62], [544, 63], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [1, "line", [544, 64], [544, 68], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [8, ")", [544, 68], [544, 69], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [4, "\n", [544, 69], [544, 70], "                    yield TokenInfo(COMMENT, token, spos, epos, line)\n"], [6, "", [546, 16], [546, 16], "                elif token in triple_quoted:\n"], [1, "elif", [546, 16], [546, 20], "                elif token in triple_quoted:\n"], [1, "token", [546, 21], [546, 26], "                elif token in triple_quoted:\n"], [1, "in", [546, 27], [546, 29], "                elif token in triple_quoted:\n"], [1, "triple_quoted", [546, 30], [546, 43], "                elif token in triple_quoted:\n"], [11, ":", [546, 43], [546, 44], "                elif token in triple_quoted:\n"], [4, "\n", [546, 44], [546, 45], "                elif token in triple_quoted:\n"], [5, "                    ", [547, 0], [547, 20], "                    endprog = _compile(endpats[token])\n"], [1, "endprog", [547, 20], [547, 27], "                    endprog = _compile(endpats[token])\n"], [22, "=", [547, 28], [547, 29], "                    endprog = _compile(endpats[token])\n"], [1, "_compile", [547, 30], [547, 38], "                    endprog = _compile(endpats[token])\n"], [7, "(", [547, 38], [547, 39], "                    endprog = _compile(endpats[token])\n"], [1, "endpats", [547, 39], [547, 46], "                    endprog = _compile(endpats[token])\n"], [9, "[", [547, 46], [547, 47], "                    endprog = _compile(endpats[token])\n"], [1, "token", [547, 47], [547, 52], "                    endprog = _compile(endpats[token])\n"], [10, "]", [547, 52], [547, 53], "                    endprog = _compile(endpats[token])\n"], [8, ")", [547, 53], [547, 54], "                    endprog = _compile(endpats[token])\n"], [4, "\n", [547, 54], [547, 55], "                    endprog = _compile(endpats[token])\n"], [1, "endmatch", [548, 20], [548, 28], "                    endmatch = endprog.match(line, pos)\n"], [22, "=", [548, 29], [548, 30], "                    endmatch = endprog.match(line, pos)\n"], [1, "endprog", [548, 31], [548, 38], "                    endmatch = endprog.match(line, pos)\n"], [23, ".", [548, 38], [548, 39], "                    endmatch = endprog.match(line, pos)\n"], [1, "match", [548, 39], [548, 44], "                    endmatch = endprog.match(line, pos)\n"], [7, "(", [548, 44], [548, 45], "                    endmatch = endprog.match(line, pos)\n"], [1, "line", [548, 45], [548, 49], "                    endmatch = endprog.match(line, pos)\n"], [12, ",", [548, 49], [548, 50], "                    endmatch = endprog.match(line, pos)\n"], [1, "pos", [548, 51], [548, 54], "                    endmatch = endprog.match(line, pos)\n"], [8, ")", [548, 54], [548, 55], "                    endmatch = endprog.match(line, pos)\n"], [4, "\n", [548, 55], [548, 56], "                    endmatch = endprog.match(line, pos)\n"], [1, "if", [549, 20], [549, 22], "                    if endmatch:                           # all on one line\n"], [1, "endmatch", [549, 23], [549, 31], "                    if endmatch:                           # all on one line\n"], [11, ":", [549, 31], [549, 32], "                    if endmatch:                           # all on one line\n"], [4, "\n", [549, 76], [549, 77], "                    if endmatch:                           # all on one line\n"], [5, "                        ", [550, 0], [550, 24], "                        pos = endmatch.end(0)\n"], [1, "pos", [550, 24], [550, 27], "                        pos = endmatch.end(0)\n"], [22, "=", [550, 28], [550, 29], "                        pos = endmatch.end(0)\n"], [1, "endmatch", [550, 30], [550, 38], "                        pos = endmatch.end(0)\n"], [23, ".", [550, 38], [550, 39], "                        pos = endmatch.end(0)\n"], [1, "end", [550, 39], [550, 42], "                        pos = endmatch.end(0)\n"], [7, "(", [550, 42], [550, 43], "                        pos = endmatch.end(0)\n"], [2, "0", [550, 43], [550, 44], "                        pos = endmatch.end(0)\n"], [8, ")", [550, 44], [550, 45], "                        pos = endmatch.end(0)\n"], [4, "\n", [550, 45], [550, 46], "                        pos = endmatch.end(0)\n"], [1, "token", [551, 24], [551, 29], "                        token = line[start:pos]\n"], [22, "=", [551, 30], [551, 31], "                        token = line[start:pos]\n"], [1, "line", [551, 32], [551, 36], "                        token = line[start:pos]\n"], [9, "[", [551, 36], [551, 37], "                        token = line[start:pos]\n"], [1, "start", [551, 37], [551, 42], "                        token = line[start:pos]\n"], [11, ":", [551, 42], [551, 43], "                        token = line[start:pos]\n"], [1, "pos", [551, 43], [551, 46], "                        token = line[start:pos]\n"], [10, "]", [551, 46], [551, 47], "                        token = line[start:pos]\n"], [4, "\n", [551, 47], [551, 48], "                        token = line[start:pos]\n"], [1, "yield", [552, 24], [552, 29], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "TokenInfo", [552, 30], [552, 39], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [7, "(", [552, 39], [552, 40], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "STRING", [552, 40], [552, 46], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [12, ",", [552, 46], [552, 47], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "token", [552, 48], [552, 53], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [12, ",", [552, 53], [552, 54], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "spos", [552, 55], [552, 59], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [12, ",", [552, 59], [552, 60], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [7, "(", [552, 61], [552, 62], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "lnum", [552, 62], [552, 66], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [12, ",", [552, 66], [552, 67], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "pos", [552, 68], [552, 71], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [8, ")", [552, 71], [552, 72], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [12, ",", [552, 72], [552, 73], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [1, "line", [552, 74], [552, 78], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [8, ")", [552, 78], [552, 79], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [4, "\n", [552, 79], [552, 80], "                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n"], [6, "", [553, 20], [553, 20], "                    else:\n"], [1, "else", [553, 20], [553, 24], "                    else:\n"], [11, ":", [553, 24], [553, 25], "                    else:\n"], [4, "\n", [553, 25], [553, 26], "                    else:\n"], [5, "                        ", [554, 0], [554, 24], "                        strstart = (lnum, start)           # multiple lines\n"], [1, "strstart", [554, 24], [554, 32], "                        strstart = (lnum, start)           # multiple lines\n"], [22, "=", [554, 33], [554, 34], "                        strstart = (lnum, start)           # multiple lines\n"], [7, "(", [554, 35], [554, 36], "                        strstart = (lnum, start)           # multiple lines\n"], [1, "lnum", [554, 36], [554, 40], "                        strstart = (lnum, start)           # multiple lines\n"], [12, ",", [554, 40], [554, 41], "                        strstart = (lnum, start)           # multiple lines\n"], [1, "start", [554, 42], [554, 47], "                        strstart = (lnum, start)           # multiple lines\n"], [8, ")", [554, 47], [554, 48], "                        strstart = (lnum, start)           # multiple lines\n"], [4, "\n", [554, 75], [554, 76], "                        strstart = (lnum, start)           # multiple lines\n"], [1, "contstr", [555, 24], [555, 31], "                        contstr = line[start:]\n"], [22, "=", [555, 32], [555, 33], "                        contstr = line[start:]\n"], [1, "line", [555, 34], [555, 38], "                        contstr = line[start:]\n"], [9, "[", [555, 38], [555, 39], "                        contstr = line[start:]\n"], [1, "start", [555, 39], [555, 44], "                        contstr = line[start:]\n"], [11, ":", [555, 44], [555, 45], "                        contstr = line[start:]\n"], [10, "]", [555, 45], [555, 46], "                        contstr = line[start:]\n"], [4, "\n", [555, 46], [555, 47], "                        contstr = line[start:]\n"], [1, "contline", [556, 24], [556, 32], "                        contline = line\n"], [22, "=", [556, 33], [556, 34], "                        contline = line\n"], [1, "line", [556, 35], [556, 39], "                        contline = line\n"], [4, "\n", [556, 39], [556, 40], "                        contline = line\n"], [1, "break", [557, 24], [557, 29], "                        break\n"], [4, "\n", [557, 29], [557, 30], "                        break\n"], [6, "", [569, 16], [569, 16], "                elif (initial in single_quoted or\n"], [6, "", [569, 16], [569, 16], "                elif (initial in single_quoted or\n"], [1, "elif", [569, 16], [569, 20], "                elif (initial in single_quoted or\n"], [7, "(", [569, 21], [569, 22], "                elif (initial in single_quoted or\n"], [1, "initial", [569, 22], [569, 29], "                elif (initial in single_quoted or\n"], [1, "in", [569, 30], [569, 32], "                elif (initial in single_quoted or\n"], [1, "single_quoted", [569, 33], [569, 46], "                elif (initial in single_quoted or\n"], [1, "or", [569, 47], [569, 49], "                elif (initial in single_quoted or\n"], [1, "token", [570, 22], [570, 27], "                      token[:2] in single_quoted or\n"], [9, "[", [570, 27], [570, 28], "                      token[:2] in single_quoted or\n"], [11, ":", [570, 28], [570, 29], "                      token[:2] in single_quoted or\n"], [2, "2", [570, 29], [570, 30], "                      token[:2] in single_quoted or\n"], [10, "]", [570, 30], [570, 31], "                      token[:2] in single_quoted or\n"], [1, "in", [570, 32], [570, 34], "                      token[:2] in single_quoted or\n"], [1, "single_quoted", [570, 35], [570, 48], "                      token[:2] in single_quoted or\n"], [1, "or", [570, 49], [570, 51], "                      token[:2] in single_quoted or\n"], [1, "token", [571, 22], [571, 27], "                      token[:3] in single_quoted):\n"], [9, "[", [571, 27], [571, 28], "                      token[:3] in single_quoted):\n"], [11, ":", [571, 28], [571, 29], "                      token[:3] in single_quoted):\n"], [2, "3", [571, 29], [571, 30], "                      token[:3] in single_quoted):\n"], [10, "]", [571, 30], [571, 31], "                      token[:3] in single_quoted):\n"], [1, "in", [571, 32], [571, 34], "                      token[:3] in single_quoted):\n"], [1, "single_quoted", [571, 35], [571, 48], "                      token[:3] in single_quoted):\n"], [8, ")", [571, 48], [571, 49], "                      token[:3] in single_quoted):\n"], [11, ":", [571, 49], [571, 50], "                      token[:3] in single_quoted):\n"], [4, "\n", [571, 50], [571, 51], "                      token[:3] in single_quoted):\n"], [5, "                    ", [572, 0], [572, 20], "                    if token[-1] == '\\n':                  # continued string\n"], [1, "if", [572, 20], [572, 22], "                    if token[-1] == '\\n':                  # continued string\n"], [1, "token", [572, 23], [572, 28], "                    if token[-1] == '\\n':                  # continued string\n"], [9, "[", [572, 28], [572, 29], "                    if token[-1] == '\\n':                  # continued string\n"], [15, "-", [572, 29], [572, 30], "                    if token[-1] == '\\n':                  # continued string\n"], [2, "1", [572, 30], [572, 31], "                    if token[-1] == '\\n':                  # continued string\n"], [10, "]", [572, 31], [572, 32], "                    if token[-1] == '\\n':                  # continued string\n"], [27, "==", [572, 33], [572, 35], "                    if token[-1] == '\\n':                  # continued string\n"], [3, "'\\n'", [572, 36], [572, 40], "                    if token[-1] == '\\n':                  # continued string\n"], [11, ":", [572, 40], [572, 41], "                    if token[-1] == '\\n':                  # continued string\n"], [4, "\n", [572, 77], [572, 78], "                    if token[-1] == '\\n':                  # continued string\n"], [5, "                        ", [573, 0], [573, 24], "                        strstart = (lnum, start)\n"], [1, "strstart", [573, 24], [573, 32], "                        strstart = (lnum, start)\n"], [22, "=", [573, 33], [573, 34], "                        strstart = (lnum, start)\n"], [7, "(", [573, 35], [573, 36], "                        strstart = (lnum, start)\n"], [1, "lnum", [573, 36], [573, 40], "                        strstart = (lnum, start)\n"], [12, ",", [573, 40], [573, 41], "                        strstart = (lnum, start)\n"], [1, "start", [573, 42], [573, 47], "                        strstart = (lnum, start)\n"], [8, ")", [573, 47], [573, 48], "                        strstart = (lnum, start)\n"], [4, "\n", [573, 48], [573, 49], "                        strstart = (lnum, start)\n"], [1, "endprog", [580, 24], [580, 31], "                        endprog = _compile(endpats.get(initial) or\n"], [22, "=", [580, 32], [580, 33], "                        endprog = _compile(endpats.get(initial) or\n"], [1, "_compile", [580, 34], [580, 42], "                        endprog = _compile(endpats.get(initial) or\n"], [7, "(", [580, 42], [580, 43], "                        endprog = _compile(endpats.get(initial) or\n"], [1, "endpats", [580, 43], [580, 50], "                        endprog = _compile(endpats.get(initial) or\n"], [23, ".", [580, 50], [580, 51], "                        endprog = _compile(endpats.get(initial) or\n"], [1, "get", [580, 51], [580, 54], "                        endprog = _compile(endpats.get(initial) or\n"], [7, "(", [580, 54], [580, 55], "                        endprog = _compile(endpats.get(initial) or\n"], [1, "initial", [580, 55], [580, 62], "                        endprog = _compile(endpats.get(initial) or\n"], [8, ")", [580, 62], [580, 63], "                        endprog = _compile(endpats.get(initial) or\n"], [1, "or", [580, 64], [580, 66], "                        endprog = _compile(endpats.get(initial) or\n"], [1, "endpats", [581, 43], [581, 50], "                                           endpats.get(token[1]) or\n"], [23, ".", [581, 50], [581, 51], "                                           endpats.get(token[1]) or\n"], [1, "get", [581, 51], [581, 54], "                                           endpats.get(token[1]) or\n"], [7, "(", [581, 54], [581, 55], "                                           endpats.get(token[1]) or\n"], [1, "token", [581, 55], [581, 60], "                                           endpats.get(token[1]) or\n"], [9, "[", [581, 60], [581, 61], "                                           endpats.get(token[1]) or\n"], [2, "1", [581, 61], [581, 62], "                                           endpats.get(token[1]) or\n"], [10, "]", [581, 62], [581, 63], "                                           endpats.get(token[1]) or\n"], [8, ")", [581, 63], [581, 64], "                                           endpats.get(token[1]) or\n"], [1, "or", [581, 65], [581, 67], "                                           endpats.get(token[1]) or\n"], [1, "endpats", [582, 43], [582, 50], "                                           endpats.get(token[2]))\n"], [23, ".", [582, 50], [582, 51], "                                           endpats.get(token[2]))\n"], [1, "get", [582, 51], [582, 54], "                                           endpats.get(token[2]))\n"], [7, "(", [582, 54], [582, 55], "                                           endpats.get(token[2]))\n"], [1, "token", [582, 55], [582, 60], "                                           endpats.get(token[2]))\n"], [9, "[", [582, 60], [582, 61], "                                           endpats.get(token[2]))\n"], [2, "2", [582, 61], [582, 62], "                                           endpats.get(token[2]))\n"], [10, "]", [582, 62], [582, 63], "                                           endpats.get(token[2]))\n"], [8, ")", [582, 63], [582, 64], "                                           endpats.get(token[2]))\n"], [8, ")", [582, 64], [582, 65], "                                           endpats.get(token[2]))\n"], [4, "\n", [582, 65], [582, 66], "                                           endpats.get(token[2]))\n"], [1, "contstr", [583, 24], [583, 31], "                        contstr, needcont = line[start:], 1\n"], [12, ",", [583, 31], [583, 32], "                        contstr, needcont = line[start:], 1\n"], [1, "needcont", [583, 33], [583, 41], "                        contstr, needcont = line[start:], 1\n"], [22, "=", [583, 42], [583, 43], "                        contstr, needcont = line[start:], 1\n"], [1, "line", [583, 44], [583, 48], "                        contstr, needcont = line[start:], 1\n"], [9, "[", [583, 48], [583, 49], "                        contstr, needcont = line[start:], 1\n"], [1, "start", [583, 49], [583, 54], "                        contstr, needcont = line[start:], 1\n"], [11, ":", [583, 54], [583, 55], "                        contstr, needcont = line[start:], 1\n"], [10, "]", [583, 55], [583, 56], "                        contstr, needcont = line[start:], 1\n"], [12, ",", [583, 56], [583, 57], "                        contstr, needcont = line[start:], 1\n"], [2, "1", [583, 58], [583, 59], "                        contstr, needcont = line[start:], 1\n"], [4, "\n", [583, 59], [583, 60], "                        contstr, needcont = line[start:], 1\n"], [1, "contline", [584, 24], [584, 32], "                        contline = line\n"], [22, "=", [584, 33], [584, 34], "                        contline = line\n"], [1, "line", [584, 35], [584, 39], "                        contline = line\n"], [4, "\n", [584, 39], [584, 40], "                        contline = line\n"], [1, "break", [585, 24], [585, 29], "                        break\n"], [4, "\n", [585, 29], [585, 30], "                        break\n"], [6, "", [586, 20], [586, 20], "                    else:                                  # ordinary string\n"], [1, "else", [586, 20], [586, 24], "                    else:                                  # ordinary string\n"], [11, ":", [586, 24], [586, 25], "                    else:                                  # ordinary string\n"], [4, "\n", [586, 76], [586, 77], "                    else:                                  # ordinary string\n"], [5, "                        ", [587, 0], [587, 24], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "yield", [587, 24], [587, 29], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "TokenInfo", [587, 30], [587, 39], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [7, "(", [587, 39], [587, 40], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "STRING", [587, 40], [587, 46], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [12, ",", [587, 46], [587, 47], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "token", [587, 48], [587, 53], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [12, ",", [587, 53], [587, 54], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "spos", [587, 55], [587, 59], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [12, ",", [587, 59], [587, 60], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "epos", [587, 61], [587, 65], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [12, ",", [587, 65], [587, 66], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [1, "line", [587, 67], [587, 71], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [8, ")", [587, 71], [587, 72], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [4, "\n", [587, 72], [587, 73], "                        yield TokenInfo(STRING, token, spos, epos, line)\n"], [6, "", [589, 16], [589, 16], "                elif initial.isidentifier():               # ordinary name\n"], [6, "", [589, 16], [589, 16], "                elif initial.isidentifier():               # ordinary name\n"], [1, "elif", [589, 16], [589, 20], "                elif initial.isidentifier():               # ordinary name\n"], [1, "initial", [589, 21], [589, 28], "                elif initial.isidentifier():               # ordinary name\n"], [23, ".", [589, 28], [589, 29], "                elif initial.isidentifier():               # ordinary name\n"], [1, "isidentifier", [589, 29], [589, 41], "                elif initial.isidentifier():               # ordinary name\n"], [7, "(", [589, 41], [589, 42], "                elif initial.isidentifier():               # ordinary name\n"], [8, ")", [589, 42], [589, 43], "                elif initial.isidentifier():               # ordinary name\n"], [11, ":", [589, 43], [589, 44], "                elif initial.isidentifier():               # ordinary name\n"], [4, "\n", [589, 74], [589, 75], "                elif initial.isidentifier():               # ordinary name\n"], [5, "                    ", [590, 0], [590, 20], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "yield", [590, 20], [590, 25], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "TokenInfo", [590, 26], [590, 35], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [7, "(", [590, 35], [590, 36], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "NAME", [590, 36], [590, 40], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [12, ",", [590, 40], [590, 41], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "token", [590, 42], [590, 47], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [12, ",", [590, 47], [590, 48], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "spos", [590, 49], [590, 53], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [12, ",", [590, 53], [590, 54], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "epos", [590, 55], [590, 59], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [12, ",", [590, 59], [590, 60], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [1, "line", [590, 61], [590, 65], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [8, ")", [590, 65], [590, 66], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [4, "\n", [590, 66], [590, 67], "                    yield TokenInfo(NAME, token, spos, epos, line)\n"], [6, "", [591, 16], [591, 16], "                elif initial == '\\\\':                      # continued stmt\n"], [1, "elif", [591, 16], [591, 20], "                elif initial == '\\\\':                      # continued stmt\n"], [1, "initial", [591, 21], [591, 28], "                elif initial == '\\\\':                      # continued stmt\n"], [27, "==", [591, 29], [591, 31], "                elif initial == '\\\\':                      # continued stmt\n"], [3, "'\\\\'", [591, 32], [591, 36], "                elif initial == '\\\\':                      # continued stmt\n"], [11, ":", [591, 36], [591, 37], "                elif initial == '\\\\':                      # continued stmt\n"], [4, "\n", [591, 75], [591, 76], "                elif initial == '\\\\':                      # continued stmt\n"], [5, "                    ", [592, 0], [592, 20], "                    continued = 1\n"], [1, "continued", [592, 20], [592, 29], "                    continued = 1\n"], [22, "=", [592, 30], [592, 31], "                    continued = 1\n"], [2, "1", [592, 32], [592, 33], "                    continued = 1\n"], [4, "\n", [592, 33], [592, 34], "                    continued = 1\n"], [6, "", [593, 16], [593, 16], "                else:\n"], [1, "else", [593, 16], [593, 20], "                else:\n"], [11, ":", [593, 20], [593, 21], "                else:\n"], [4, "\n", [593, 21], [593, 22], "                else:\n"], [5, "                    ", [594, 0], [594, 20], "                    if initial in '([{':\n"], [1, "if", [594, 20], [594, 22], "                    if initial in '([{':\n"], [1, "initial", [594, 23], [594, 30], "                    if initial in '([{':\n"], [1, "in", [594, 31], [594, 33], "                    if initial in '([{':\n"], [3, "'([{'", [594, 34], [594, 39], "                    if initial in '([{':\n"], [11, ":", [594, 39], [594, 40], "                    if initial in '([{':\n"], [4, "\n", [594, 40], [594, 41], "                    if initial in '([{':\n"], [5, "                        ", [595, 0], [595, 24], "                        parenlev += 1\n"], [1, "parenlev", [595, 24], [595, 32], "                        parenlev += 1\n"], [36, "+=", [595, 33], [595, 35], "                        parenlev += 1\n"], [2, "1", [595, 36], [595, 37], "                        parenlev += 1\n"], [4, "\n", [595, 37], [595, 38], "                        parenlev += 1\n"], [6, "", [596, 20], [596, 20], "                    elif initial in ')]}':\n"], [1, "elif", [596, 20], [596, 24], "                    elif initial in ')]}':\n"], [1, "initial", [596, 25], [596, 32], "                    elif initial in ')]}':\n"], [1, "in", [596, 33], [596, 35], "                    elif initial in ')]}':\n"], [3, "')]}'", [596, 36], [596, 41], "                    elif initial in ')]}':\n"], [11, ":", [596, 41], [596, 42], "                    elif initial in ')]}':\n"], [4, "\n", [596, 42], [596, 43], "                    elif initial in ')]}':\n"], [5, "                        ", [597, 0], [597, 24], "                        parenlev -= 1\n"], [1, "parenlev", [597, 24], [597, 32], "                        parenlev -= 1\n"], [37, "-=", [597, 33], [597, 35], "                        parenlev -= 1\n"], [2, "1", [597, 36], [597, 37], "                        parenlev -= 1\n"], [4, "\n", [597, 37], [597, 38], "                        parenlev -= 1\n"], [6, "", [598, 20], [598, 20], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "yield", [598, 20], [598, 25], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "TokenInfo", [598, 26], [598, 35], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [7, "(", [598, 35], [598, 36], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "OP", [598, 36], [598, 38], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [12, ",", [598, 38], [598, 39], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "token", [598, 40], [598, 45], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [12, ",", [598, 45], [598, 46], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "spos", [598, 47], [598, 51], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [12, ",", [598, 51], [598, 52], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "epos", [598, 53], [598, 57], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [12, ",", [598, 57], [598, 58], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [1, "line", [598, 59], [598, 63], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [8, ")", [598, 63], [598, 64], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [4, "\n", [598, 64], [598, 65], "                    yield TokenInfo(OP, token, spos, epos, line)\n"], [6, "", [599, 12], [599, 12], "            else:\n"], [6, "", [599, 12], [599, 12], "            else:\n"], [1, "else", [599, 12], [599, 16], "            else:\n"], [11, ":", [599, 16], [599, 17], "            else:\n"], [4, "\n", [599, 17], [599, 18], "            else:\n"], [5, "                ", [600, 0], [600, 16], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [1, "yield", [600, 16], [600, 21], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [1, "TokenInfo", [600, 22], [600, 31], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [7, "(", [600, 31], [600, 32], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [1, "ERRORTOKEN", [600, 32], [600, 42], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [12, ",", [600, 42], [600, 43], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [1, "line", [600, 44], [600, 48], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [9, "[", [600, 48], [600, 49], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [1, "pos", [600, 49], [600, 52], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [10, "]", [600, 52], [600, 53], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [12, ",", [600, 53], [600, 54], "                yield TokenInfo(ERRORTOKEN, line[pos],\n"], [7, "(", [601, 27], [601, 28], "                           (lnum, pos), (lnum, pos+1), line)\n"], [1, "lnum", [601, 28], [601, 32], "                           (lnum, pos), (lnum, pos+1), line)\n"], [12, ",", [601, 32], [601, 33], "                           (lnum, pos), (lnum, pos+1), line)\n"], [1, "pos", [601, 34], [601, 37], "                           (lnum, pos), (lnum, pos+1), line)\n"], [8, ")", [601, 37], [601, 38], "                           (lnum, pos), (lnum, pos+1), line)\n"], [12, ",", [601, 38], [601, 39], "                           (lnum, pos), (lnum, pos+1), line)\n"], [7, "(", [601, 40], [601, 41], "                           (lnum, pos), (lnum, pos+1), line)\n"], [1, "lnum", [601, 41], [601, 45], "                           (lnum, pos), (lnum, pos+1), line)\n"], [12, ",", [601, 45], [601, 46], "                           (lnum, pos), (lnum, pos+1), line)\n"], [1, "pos", [601, 47], [601, 50], "                           (lnum, pos), (lnum, pos+1), line)\n"], [14, "+", [601, 50], [601, 51], "                           (lnum, pos), (lnum, pos+1), line)\n"], [2, "1", [601, 51], [601, 52], "                           (lnum, pos), (lnum, pos+1), line)\n"], [8, ")", [601, 52], [601, 53], "                           (lnum, pos), (lnum, pos+1), line)\n"], [12, ",", [601, 53], [601, 54], "                           (lnum, pos), (lnum, pos+1), line)\n"], [1, "line", [601, 55], [601, 59], "                           (lnum, pos), (lnum, pos+1), line)\n"], [8, ")", [601, 59], [601, 60], "                           (lnum, pos), (lnum, pos+1), line)\n"], [4, "\n", [601, 60], [601, 61], "                           (lnum, pos), (lnum, pos+1), line)\n"], [1, "pos", [602, 16], [602, 19], "                pos += 1\n"], [36, "+=", [602, 20], [602, 22], "                pos += 1\n"], [2, "1", [602, 23], [602, 24], "                pos += 1\n"], [4, "\n", [602, 24], [602, 25], "                pos += 1\n"], [6, "", [605, 4], [605, 4], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [6, "", [605, 4], [605, 4], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [6, "", [605, 4], [605, 4], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [1, "if", [605, 4], [605, 6], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [1, "last_line", [605, 7], [605, 16], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [1, "and", [605, 17], [605, 20], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [1, "last_line", [605, 21], [605, 30], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [9, "[", [605, 30], [605, 31], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [15, "-", [605, 31], [605, 32], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [2, "1", [605, 32], [605, 33], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [10, "]", [605, 33], [605, 34], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [1, "not", [605, 35], [605, 38], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [1, "in", [605, 39], [605, 41], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [3, "'\\r\\n'", [605, 42], [605, 48], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [11, ":", [605, 48], [605, 49], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [4, "\n", [605, 49], [605, 50], "    if last_line and last_line[-1] not in '\\r\\n':\n"], [5, "        ", [606, 0], [606, 8], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "yield", [606, 8], [606, 13], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "TokenInfo", [606, 14], [606, 23], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [7, "(", [606, 23], [606, 24], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "NEWLINE", [606, 24], [606, 31], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [12, ",", [606, 31], [606, 32], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [3, "''", [606, 33], [606, 35], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [12, ",", [606, 35], [606, 36], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [7, "(", [606, 37], [606, 38], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "lnum", [606, 38], [606, 42], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [15, "-", [606, 43], [606, 44], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [2, "1", [606, 45], [606, 46], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [12, ",", [606, 46], [606, 47], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "len", [606, 48], [606, 51], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [7, "(", [606, 51], [606, 52], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "last_line", [606, 52], [606, 61], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [8, ")", [606, 61], [606, 62], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [8, ")", [606, 62], [606, 63], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [12, ",", [606, 63], [606, 64], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [7, "(", [606, 65], [606, 66], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "lnum", [606, 66], [606, 70], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [15, "-", [606, 71], [606, 72], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [2, "1", [606, 73], [606, 74], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [12, ",", [606, 74], [606, 75], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "len", [606, 76], [606, 79], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [7, "(", [606, 79], [606, 80], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [1, "last_line", [606, 80], [606, 89], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [8, ")", [606, 89], [606, 90], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [14, "+", [606, 91], [606, 92], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [2, "1", [606, 93], [606, 94], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [8, ")", [606, 94], [606, 95], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [12, ",", [606, 95], [606, 96], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [3, "''", [606, 97], [606, 99], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [8, ")", [606, 99], [606, 100], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [4, "\n", [606, 100], [606, 101], "        yield TokenInfo(NEWLINE, '', (lnum - 1, len(last_line)), (lnum - 1, len(last_line) + 1), '')\n"], [6, "", [607, 4], [607, 4], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [1, "for", [607, 4], [607, 7], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [1, "indent", [607, 8], [607, 14], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [1, "in", [607, 15], [607, 17], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [1, "indents", [607, 18], [607, 25], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [9, "[", [607, 25], [607, 26], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [2, "1", [607, 26], [607, 27], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [11, ":", [607, 27], [607, 28], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [10, "]", [607, 28], [607, 29], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [11, ":", [607, 29], [607, 30], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [4, "\n", [607, 76], [607, 77], "    for indent in indents[1:]:                 # pop remaining indent levels\n"], [5, "        ", [608, 0], [608, 8], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [1, "yield", [608, 8], [608, 13], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [1, "TokenInfo", [608, 14], [608, 23], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [7, "(", [608, 23], [608, 24], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [1, "DEDENT", [608, 24], [608, 30], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [608, 30], [608, 31], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [3, "''", [608, 32], [608, 34], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [608, 34], [608, 35], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [7, "(", [608, 36], [608, 37], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [1, "lnum", [608, 37], [608, 41], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [608, 41], [608, 42], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [2, "0", [608, 43], [608, 44], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [8, ")", [608, 44], [608, 45], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [608, 45], [608, 46], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [7, "(", [608, 47], [608, 48], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [1, "lnum", [608, 48], [608, 52], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [608, 52], [608, 53], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [2, "0", [608, 54], [608, 55], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [8, ")", [608, 55], [608, 56], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [608, 56], [608, 57], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [3, "''", [608, 58], [608, 60], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [8, ")", [608, 60], [608, 61], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [4, "\n", [608, 61], [608, 62], "        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n"], [6, "", [609, 4], [609, 4], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [1, "yield", [609, 4], [609, 9], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [1, "TokenInfo", [609, 10], [609, 19], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [7, "(", [609, 19], [609, 20], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [1, "ENDMARKER", [609, 20], [609, 29], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [609, 29], [609, 30], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [3, "''", [609, 31], [609, 33], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [609, 33], [609, 34], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [7, "(", [609, 35], [609, 36], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [1, "lnum", [609, 36], [609, 40], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [609, 40], [609, 41], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [2, "0", [609, 42], [609, 43], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [8, ")", [609, 43], [609, 44], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [609, 44], [609, 45], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [7, "(", [609, 46], [609, 47], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [1, "lnum", [609, 47], [609, 51], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [609, 51], [609, 52], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [2, "0", [609, 53], [609, 54], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [8, ")", [609, 54], [609, 55], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [12, ",", [609, 55], [609, 56], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [3, "''", [609, 57], [609, 59], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [8, ")", [609, 59], [609, 60], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [4, "\n", [609, 60], [609, 61], "    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n"], [6, "", [612, 0], [612, 0], "def generate_tokens(readline):\n"], [1, "def", [612, 0], [612, 3], "def generate_tokens(readline):\n"], [1, "generate_tokens", [612, 4], [612, 19], "def generate_tokens(readline):\n"], [7, "(", [612, 19], [612, 20], "def generate_tokens(readline):\n"], [1, "readline", [612, 20], [612, 28], "def generate_tokens(readline):\n"], [8, ")", [612, 28], [612, 29], "def generate_tokens(readline):\n"], [11, ":", [612, 29], [612, 30], "def generate_tokens(readline):\n"], [4, "\n", [612, 30], [612, 31], "def generate_tokens(readline):\n"], [5, "    ", [613, 0], [613, 4], "    \"\"\"Tokenize a source reading Python code as unicode strings.\n"], [3, "\"\"\"Tokenize a source reading Python code as unicode strings.\n\n    This has the same API as tokenize(), except that it expects the *readline*\n    callable to return str objects instead of bytes.\n    \"\"\"", [613, 4], [617, 7], "    \"\"\"Tokenize a source reading Python code as unicode strings.\n\n    This has the same API as tokenize(), except that it expects the *readline*\n    callable to return str objects instead of bytes.\n    \"\"\"\n"], [4, "\n", [617, 7], [617, 8], "    \"\"\"\n"], [1, "return", [618, 4], [618, 10], "    return _tokenize(readline, None)\n"], [1, "_tokenize", [618, 11], [618, 20], "    return _tokenize(readline, None)\n"], [7, "(", [618, 20], [618, 21], "    return _tokenize(readline, None)\n"], [1, "readline", [618, 21], [618, 29], "    return _tokenize(readline, None)\n"], [12, ",", [618, 29], [618, 30], "    return _tokenize(readline, None)\n"], [1, "None", [618, 31], [618, 35], "    return _tokenize(readline, None)\n"], [8, ")", [618, 35], [618, 36], "    return _tokenize(readline, None)\n"], [4, "\n", [618, 36], [618, 37], "    return _tokenize(readline, None)\n"], [6, "", [620, 0], [620, 0], "def main():\n"], [1, "def", [620, 0], [620, 3], "def main():\n"], [1, "main", [620, 4], [620, 8], "def main():\n"], [7, "(", [620, 8], [620, 9], "def main():\n"], [8, ")", [620, 9], [620, 10], "def main():\n"], [11, ":", [620, 10], [620, 11], "def main():\n"], [4, "\n", [620, 11], [620, 12], "def main():\n"], [5, "    ", [621, 0], [621, 4], "    import argparse\n"], [1, "import", [621, 4], [621, 10], "    import argparse\n"], [1, "argparse", [621, 11], [621, 19], "    import argparse\n"], [4, "\n", [621, 19], [621, 20], "    import argparse\n"], [1, "def", [624, 4], [624, 7], "    def perror(message):\n"], [1, "perror", [624, 8], [624, 14], "    def perror(message):\n"], [7, "(", [624, 14], [624, 15], "    def perror(message):\n"], [1, "message", [624, 15], [624, 22], "    def perror(message):\n"], [8, ")", [624, 22], [624, 23], "    def perror(message):\n"], [11, ":", [624, 23], [624, 24], "    def perror(message):\n"], [4, "\n", [624, 24], [624, 25], "    def perror(message):\n"], [5, "        ", [625, 0], [625, 8], "        sys.stderr.write(message)\n"], [1, "sys", [625, 8], [625, 11], "        sys.stderr.write(message)\n"], [23, ".", [625, 11], [625, 12], "        sys.stderr.write(message)\n"], [1, "stderr", [625, 12], [625, 18], "        sys.stderr.write(message)\n"], [23, ".", [625, 18], [625, 19], "        sys.stderr.write(message)\n"], [1, "write", [625, 19], [625, 24], "        sys.stderr.write(message)\n"], [7, "(", [625, 24], [625, 25], "        sys.stderr.write(message)\n"], [1, "message", [625, 25], [625, 32], "        sys.stderr.write(message)\n"], [8, ")", [625, 32], [625, 33], "        sys.stderr.write(message)\n"], [4, "\n", [625, 33], [625, 34], "        sys.stderr.write(message)\n"], [1, "sys", [626, 8], [626, 11], "        sys.stderr.write('\\n')\n"], [23, ".", [626, 11], [626, 12], "        sys.stderr.write('\\n')\n"], [1, "stderr", [626, 12], [626, 18], "        sys.stderr.write('\\n')\n"], [23, ".", [626, 18], [626, 19], "        sys.stderr.write('\\n')\n"], [1, "write", [626, 19], [626, 24], "        sys.stderr.write('\\n')\n"], [7, "(", [626, 24], [626, 25], "        sys.stderr.write('\\n')\n"], [3, "'\\n'", [626, 25], [626, 29], "        sys.stderr.write('\\n')\n"], [8, ")", [626, 29], [626, 30], "        sys.stderr.write('\\n')\n"], [4, "\n", [626, 30], [626, 31], "        sys.stderr.write('\\n')\n"], [6, "", [628, 4], [628, 4], "    def error(message, filename=None, location=None):\n"], [1, "def", [628, 4], [628, 7], "    def error(message, filename=None, location=None):\n"], [1, "error", [628, 8], [628, 13], "    def error(message, filename=None, location=None):\n"], [7, "(", [628, 13], [628, 14], "    def error(message, filename=None, location=None):\n"], [1, "message", [628, 14], [628, 21], "    def error(message, filename=None, location=None):\n"], [12, ",", [628, 21], [628, 22], "    def error(message, filename=None, location=None):\n"], [1, "filename", [628, 23], [628, 31], "    def error(message, filename=None, location=None):\n"], [22, "=", [628, 31], [628, 32], "    def error(message, filename=None, location=None):\n"], [1, "None", [628, 32], [628, 36], "    def error(message, filename=None, location=None):\n"], [12, ",", [628, 36], [628, 37], "    def error(message, filename=None, location=None):\n"], [1, "location", [628, 38], [628, 46], "    def error(message, filename=None, location=None):\n"], [22, "=", [628, 46], [628, 47], "    def error(message, filename=None, location=None):\n"], [1, "None", [628, 47], [628, 51], "    def error(message, filename=None, location=None):\n"], [8, ")", [628, 51], [628, 52], "    def error(message, filename=None, location=None):\n"], [11, ":", [628, 52], [628, 53], "    def error(message, filename=None, location=None):\n"], [4, "\n", [628, 53], [628, 54], "    def error(message, filename=None, location=None):\n"], [5, "        ", [629, 0], [629, 8], "        if location:\n"], [1, "if", [629, 8], [629, 10], "        if location:\n"], [1, "location", [629, 11], [629, 19], "        if location:\n"], [11, ":", [629, 19], [629, 20], "        if location:\n"], [4, "\n", [629, 20], [629, 21], "        if location:\n"], [5, "            ", [630, 0], [630, 12], "            args = (filename,) + location + (message,)\n"], [1, "args", [630, 12], [630, 16], "            args = (filename,) + location + (message,)\n"], [22, "=", [630, 17], [630, 18], "            args = (filename,) + location + (message,)\n"], [7, "(", [630, 19], [630, 20], "            args = (filename,) + location + (message,)\n"], [1, "filename", [630, 20], [630, 28], "            args = (filename,) + location + (message,)\n"], [12, ",", [630, 28], [630, 29], "            args = (filename,) + location + (message,)\n"], [8, ")", [630, 29], [630, 30], "            args = (filename,) + location + (message,)\n"], [14, "+", [630, 31], [630, 32], "            args = (filename,) + location + (message,)\n"], [1, "location", [630, 33], [630, 41], "            args = (filename,) + location + (message,)\n"], [14, "+", [630, 42], [630, 43], "            args = (filename,) + location + (message,)\n"], [7, "(", [630, 44], [630, 45], "            args = (filename,) + location + (message,)\n"], [1, "message", [630, 45], [630, 52], "            args = (filename,) + location + (message,)\n"], [12, ",", [630, 52], [630, 53], "            args = (filename,) + location + (message,)\n"], [8, ")", [630, 53], [630, 54], "            args = (filename,) + location + (message,)\n"], [4, "\n", [630, 54], [630, 55], "            args = (filename,) + location + (message,)\n"], [1, "perror", [631, 12], [631, 18], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [7, "(", [631, 18], [631, 19], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [3, "\"%s:%d:%d: error: %s\"", [631, 19], [631, 40], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [24, "%", [631, 41], [631, 42], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [1, "args", [631, 43], [631, 47], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [8, ")", [631, 47], [631, 48], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [4, "\n", [631, 48], [631, 49], "            perror(\"%s:%d:%d: error: %s\" % args)\n"], [6, "", [632, 8], [632, 8], "        elif filename:\n"], [1, "elif", [632, 8], [632, 12], "        elif filename:\n"], [1, "filename", [632, 13], [632, 21], "        elif filename:\n"], [11, ":", [632, 21], [632, 22], "        elif filename:\n"], [4, "\n", [632, 22], [632, 23], "        elif filename:\n"], [5, "            ", [633, 0], [633, 12], "            perror(\"%s: error: %s\" % (filename, message))\n"], [1, "perror", [633, 12], [633, 18], "            perror(\"%s: error: %s\" % (filename, message))\n"], [7, "(", [633, 18], [633, 19], "            perror(\"%s: error: %s\" % (filename, message))\n"], [3, "\"%s: error: %s\"", [633, 19], [633, 34], "            perror(\"%s: error: %s\" % (filename, message))\n"], [24, "%", [633, 35], [633, 36], "            perror(\"%s: error: %s\" % (filename, message))\n"], [7, "(", [633, 37], [633, 38], "            perror(\"%s: error: %s\" % (filename, message))\n"], [1, "filename", [633, 38], [633, 46], "            perror(\"%s: error: %s\" % (filename, message))\n"], [12, ",", [633, 46], [633, 47], "            perror(\"%s: error: %s\" % (filename, message))\n"], [1, "message", [633, 48], [633, 55], "            perror(\"%s: error: %s\" % (filename, message))\n"], [8, ")", [633, 55], [633, 56], "            perror(\"%s: error: %s\" % (filename, message))\n"], [8, ")", [633, 56], [633, 57], "            perror(\"%s: error: %s\" % (filename, message))\n"], [4, "\n", [633, 57], [633, 58], "            perror(\"%s: error: %s\" % (filename, message))\n"], [6, "", [634, 8], [634, 8], "        else:\n"], [1, "else", [634, 8], [634, 12], "        else:\n"], [11, ":", [634, 12], [634, 13], "        else:\n"], [4, "\n", [634, 13], [634, 14], "        else:\n"], [5, "            ", [635, 0], [635, 12], "            perror(\"error: %s\" % message)\n"], [1, "perror", [635, 12], [635, 18], "            perror(\"error: %s\" % message)\n"], [7, "(", [635, 18], [635, 19], "            perror(\"error: %s\" % message)\n"], [3, "\"error: %s\"", [635, 19], [635, 30], "            perror(\"error: %s\" % message)\n"], [24, "%", [635, 31], [635, 32], "            perror(\"error: %s\" % message)\n"], [1, "message", [635, 33], [635, 40], "            perror(\"error: %s\" % message)\n"], [8, ")", [635, 40], [635, 41], "            perror(\"error: %s\" % message)\n"], [4, "\n", [635, 41], [635, 42], "            perror(\"error: %s\" % message)\n"], [6, "", [636, 8], [636, 8], "        sys.exit(1)\n"], [1, "sys", [636, 8], [636, 11], "        sys.exit(1)\n"], [23, ".", [636, 11], [636, 12], "        sys.exit(1)\n"], [1, "exit", [636, 12], [636, 16], "        sys.exit(1)\n"], [7, "(", [636, 16], [636, 17], "        sys.exit(1)\n"], [2, "1", [636, 17], [636, 18], "        sys.exit(1)\n"], [8, ")", [636, 18], [636, 19], "        sys.exit(1)\n"], [4, "\n", [636, 19], [636, 20], "        sys.exit(1)\n"], [6, "", [639, 4], [639, 4], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [1, "parser", [639, 4], [639, 10], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [22, "=", [639, 11], [639, 12], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [1, "argparse", [639, 13], [639, 21], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [23, ".", [639, 21], [639, 22], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [1, "ArgumentParser", [639, 22], [639, 36], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [7, "(", [639, 36], [639, 37], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [1, "prog", [639, 37], [639, 41], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [22, "=", [639, 41], [639, 42], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [3, "'python -m tokenize'", [639, 42], [639, 62], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [8, ")", [639, 62], [639, 63], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [4, "\n", [639, 63], [639, 64], "    parser = argparse.ArgumentParser(prog='python -m tokenize')\n"], [1, "parser", [640, 4], [640, 10], "    parser.add_argument(dest='filename', nargs='?',\n"], [23, ".", [640, 10], [640, 11], "    parser.add_argument(dest='filename', nargs='?',\n"], [1, "add_argument", [640, 11], [640, 23], "    parser.add_argument(dest='filename', nargs='?',\n"], [7, "(", [640, 23], [640, 24], "    parser.add_argument(dest='filename', nargs='?',\n"], [1, "dest", [640, 24], [640, 28], "    parser.add_argument(dest='filename', nargs='?',\n"], [22, "=", [640, 28], [640, 29], "    parser.add_argument(dest='filename', nargs='?',\n"], [3, "'filename'", [640, 29], [640, 39], "    parser.add_argument(dest='filename', nargs='?',\n"], [12, ",", [640, 39], [640, 40], "    parser.add_argument(dest='filename', nargs='?',\n"], [1, "nargs", [640, 41], [640, 46], "    parser.add_argument(dest='filename', nargs='?',\n"], [22, "=", [640, 46], [640, 47], "    parser.add_argument(dest='filename', nargs='?',\n"], [3, "'?'", [640, 47], [640, 50], "    parser.add_argument(dest='filename', nargs='?',\n"], [12, ",", [640, 50], [640, 51], "    parser.add_argument(dest='filename', nargs='?',\n"], [1, "metavar", [641, 24], [641, 31], "                        metavar='filename.py',\n"], [22, "=", [641, 31], [641, 32], "                        metavar='filename.py',\n"], [3, "'filename.py'", [641, 32], [641, 45], "                        metavar='filename.py',\n"], [12, ",", [641, 45], [641, 46], "                        metavar='filename.py',\n"], [1, "help", [642, 24], [642, 28], "                        help='the file to tokenize; defaults to stdin')\n"], [22, "=", [642, 28], [642, 29], "                        help='the file to tokenize; defaults to stdin')\n"], [3, "'the file to tokenize; defaults to stdin'", [642, 29], [642, 70], "                        help='the file to tokenize; defaults to stdin')\n"], [8, ")", [642, 70], [642, 71], "                        help='the file to tokenize; defaults to stdin')\n"], [4, "\n", [642, 71], [642, 72], "                        help='the file to tokenize; defaults to stdin')\n"], [1, "parser", [643, 4], [643, 10], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [23, ".", [643, 10], [643, 11], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [1, "add_argument", [643, 11], [643, 23], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [7, "(", [643, 23], [643, 24], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [3, "'-e'", [643, 24], [643, 28], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [12, ",", [643, 28], [643, 29], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [3, "'--exact'", [643, 30], [643, 39], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [12, ",", [643, 39], [643, 40], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [1, "dest", [643, 41], [643, 45], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [22, "=", [643, 45], [643, 46], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [3, "'exact'", [643, 46], [643, 53], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [12, ",", [643, 53], [643, 54], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [1, "action", [643, 55], [643, 61], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [22, "=", [643, 61], [643, 62], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [3, "'store_true'", [643, 62], [643, 74], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [12, ",", [643, 74], [643, 75], "    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n"], [1, "help", [644, 24], [644, 28], "                        help='display token names using the exact type')\n"], [22, "=", [644, 28], [644, 29], "                        help='display token names using the exact type')\n"], [3, "'display token names using the exact type'", [644, 29], [644, 71], "                        help='display token names using the exact type')\n"], [8, ")", [644, 71], [644, 72], "                        help='display token names using the exact type')\n"], [4, "\n", [644, 72], [644, 73], "                        help='display token names using the exact type')\n"], [1, "args", [645, 4], [645, 8], "    args = parser.parse_args()\n"], [22, "=", [645, 9], [645, 10], "    args = parser.parse_args()\n"], [1, "parser", [645, 11], [645, 17], "    args = parser.parse_args()\n"], [23, ".", [645, 17], [645, 18], "    args = parser.parse_args()\n"], [1, "parse_args", [645, 18], [645, 28], "    args = parser.parse_args()\n"], [7, "(", [645, 28], [645, 29], "    args = parser.parse_args()\n"], [8, ")", [645, 29], [645, 30], "    args = parser.parse_args()\n"], [4, "\n", [645, 30], [645, 31], "    args = parser.parse_args()\n"], [1, "try", [647, 4], [647, 7], "    try:\n"], [11, ":", [647, 7], [647, 8], "    try:\n"], [4, "\n", [647, 8], [647, 9], "    try:\n"], [5, "        ", [649, 0], [649, 8], "        if args.filename:\n"], [1, "if", [649, 8], [649, 10], "        if args.filename:\n"], [1, "args", [649, 11], [649, 15], "        if args.filename:\n"], [23, ".", [649, 15], [649, 16], "        if args.filename:\n"], [1, "filename", [649, 16], [649, 24], "        if args.filename:\n"], [11, ":", [649, 24], [649, 25], "        if args.filename:\n"], [4, "\n", [649, 25], [649, 26], "        if args.filename:\n"], [5, "            ", [650, 0], [650, 12], "            filename = args.filename\n"], [1, "filename", [650, 12], [650, 20], "            filename = args.filename\n"], [22, "=", [650, 21], [650, 22], "            filename = args.filename\n"], [1, "args", [650, 23], [650, 27], "            filename = args.filename\n"], [23, ".", [650, 27], [650, 28], "            filename = args.filename\n"], [1, "filename", [650, 28], [650, 36], "            filename = args.filename\n"], [4, "\n", [650, 36], [650, 37], "            filename = args.filename\n"], [1, "with", [651, 12], [651, 16], "            with _builtin_open(filename, 'rb') as f:\n"], [1, "_builtin_open", [651, 17], [651, 30], "            with _builtin_open(filename, 'rb') as f:\n"], [7, "(", [651, 30], [651, 31], "            with _builtin_open(filename, 'rb') as f:\n"], [1, "filename", [651, 31], [651, 39], "            with _builtin_open(filename, 'rb') as f:\n"], [12, ",", [651, 39], [651, 40], "            with _builtin_open(filename, 'rb') as f:\n"], [3, "'rb'", [651, 41], [651, 45], "            with _builtin_open(filename, 'rb') as f:\n"], [8, ")", [651, 45], [651, 46], "            with _builtin_open(filename, 'rb') as f:\n"], [1, "as", [651, 47], [651, 49], "            with _builtin_open(filename, 'rb') as f:\n"], [1, "f", [651, 50], [651, 51], "            with _builtin_open(filename, 'rb') as f:\n"], [11, ":", [651, 51], [651, 52], "            with _builtin_open(filename, 'rb') as f:\n"], [4, "\n", [651, 52], [651, 53], "            with _builtin_open(filename, 'rb') as f:\n"], [5, "                ", [652, 0], [652, 16], "                tokens = list(tokenize(f.readline))\n"], [1, "tokens", [652, 16], [652, 22], "                tokens = list(tokenize(f.readline))\n"], [22, "=", [652, 23], [652, 24], "                tokens = list(tokenize(f.readline))\n"], [1, "list", [652, 25], [652, 29], "                tokens = list(tokenize(f.readline))\n"], [7, "(", [652, 29], [652, 30], "                tokens = list(tokenize(f.readline))\n"], [1, "tokenize", [652, 30], [652, 38], "                tokens = list(tokenize(f.readline))\n"], [7, "(", [652, 38], [652, 39], "                tokens = list(tokenize(f.readline))\n"], [1, "f", [652, 39], [652, 40], "                tokens = list(tokenize(f.readline))\n"], [23, ".", [652, 40], [652, 41], "                tokens = list(tokenize(f.readline))\n"], [1, "readline", [652, 41], [652, 49], "                tokens = list(tokenize(f.readline))\n"], [8, ")", [652, 49], [652, 50], "                tokens = list(tokenize(f.readline))\n"], [8, ")", [652, 50], [652, 51], "                tokens = list(tokenize(f.readline))\n"], [4, "\n", [652, 51], [652, 52], "                tokens = list(tokenize(f.readline))\n"], [6, "", [653, 8], [653, 8], "        else:\n"], [6, "", [653, 8], [653, 8], "        else:\n"], [1, "else", [653, 8], [653, 12], "        else:\n"], [11, ":", [653, 12], [653, 13], "        else:\n"], [4, "\n", [653, 13], [653, 14], "        else:\n"], [5, "            ", [654, 0], [654, 12], "            filename = \"<stdin>\"\n"], [1, "filename", [654, 12], [654, 20], "            filename = \"<stdin>\"\n"], [22, "=", [654, 21], [654, 22], "            filename = \"<stdin>\"\n"], [3, "\"<stdin>\"", [654, 23], [654, 32], "            filename = \"<stdin>\"\n"], [4, "\n", [654, 32], [654, 33], "            filename = \"<stdin>\"\n"], [1, "tokens", [655, 12], [655, 18], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [22, "=", [655, 19], [655, 20], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [1, "_tokenize", [655, 21], [655, 30], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [7, "(", [655, 30], [655, 31], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [1, "sys", [655, 31], [655, 34], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [23, ".", [655, 34], [655, 35], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [1, "stdin", [655, 35], [655, 40], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [23, ".", [655, 40], [655, 41], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [1, "readline", [655, 41], [655, 49], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [12, ",", [655, 49], [655, 50], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [1, "None", [655, 51], [655, 55], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [8, ")", [655, 55], [655, 56], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [4, "\n", [655, 56], [655, 57], "            tokens = _tokenize(sys.stdin.readline, None)\n"], [6, "", [658, 8], [658, 8], "        for token in tokens:\n"], [1, "for", [658, 8], [658, 11], "        for token in tokens:\n"], [1, "token", [658, 12], [658, 17], "        for token in tokens:\n"], [1, "in", [658, 18], [658, 20], "        for token in tokens:\n"], [1, "tokens", [658, 21], [658, 27], "        for token in tokens:\n"], [11, ":", [658, 27], [658, 28], "        for token in tokens:\n"], [4, "\n", [658, 28], [658, 29], "        for token in tokens:\n"], [5, "            ", [659, 0], [659, 12], "            token_type = token.type\n"], [1, "token_type", [659, 12], [659, 22], "            token_type = token.type\n"], [22, "=", [659, 23], [659, 24], "            token_type = token.type\n"], [1, "token", [659, 25], [659, 30], "            token_type = token.type\n"], [23, ".", [659, 30], [659, 31], "            token_type = token.type\n"], [1, "type", [659, 31], [659, 35], "            token_type = token.type\n"], [4, "\n", [659, 35], [659, 36], "            token_type = token.type\n"], [1, "if", [660, 12], [660, 14], "            if args.exact:\n"], [1, "args", [660, 15], [660, 19], "            if args.exact:\n"], [23, ".", [660, 19], [660, 20], "            if args.exact:\n"], [1, "exact", [660, 20], [660, 25], "            if args.exact:\n"], [11, ":", [660, 25], [660, 26], "            if args.exact:\n"], [4, "\n", [660, 26], [660, 27], "            if args.exact:\n"], [5, "                ", [661, 0], [661, 16], "                token_type = token.exact_type\n"], [1, "token_type", [661, 16], [661, 26], "                token_type = token.exact_type\n"], [22, "=", [661, 27], [661, 28], "                token_type = token.exact_type\n"], [1, "token", [661, 29], [661, 34], "                token_type = token.exact_type\n"], [23, ".", [661, 34], [661, 35], "                token_type = token.exact_type\n"], [1, "exact_type", [661, 35], [661, 45], "                token_type = token.exact_type\n"], [4, "\n", [661, 45], [661, 46], "                token_type = token.exact_type\n"], [6, "", [662, 12], [662, 12], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [1, "token_range", [662, 12], [662, 23], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [22, "=", [662, 24], [662, 25], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [3, "\"%d,%d-%d,%d:\"", [662, 26], [662, 40], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [24, "%", [662, 41], [662, 42], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [7, "(", [662, 43], [662, 44], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [1, "token", [662, 44], [662, 49], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [23, ".", [662, 49], [662, 50], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [1, "start", [662, 50], [662, 55], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [14, "+", [662, 56], [662, 57], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [1, "token", [662, 58], [662, 63], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [23, ".", [662, 63], [662, 64], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [1, "end", [662, 64], [662, 67], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [8, ")", [662, 67], [662, 68], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [4, "\n", [662, 68], [662, 69], "            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n"], [1, "print", [663, 12], [663, 17], "            print(\"%-20s%-15s%-15r\" %\n"], [7, "(", [663, 17], [663, 18], "            print(\"%-20s%-15s%-15r\" %\n"], [3, "\"%-20s%-15s%-15r\"", [663, 18], [663, 35], "            print(\"%-20s%-15s%-15r\" %\n"], [24, "%", [663, 36], [663, 37], "            print(\"%-20s%-15s%-15r\" %\n"], [7, "(", [664, 18], [664, 19], "                  (token_range, tok_name[token_type], token.string))\n"], [1, "token_range", [664, 19], [664, 30], "                  (token_range, tok_name[token_type], token.string))\n"], [12, ",", [664, 30], [664, 31], "                  (token_range, tok_name[token_type], token.string))\n"], [1, "tok_name", [664, 32], [664, 40], "                  (token_range, tok_name[token_type], token.string))\n"], [9, "[", [664, 40], [664, 41], "                  (token_range, tok_name[token_type], token.string))\n"], [1, "token_type", [664, 41], [664, 51], "                  (token_range, tok_name[token_type], token.string))\n"], [10, "]", [664, 51], [664, 52], "                  (token_range, tok_name[token_type], token.string))\n"], [12, ",", [664, 52], [664, 53], "                  (token_range, tok_name[token_type], token.string))\n"], [1, "token", [664, 54], [664, 59], "                  (token_range, tok_name[token_type], token.string))\n"], [23, ".", [664, 59], [664, 60], "                  (token_range, tok_name[token_type], token.string))\n"], [1, "string", [664, 60], [664, 66], "                  (token_range, tok_name[token_type], token.string))\n"], [8, ")", [664, 66], [664, 67], "                  (token_range, tok_name[token_type], token.string))\n"], [8, ")", [664, 67], [664, 68], "                  (token_range, tok_name[token_type], token.string))\n"], [4, "\n", [664, 68], [664, 69], "                  (token_range, tok_name[token_type], token.string))\n"], [6, "", [665, 4], [665, 4], "    except IndentationError as err:\n"], [6, "", [665, 4], [665, 4], "    except IndentationError as err:\n"], [1, "except", [665, 4], [665, 10], "    except IndentationError as err:\n"], [1, "IndentationError", [665, 11], [665, 27], "    except IndentationError as err:\n"], [1, "as", [665, 28], [665, 30], "    except IndentationError as err:\n"], [1, "err", [665, 31], [665, 34], "    except IndentationError as err:\n"], [11, ":", [665, 34], [665, 35], "    except IndentationError as err:\n"], [4, "\n", [665, 35], [665, 36], "    except IndentationError as err:\n"], [5, "        ", [666, 0], [666, 8], "        line, column = err.args[1][1:3]\n"], [1, "line", [666, 8], [666, 12], "        line, column = err.args[1][1:3]\n"], [12, ",", [666, 12], [666, 13], "        line, column = err.args[1][1:3]\n"], [1, "column", [666, 14], [666, 20], "        line, column = err.args[1][1:3]\n"], [22, "=", [666, 21], [666, 22], "        line, column = err.args[1][1:3]\n"], [1, "err", [666, 23], [666, 26], "        line, column = err.args[1][1:3]\n"], [23, ".", [666, 26], [666, 27], "        line, column = err.args[1][1:3]\n"], [1, "args", [666, 27], [666, 31], "        line, column = err.args[1][1:3]\n"], [9, "[", [666, 31], [666, 32], "        line, column = err.args[1][1:3]\n"], [2, "1", [666, 32], [666, 33], "        line, column = err.args[1][1:3]\n"], [10, "]", [666, 33], [666, 34], "        line, column = err.args[1][1:3]\n"], [9, "[", [666, 34], [666, 35], "        line, column = err.args[1][1:3]\n"], [2, "1", [666, 35], [666, 36], "        line, column = err.args[1][1:3]\n"], [11, ":", [666, 36], [666, 37], "        line, column = err.args[1][1:3]\n"], [2, "3", [666, 37], [666, 38], "        line, column = err.args[1][1:3]\n"], [10, "]", [666, 38], [666, 39], "        line, column = err.args[1][1:3]\n"], [4, "\n", [666, 39], [666, 40], "        line, column = err.args[1][1:3]\n"], [1, "error", [667, 8], [667, 13], "        error(err.args[0], filename, (line, column))\n"], [7, "(", [667, 13], [667, 14], "        error(err.args[0], filename, (line, column))\n"], [1, "err", [667, 14], [667, 17], "        error(err.args[0], filename, (line, column))\n"], [23, ".", [667, 17], [667, 18], "        error(err.args[0], filename, (line, column))\n"], [1, "args", [667, 18], [667, 22], "        error(err.args[0], filename, (line, column))\n"], [9, "[", [667, 22], [667, 23], "        error(err.args[0], filename, (line, column))\n"], [2, "0", [667, 23], [667, 24], "        error(err.args[0], filename, (line, column))\n"], [10, "]", [667, 24], [667, 25], "        error(err.args[0], filename, (line, column))\n"], [12, ",", [667, 25], [667, 26], "        error(err.args[0], filename, (line, column))\n"], [1, "filename", [667, 27], [667, 35], "        error(err.args[0], filename, (line, column))\n"], [12, ",", [667, 35], [667, 36], "        error(err.args[0], filename, (line, column))\n"], [7, "(", [667, 37], [667, 38], "        error(err.args[0], filename, (line, column))\n"], [1, "line", [667, 38], [667, 42], "        error(err.args[0], filename, (line, column))\n"], [12, ",", [667, 42], [667, 43], "        error(err.args[0], filename, (line, column))\n"], [1, "column", [667, 44], [667, 50], "        error(err.args[0], filename, (line, column))\n"], [8, ")", [667, 50], [667, 51], "        error(err.args[0], filename, (line, column))\n"], [8, ")", [667, 51], [667, 52], "        error(err.args[0], filename, (line, column))\n"], [4, "\n", [667, 52], [667, 53], "        error(err.args[0], filename, (line, column))\n"], [6, "", [668, 4], [668, 4], "    except TokenError as err:\n"], [1, "except", [668, 4], [668, 10], "    except TokenError as err:\n"], [1, "TokenError", [668, 11], [668, 21], "    except TokenError as err:\n"], [1, "as", [668, 22], [668, 24], "    except TokenError as err:\n"], [1, "err", [668, 25], [668, 28], "    except TokenError as err:\n"], [11, ":", [668, 28], [668, 29], "    except TokenError as err:\n"], [4, "\n", [668, 29], [668, 30], "    except TokenError as err:\n"], [5, "        ", [669, 0], [669, 8], "        line, column = err.args[1]\n"], [1, "line", [669, 8], [669, 12], "        line, column = err.args[1]\n"], [12, ",", [669, 12], [669, 13], "        line, column = err.args[1]\n"], [1, "column", [669, 14], [669, 20], "        line, column = err.args[1]\n"], [22, "=", [669, 21], [669, 22], "        line, column = err.args[1]\n"], [1, "err", [669, 23], [669, 26], "        line, column = err.args[1]\n"], [23, ".", [669, 26], [669, 27], "        line, column = err.args[1]\n"], [1, "args", [669, 27], [669, 31], "        line, column = err.args[1]\n"], [9, "[", [669, 31], [669, 32], "        line, column = err.args[1]\n"], [2, "1", [669, 32], [669, 33], "        line, column = err.args[1]\n"], [10, "]", [669, 33], [669, 34], "        line, column = err.args[1]\n"], [4, "\n", [669, 34], [669, 35], "        line, column = err.args[1]\n"], [1, "error", [670, 8], [670, 13], "        error(err.args[0], filename, (line, column))\n"], [7, "(", [670, 13], [670, 14], "        error(err.args[0], filename, (line, column))\n"], [1, "err", [670, 14], [670, 17], "        error(err.args[0], filename, (line, column))\n"], [23, ".", [670, 17], [670, 18], "        error(err.args[0], filename, (line, column))\n"], [1, "args", [670, 18], [670, 22], "        error(err.args[0], filename, (line, column))\n"], [9, "[", [670, 22], [670, 23], "        error(err.args[0], filename, (line, column))\n"], [2, "0", [670, 23], [670, 24], "        error(err.args[0], filename, (line, column))\n"], [10, "]", [670, 24], [670, 25], "        error(err.args[0], filename, (line, column))\n"], [12, ",", [670, 25], [670, 26], "        error(err.args[0], filename, (line, column))\n"], [1, "filename", [670, 27], [670, 35], "        error(err.args[0], filename, (line, column))\n"], [12, ",", [670, 35], [670, 36], "        error(err.args[0], filename, (line, column))\n"], [7, "(", [670, 37], [670, 38], "        error(err.args[0], filename, (line, column))\n"], [1, "line", [670, 38], [670, 42], "        error(err.args[0], filename, (line, column))\n"], [12, ",", [670, 42], [670, 43], "        error(err.args[0], filename, (line, column))\n"], [1, "column", [670, 44], [670, 50], "        error(err.args[0], filename, (line, column))\n"], [8, ")", [670, 50], [670, 51], "        error(err.args[0], filename, (line, column))\n"], [8, ")", [670, 51], [670, 52], "        error(err.args[0], filename, (line, column))\n"], [4, "\n", [670, 52], [670, 53], "        error(err.args[0], filename, (line, column))\n"], [6, "", [671, 4], [671, 4], "    except SyntaxError as err:\n"], [1, "except", [671, 4], [671, 10], "    except SyntaxError as err:\n"], [1, "SyntaxError", [671, 11], [671, 22], "    except SyntaxError as err:\n"], [1, "as", [671, 23], [671, 25], "    except SyntaxError as err:\n"], [1, "err", [671, 26], [671, 29], "    except SyntaxError as err:\n"], [11, ":", [671, 29], [671, 30], "    except SyntaxError as err:\n"], [4, "\n", [671, 30], [671, 31], "    except SyntaxError as err:\n"], [5, "        ", [672, 0], [672, 8], "        error(err, filename)\n"], [1, "error", [672, 8], [672, 13], "        error(err, filename)\n"], [7, "(", [672, 13], [672, 14], "        error(err, filename)\n"], [1, "err", [672, 14], [672, 17], "        error(err, filename)\n"], [12, ",", [672, 17], [672, 18], "        error(err, filename)\n"], [1, "filename", [672, 19], [672, 27], "        error(err, filename)\n"], [8, ")", [672, 27], [672, 28], "        error(err, filename)\n"], [4, "\n", [672, 28], [672, 29], "        error(err, filename)\n"], [6, "", [673, 4], [673, 4], "    except OSError as err:\n"], [1, "except", [673, 4], [673, 10], "    except OSError as err:\n"], [1, "OSError", [673, 11], [673, 18], "    except OSError as err:\n"], [1, "as", [673, 19], [673, 21], "    except OSError as err:\n"], [1, "err", [673, 22], [673, 25], "    except OSError as err:\n"], [11, ":", [673, 25], [673, 26], "    except OSError as err:\n"], [4, "\n", [673, 26], [673, 27], "    except OSError as err:\n"], [5, "        ", [674, 0], [674, 8], "        error(err)\n"], [1, "error", [674, 8], [674, 13], "        error(err)\n"], [7, "(", [674, 13], [674, 14], "        error(err)\n"], [1, "err", [674, 14], [674, 17], "        error(err)\n"], [8, ")", [674, 17], [674, 18], "        error(err)\n"], [4, "\n", [674, 18], [674, 19], "        error(err)\n"], [6, "", [675, 4], [675, 4], "    except KeyboardInterrupt:\n"], [1, "except", [675, 4], [675, 10], "    except KeyboardInterrupt:\n"], [1, "KeyboardInterrupt", [675, 11], [675, 28], "    except KeyboardInterrupt:\n"], [11, ":", [675, 28], [675, 29], "    except KeyboardInterrupt:\n"], [4, "\n", [675, 29], [675, 30], "    except KeyboardInterrupt:\n"], [5, "        ", [676, 0], [676, 8], "        print(\"interrupted\\n\")\n"], [1, "print", [676, 8], [676, 13], "        print(\"interrupted\\n\")\n"], [7, "(", [676, 13], [676, 14], "        print(\"interrupted\\n\")\n"], [3, "\"interrupted\\n\"", [676, 14], [676, 29], "        print(\"interrupted\\n\")\n"], [8, ")", [676, 29], [676, 30], "        print(\"interrupted\\n\")\n"], [4, "\n", [676, 30], [676, 31], "        print(\"interrupted\\n\")\n"], [6, "", [677, 4], [677, 4], "    except Exception as err:\n"], [1, "except", [677, 4], [677, 10], "    except Exception as err:\n"], [1, "Exception", [677, 11], [677, 20], "    except Exception as err:\n"], [1, "as", [677, 21], [677, 23], "    except Exception as err:\n"], [1, "err", [677, 24], [677, 27], "    except Exception as err:\n"], [11, ":", [677, 27], [677, 28], "    except Exception as err:\n"], [4, "\n", [677, 28], [677, 29], "    except Exception as err:\n"], [5, "        ", [678, 0], [678, 8], "        perror(\"unexpected error: %s\" % err)\n"], [1, "perror", [678, 8], [678, 14], "        perror(\"unexpected error: %s\" % err)\n"], [7, "(", [678, 14], [678, 15], "        perror(\"unexpected error: %s\" % err)\n"], [3, "\"unexpected error: %s\"", [678, 15], [678, 37], "        perror(\"unexpected error: %s\" % err)\n"], [24, "%", [678, 38], [678, 39], "        perror(\"unexpected error: %s\" % err)\n"], [1, "err", [678, 40], [678, 43], "        perror(\"unexpected error: %s\" % err)\n"], [8, ")", [678, 43], [678, 44], "        perror(\"unexpected error: %s\" % err)\n"], [4, "\n", [678, 44], [678, 45], "        perror(\"unexpected error: %s\" % err)\n"], [1, "raise", [679, 8], [679, 13], "        raise\n"], [4, "\n", [679, 13], [679, 14], "        raise\n"], [6, "", [681, 0], [681, 0], "if __name__ == \"__main__\":\n"], [6, "", [681, 0], [681, 0], "if __name__ == \"__main__\":\n"], [1, "if", [681, 0], [681, 2], "if __name__ == \"__main__\":\n"], [1, "__name__", [681, 3], [681, 11], "if __name__ == \"__main__\":\n"], [27, "==", [681, 12], [681, 14], "if __name__ == \"__main__\":\n"], [3, "\"__main__\"", [681, 15], [681, 25], "if __name__ == \"__main__\":\n"], [11, ":", [681, 25], [681, 26], "if __name__ == \"__main__\":\n"], [4, "\n", [681, 26], [681, 27], "if __name__ == \"__main__\":\n"], [5, "    ", [682, 0], [682, 4], "    main()\n"], [1, "main", [682, 4], [682, 8], "    main()\n"], [7, "(", [682, 8], [682, 9], "    main()\n"], [8, ")", [682, 9], [682, 10], "    main()\n"], [4, "\n", [682, 10], [682, 11], "    main()\n"], [6, "", [683, 0], [683, 0], ""], [-1, "", [683, 0], [683, 0], ""]]